create or replace database BEGA_HR_DATA_{{ env }} COMMENT='Database for the HR Data';

create or replace schema BEGA_HR_DATA_{{ env }}.CONTROL;

create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER (
	PARAMETER_TYPE VARCHAR(16777216) NOT NULL,
	PARAMETER_VALUE VARCHAR(16777216) NOT NULL,
	primary key (PARAMETER_TYPE)
)COMMENT='Parameters table for the HR domain in the Snowflake Data Platform'
;
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER_LEAVE_TYPE (
	LEAVE_TYPE VARCHAR(16777216) NOT NULL,
	LEAVE_TYPE_VALUE VARCHAR(16777216) NOT NULL
)COMMENT='Parameters table for the HR domain in the Snowflake Data Platform'
;
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER_WORKER_EXTERNAL_CALCULATION (
	LABOUR_PROVIDER VARCHAR(16777216) NOT NULL,
	ITEM_TYPE VARCHAR(16777216) NOT NULL,
	MULTIPLIER NUMBER(38,0) NOT NULL,
	DIVISOR NUMBER(38,0) NOT NULL,
	IS_CONSIDERED BOOLEAN NOT NULL
)COMMENT='Parameters table for the External Workers calculations'
;
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.PAYROLL_PAY_COMPONENTS_DEPRECATED (
	PAY_COMPONENT VARCHAR(16777216),
	LEAVE_REASON_CODE VARCHAR(16777216),
	DESCRIPTION VARCHAR(16777216),
	FULL_DESCRIPTION VARCHAR(16777216),
	GL_LINE VARCHAR(16777216),
	KOROIT_ONLY BOOLEAN,
	FTE_HOURS BOOLEAN,
	OVERTIME BOOLEAN,
	MULTIPLIER NUMBER(38,2),
	MULTIPLIER_TYPE VARCHAR(16777216)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.PAYROLL_STANDARD_HOURS (
	PAY_FREQUENCY VARCHAR(16777216),
	LOCATION VARCHAR(16777216),
	STANDARD_HOURS NUMBER(38,2)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.PAYROLL_TRANSACTION_PARAMETERS (
	TRANSACTION_TYPE NUMBER(38,0),
	TRANSACTION_TYPE_DESC VARCHAR(16777216),
	PAY_COMPONENT VARCHAR(16777216),
	LEAVE_REASON_CODE VARCHAR(16777216),
	PAY_COMPONENT_DESC VARCHAR(16777216),
	FULL_DESCRIPTION VARCHAR(16777216),
	GL_LINE VARCHAR(16777216),
	KOROIT_ONLY BOOLEAN,
	SALARY BOOLEAN,
	NORMAL_HOURS BOOLEAN,
	FTE_HOURS BOOLEAN,
	ALLOWANCES BOOLEAN,
	OVERTIME BOOLEAN,
	SUPER BOOLEAN,
	OTHER_ON_COSTS BOOLEAN,
	GOES_NOWHERE BOOLEAN,
	PAYROLL_TAX BOOLEAN
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.REF_PAYROLL_TAX (
	LOCATION_STATE VARCHAR(16777216),
	LOCATION_NAME VARCHAR(16777216),
	PAYROLL_TAX_PERCENT NUMBER(15,4) NOT NULL
)COMMENT='Parameters table for the payroll tax per location'
;
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.REF_ROW_LEVEL_MANUAL_ASSIGNMENT (
	AUTHORISED_POSITION_CODE VARCHAR(16777216),
	AUTHORISED_EMAIL_ADDRESS VARCHAR(16777216),
	FROM_DEPARTMENT_ID VARCHAR(16777216),
	ASSIGN_ALL_WORKER_PORITIONS BOOLEAN NOT NULL
)COMMENT='Reference table for the manual assignments uf email addresses to departments and their descendents'
;
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.REPORT_METADATA (
	REPORT_NAME VARCHAR(16777216) NOT NULL,
	METADATA_TYPE VARCHAR(16777216) NOT NULL,
	METADATA_VALUE VARCHAR(16777216) NOT NULL,
	primary key (REPORT_NAME, METADATA_TYPE)
)COMMENT='Metadata on the reporting level'
;
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.TAXABLE_PAY_COMPONENTS_DEPRECATED (
	TRANSACTION_TYPE VARCHAR(16777216),
	TRANSACTION_TYPE_DESC VARCHAR(16777216),
	PAY_COMPONENT VARCHAR(16777216),
	PAY_COMPONENT_DESC VARCHAR(16777216),
	SALARY BOOLEAN,
	ALLOWANCES BOOLEAN,
	OVERTIME BOOLEAN,
	SUPER BOOLEAN,
	OTHER_ON_COST BOOLEAN,
	GOES_NO_WHERE BOOLEAN,
	PAYROLL_TAX BOOLEAN,
	NORMAL_HOURS BOOLEAN
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.CONTROL.USER_DEFINED_LEAVE_TYPE (
	LEAVE_TYPE_ID NUMBER(38,0),
	LEAVE_TYPE VARCHAR(16777216),
	LEAVE_REASON_CODE VARCHAR(16777216),
	PAY_COMPONENT_DESC VARCHAR(16777216)
);
create or replace schema BEGA_HR_DATA_{{ env }}.RAW_HISTORY;

create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_HISTORY (
	IDCOSTACCOUNT NUMBER(38,0),
	CCOSTCODE VARCHAR(100),
	ILINK NUMBER(38,0),
	IPOSITION NUMBER(38,0),
	BACTIVE BOOLEAN,
	CCODE VARCHAR(50),
	CDESCRIPTION VARCHAR(30),
	MAX_IPOSITION NUMBER(38,0),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_STRUCTURE_HISTORY (
	IDCOSTACCSTRUCTURE NUMBER(38,0),
	CSEPARATOR VARCHAR(1),
	CDESCRIPTION VARCHAR(50),
	ILENGTH NUMBER(38,0),
	IPOSITION NUMBER(38,0),
	CCODE VARCHAR(10),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_ANNUAL_HISTORY (
	IDLEAVE NUMBER(38,0),
	BPUBLICHOLIDAY BOOLEAN,
	FENTITLEMENT FLOAT,
	IENTITLEMENTSEVERY NUMBER(38,0),
	IPRORATAPERIODUNITS NUMBER(38,0),
	IENTITLEMENTUNITS NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	FPRORATA FLOAT,
	CHOURTYPES VARCHAR(255),
	IPRORATAUNITS NUMBER(38,0),
	BCREDITATENDOFPERIOD BOOLEAN,
	IPRORATAEVERY NUMBER(38,0),
	CUDLEAVECLASS VARCHAR(255),
	BTERMADJUSTMENT BOOLEAN,
	CDESCRIPTION VARCHAR(50),
	BHOURLY BOOLEAN,
	CADDITIONS VARCHAR(256),
	IINCLUDELEAVELOADINGINTERM NUMBER(38,0),
	COTHERLEAVEREASONS VARCHAR(255),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	FACCRUALRATE FLOAT,
	INEXTLEAVE NUMBER(38,0),
	CCODE VARCHAR(10),
	DSTANDARDENTDATE TIMESTAMP_NTZ(9),
	BCOSTSPLIT BOOLEAN,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_HISTORY (
	IDEMPLOYEELEAVE NUMBER(38,0),
	FPOSTPROHOURS FLOAT,
	BNONENTMET BOOLEAN,
	ICOSTACCOUNTID NUMBER(38,0),
	COST_ACCOUNT_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	FCURRENTACCRUALHOURS FLOAT,
	DSUSPENDFROM TIMESTAMP_NTZ(9),
	DCURRENTACCRUALDATE TIMESTAMP_NTZ(9),
	DTAKENDATE TIMESTAMP_NTZ(9),
	FTAKENHOURS FLOAT,
	DPOSTENTDATE TIMESTAMP_NTZ(9),
	IEMPLOYEEID NUMBER(38,0),
	EMPLOYEE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	BFIRSTENTPERIOD BOOLEAN,
	FYEARTODATELOADING FLOAT,
	FLEAVESHIFTS FLOAT,
	FPREENTHOURS FLOAT,
	ILEAVELOADINGCLASSID NUMBER(38,0),
	LEAVE_LOADING_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	ICHANGEAGENTID NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	FPOSTENTHOURS FLOAT,
	DPOSTPRODATE TIMESTAMP_NTZ(9),
	DSUSPENDTO TIMESTAMP_NTZ(9),
	BSUSPENDENT BOOLEAN,
	FPRE78ENTHOURS FLOAT,
	BGRANT BOOLEAN,
	ILEAVECLASSID NUMBER(38,0),
	SICK_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	ANNUAL_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	LONG_SERVICE_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	USER_DEFINED_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	INONENTMONTHS NUMBER(38,0),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LOADING_HISTORY (
	IDLOADING NUMBER(38,0),
	FLOADINGPERCENT FLOAT,
	FMAXLOADING FLOAT,
	ILEAVELOADINGADDSID NUMBER(38,0),
	CCODE VARCHAR(10),
	CLOADINGNAME VARCHAR(50),
	IRATETYPEID NUMBER(38,0),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LONG_SERVICE_HISTORY (
	IDLEAVE NUMBER(38,0),
	IENTITLEMENTSEVERY NUMBER(38,0),
	FENTITLEMENT FLOAT,
	IENTITLEMENTUNITS NUMBER(38,0),
	IPRORATAEVERY NUMBER(38,0),
	CPORTLSLPAYCOMPONENTS VARCHAR(256),
	ITERMPAYOUT NUMBER(38,0),
	CHOURTYPES VARCHAR(255),
	ILEAVETYPE NUMBER(38,0),
	CUDLEAVECLASS VARCHAR(255),
	BPORTABLE BOOLEAN,
	CDESCRIPTION VARCHAR(50),
	CADDITIONS VARCHAR(256),
	COTHERLEAVEREASONS VARCHAR(255),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	FACCRUALRATE FLOAT,
	CPORTLSLUDLEAVECLASS VARCHAR(256),
	IPRORATAPERIODUNITS NUMBER(38,0),
	INEXTLEAVE NUMBER(38,0),
	CPORTLSLADDITIONS VARCHAR(256),
	CCODE VARCHAR(10),
	BHOURLY BOOLEAN,
	BCOSTSPLIT BOOLEAN,
	IREPEATPRORATA NUMBER(38,0),
	CPORTLSLOTHERLEAVEREASONS VARCHAR(256),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_SICK_HISTORY (
	IDLEAVE NUMBER(38,0),
	CADDITIONS VARCHAR(256),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	IMAXPERIODUNITS NUMBER(38,0),
	IACCRUALUNITS NUMBER(38,0),
	CCODE VARCHAR(10),
	IENTITLEMENTUNITS NUMBER(38,0),
	IACCRUALPERIODUNITS NUMBER(38,0),
	CDESCRIPTION VARCHAR(50),
	ICLASSIFICATIONTYPE NUMBER(38,0),
	IACCRUALEVERY NUMBER(38,0),
	IENTITLEMENTSEVERY NUMBER(38,0),
	BPAYOUTONTERMINATION BOOLEAN,
	BCOSTSPLIT BOOLEAN,
	INEXTLEAVE NUMBER(38,0),
	BHOURLY BOOLEAN,
	BAPPLYHALFACCRUAL BOOLEAN,
	CHOURTYPES VARCHAR(255),
	CUDLEAVECLASS VARCHAR(255),
	COTHERLEAVEREASONS VARCHAR(255),
	FACCRUAL FLOAT,
	FMAXACCRUAL FLOAT,
	IACCUMULATEENTITLEMENTS NUMBER(38,0),
	FACCRUALRATE FLOAT,
	FENTITLEMENT FLOAT,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_USER_DEFINED_HISTORY (
	IDLEAVE NUMBER(38,0),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	IENTITLEMENTUNITS NUMBER(38,0),
	IMAXPERIODUNITS NUMBER(38,0),
	INEXTLEAVE NUMBER(38,0),
	CCODE VARCHAR(10),
	FENTITLEMENT FLOAT,
	IPRORATAEVERY NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	IPRORATAPERIODUNITS NUMBER(38,0),
	ITERMINATIONPAYOUT NUMBER(38,0),
	FACCRUALRATE FLOAT,
	CADDITIONS VARCHAR(256),
	FPRORATA FLOAT,
	COTHERLEAVEREASONS VARCHAR(255),
	BCOSTSPLIT BOOLEAN,
	FMAXACCRUAL FLOAT,
	DSTANDARDENTDATE TIMESTAMP_NTZ(9),
	IACCUMULATEENTITLEMENTS NUMBER(38,0),
	IMETHOD NUMBER(38,0),
	CHOURTYPES VARCHAR(255),
	CUDLEAVECLASS VARCHAR(255),
	IENTITLEMENTSEVERY NUMBER(38,0),
	ITERMINATIONPAYMENTTYPE NUMBER(38,0),
	IPRORATAUNITS NUMBER(38,0),
	IINCLUDEONPAYADVICE NUMBER(38,0),
	CDESCRIPTION VARCHAR(50),
	CBALANCEDESCRIPTION VARCHAR(50),
	BPAYOUTONTERMINATION BOOLEAN,
	BCREDITATENDOFPERIOD BOOLEAN,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_CONTRACT_HOUR_HISTORY (
	IDCONTRACTHOURS NUMBER(38,0),
	CCODE VARCHAR(10),
	FDAYSPERWEEK FLOAT,
	FHOURSPERDAY FLOAT,
	CDESCRIPTION VARCHAR(50),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_HISTORY (
	IDEMPLOYEE NUMBER(38,0),
	UCEECOSTCENTRE VARCHAR(30),
	BTERMINATED BOOLEAN,
	IKIWISAVERENROLOPTID NUMBER(38,0),
	IGENERATEAUTOPAY NUMBER(38,0),
	ILOADINGCLASSID NUMBER(38,0),
	IRATEINCREASECODE NUMBER(38,0),
	FPUBLICHOLIDAYTAKENHOURS FLOAT,
	BSUSPENDPUBLICENT BOOLEAN,
	DSUSPENDALFROM TIMESTAMP_NTZ(9),
	BSTP2ISFEIEMPLOYEE BOOLEAN,
	CMIDDLENAME VARCHAR(15),
	UCEEGD VARCHAR(30),
	IANNUALLEAVECOSTACCID NUMBER(38,0),
	FTIMEHALFRATE FLOAT,
	DHALFSICKPROENTDATE TIMESTAMP_NTZ(9),
	FEXEMPTFRINGEBENEFIT FLOAT,
	IKIWISAVERSTATUS NUMBER(38,0),
	IAUTOPAYTYPE NUMBER(38,0),
	ICONTRACTHOURSID NUMBER(38,0),
	CONTRACT_HOUR_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	FANNUALPOSTPROHOURS FLOAT,
	CFIRSTNAME VARCHAR(30),
	ILONGSERVICECOSTACCID NUMBER(38,0),
	DSUSPENDALTO TIMESTAMP_NTZ(9),
	DNZPAYDAYEDLASTEXPORTDATE TIMESTAMP_NTZ(9),
	DANNUALISEDANNIVERSARYDATE TIMESTAMP_NTZ(9),
	DSUSPENDPUBLICFROM TIMESTAMP_NTZ(9),
	DPUBLICHOLIDAYENTDATE TIMESTAMP_NTZ(9),
	ISICKLEAVECLASSID NUMBER(38,0),
	BSUSPENDSICKENT BOOLEAN,
	FOTHERRATE FLOAT,
	DHIREDDATE TIMESTAMP_NTZ(9),
	ISTP2CESSATIONREASON NUMBER(38,0),
	DSUSPENDHALFSLTO TIMESTAMP_NTZ(9),
	FHALFSICKPROENTHOURS FLOAT,
	BNZWITHHOLDINGTAX BOOLEAN,
	CTELEPHONE2 VARCHAR(20),
	UCEEPROCENT VARCHAR(10),
	FANNUALLEAVETAKENHOURS FLOAT,
	CIRDEMPLOYEENAME VARCHAR(255),
	DVARIATIONDATE TIMESTAMP_NTZ(9),
	ITERMINATIONREASONID NUMBER(38,0),
	BOTHERREBATES BOOLEAN,
	ISTP2ATODEFINED NUMBER(38,0),
	DTFNDATESIGNED TIMESTAMP_NTZ(9),
	DSUSPENDLSLFROM TIMESTAMP_NTZ(9),
	CABN VARCHAR(11),
	FEXTRALEAVESHIFTS FLOAT,
	UCEEGD3 VARCHAR(30),
	ULEEMWPWKAREA VARCHAR(100),
	UCEEMGRNAME VARCHAR(30),
	ITERMINATEDPERIODID NUMBER(38,0),
	FMAXPAYLIMIT FLOAT,
	BNZSPECIFYSLRATE BOOLEAN,
	FHALFSICKTAKENHOURS FLOAT,
	IHALFSICKCOSTACCID NUMBER(38,0),
	FANNUALYEARTODATELOADING FLOAT,
	ICHANGEAGENTID NUMBER(38,0),
	IEARNINGSTYPEID NUMBER(38,0),
	FPUBLICHOLIDAYENTHOURS FLOAT,
	BMEDICARESURCHARGE BOOLEAN,
	CKIWISAVERLATEOPTOUTOTHERREASON VARCHAR(500),
	CSURNAME VARCHAR(40),
	DANNUALPOSTPRODATE TIMESTAMP_NTZ(9),
	DSUSPENDHALFSLFROM TIMESTAMP_NTZ(9),
	FSPECIFYTAXRATE FLOAT,
	BKIWISAVERISNEWEMPLOYEE BOOLEAN,
	UCEESITE VARCHAR(30),
	BPUBLICHOLIDAYCREDIT BOOLEAN,
	FLONGSERVICEPRE78ENTHOURS FLOAT,
	FTERMLUMPSUMD FLOAT,
	FNZSTUDENTLOANTAXRATE FLOAT,
	IPAYPOINTID NUMBER(38,0),
	FSICKTAKENHOURS FLOAT,
	INUMBERCHILDREN NUMBER(38,0),
	DPUBLICHOLIDAYTAKENDATE TIMESTAMP_NTZ(9),
	CPREFERREDNAME VARCHAR(15),
	BDAILYTAXING BOOLEAN,
	CSTP2TAXTREATMENT VARCHAR(6),
	DRECOMMENCEDATE TIMESTAMP_NTZ(9),
	DLONGSERVICEPOSTENTDATE TIMESTAMP_NTZ(9),
	DTERMINATIONDATE TIMESTAMP_NTZ(9),
	BMEDICAREEXEMPTION BOOLEAN,
	FSICKTOTALENT FLOAT,
	FNZSTUDENTLOANCIRTAXRATE FLOAT,
	IETPPAYSUMMARY NUMBER(38,0),
	FSICKACTUALENTHOURS FLOAT,
	BISAWARDBASED BOOLEAN,
	FLOADINGATDUNPAID FLOAT,
	UCEEGD4 VARCHAR(30),
	UCEEDIVISION VARCHAR(30),
	FAWARDRATE FLOAT,
	BNZSTUDENTLOANBOR BOOLEAN,
	CADDRESS1 VARCHAR(40),
	BSICKGRANTSICK BOOLEAN,
	ULEEMWPLOC VARCHAR(100),
	FTERMPOSTJUN83TAX FLOAT,
	FTERMAVGNORMALGROSS FLOAT,
	FLONGSERVICEPOSTPROHOURS FLOAT,
	IDOUBLERATEFACTOR NUMBER(38,0),
	UCEECOMPANY VARCHAR(30),
	IWORKMANSCOMPID NUMBER(38,0),
	FNORMALHOURS FLOAT,
	DPUBLICHOLIDAYPRODATE TIMESTAMP_NTZ(9),
	DSUSPENDPUBLICTO TIMESTAMP_NTZ(9),
	FYEARLYSALARY FLOAT,
	FLOADINGATDPAID FLOAT,
	CEMPCODE VARCHAR(8),
	BLONGSERVICEFIRSTENTPERIOD BOOLEAN,
	IPAYMENTTYPEID NUMBER(38,0),
	DSUSPENDSLFROM TIMESTAMP_NTZ(9),
	FDOUBLERATE FLOAT,
	IHIREDPERIODID NUMBER(38,0),
	IPOSTALCOUNTRYID NUMBER(38,0),
	DLONGSERVICELEAVETAKENDATE TIMESTAMP_NTZ(9),
	BISANNUALISEDSALARY BOOLEAN,
	DKIWISAVEROPTOUTREPORTEDDATE TIMESTAMP_NTZ(9),
	FSICKPROENTHOURS FLOAT,
	FHALFSICKACTUALENTHOURS FLOAT,
	ICOUNTRYID NUMBER(38,0),
	IHALFSICKNONENTMONTHS NUMBER(38,0),
	FANNUALPOSTENTHOURS FLOAT,
	ULEEMWPPYGRP VARCHAR(100),
	FPUBLICHOLIDAYPROHOURS FLOAT,
	BJOBKEEPER BOOLEAN,
	IDEFAULTEMAIL NUMBER(38,0),
	UCEEGD5 VARCHAR(30),
	BISCLOSELYHELDPAYEE BOOLEAN,
	IBASISOFPAYMENT NUMBER(38,0),
	BFAMILYTAXBENEFIT BOOLEAN,
	FEXTRALEAVEENT FLOAT,
	BSUSPENDNEXTAUTOPAY BOOLEAN,
	DTERMRETIREDATE TIMESTAMP_NTZ(9),
	DHALFSICKACTUALENTDATE TIMESTAMP_NTZ(9),
	BTFN BOOLEAN,
	DSICKACTUALENTDATE TIMESTAMP_NTZ(9),
	CADDRESS2 VARCHAR(40),
	DEXTRALEAVEENTDATE TIMESTAMP_NTZ(9),
	FLONGSERVICEPREENTHOURS FLOAT,
	FEXTRALEAVEPRO FLOAT,
	BSUSPENDANNUALENT BOOLEAN,
	IADVICEDELIVERYMETHOD NUMBER(38,0),
	IMEDICARESURCHARGEPERCENT NUMBER(38,0),
	IMARITALSTATUSID NUMBER(38,0),
	BHALFSICKGRANTSICK BOOLEAN,
	ISICKCOSTACCID NUMBER(38,0),
	UCEEBADGE VARCHAR(30),
	DSUSPENDSLTO TIMESTAMP_NTZ(9),
	BAUSRESIDENT BOOLEAN,
	UCEELEAVEGROUP VARCHAR(30),
	IEXTRALEAVEID NUMBER(38,0),
	BSTP2SEASONALWORKER BOOLEAN,
	BJOBMAKER BOOLEAN,
	ISICKNONENTMONTHS NUMBER(38,0),
	FHALFSICKTOTALENT FLOAT,
	IQUALIFYINGALLOWANCE NUMBER(38,0),
	DLONGSERVICEPOSTPRODATE TIMESTAMP_NTZ(9),
	IDEATHTYPEID NUMBER(38,0),
	BKIWISAVERNEWMEMBER BOOLEAN,
	ITIMEHALFRATEFACTOR NUMBER(38,0),
	ISTATEID NUMBER(38,0),
	UCEEPAYRULE VARCHAR(30),
	DANNUALPOSTENTDATE TIMESTAMP_NTZ(9),
	IPOSTALSTATEID NUMBER(38,0),
	ITIMESHEETOPTION NUMBER(38,0),
	ITITLEID NUMBER(38,0),
	DSICKPROENTDATE TIMESTAMP_NTZ(9),
	BGOTONEXTPAYCLASS BOOLEAN,
	UCEEPAYADVICEMESSAGE VARCHAR(250),
	IWORKPLANNERID NUMBER(38,0),
	BNZEXCLUDEFROMEMS BOOLEAN,
	UCEEGD6 VARCHAR(30),
	IHALFSICKLEAVECLASSID NUMBER(38,0),
	FREPORTFRINGEBENEFIT FLOAT,
	DDATEOFBIRTH TIMESTAMP_NTZ(9),
	BMEDICAREREDUCTION BOOLEAN,
	BSUPPRESSFROMSTP BOOLEAN,
	BNZSTUDENTLOANCIR BOOLEAN,
	IJOBCLASSIFICATIONID NUMBER(38,0),
	BESPWORKGROUP BOOLEAN,
	IANNUALLEAVELOADINGCLASSID NUMBER(38,0),
	IABORIGINALTORRESSTRAIT NUMBER(38,0),
	FOTHERINCOME FLOAT,
	CPOSTALADD1 VARCHAR(40),
	CKIWISAVEROPTOUTFLAG VARCHAR(1),
	IPAYERGROUPID NUMBER(38,0),
	IPAYCLASSID NUMBER(38,0),
	FANNUALPREENTHOURS FLOAT,
	IDEFAULTCOSTACCOUNT NUMBER(38,0),
	UCEESHIFTACT VARCHAR(3),
	BSUSPENDHALFSICKENT BOOLEAN,
	FNORMALRATE FLOAT,
	INZSTUDENTLOANBORTYPE NUMBER(38,0),
	DSTARTPAYSUMMARY TIMESTAMP_NTZ(9),
	FNZTAXRATE FLOAT,
	CKIWISAVERNEWEMPSTATUS VARCHAR(2),
	FLONGSERVICEPOSTENTHOURS FLOAT,
	BSUSPENDLSLENT BOOLEAN,
	ITAXSCALEID NUMBER(38,0),
	ITFNFORSUPER NUMBER(38,0),
	IEMPLOYMENTTYPEID NUMBER(38,0),
	IPRINTPAYSUMMARY NUMBER(38,0),
	UCEEMGRNUMBER VARCHAR(30),
	FCUMULATIVEHOURS FLOAT,
	FNONCASHBENEFIT FLOAT,
	CTAXSCALECODE VARCHAR(10),
	UCEEPOSSTART VARCHAR(30),
	BESPTIMESHEET BOOLEAN,
	UCEESUPERVISOR VARCHAR(30),
	IANNUALNONENTPERIOD NUMBER(38,0),
	DEXTRALEAVEPRODATE TIMESTAMP_NTZ(9),
	FEXTRALEAVETAKEN FLOAT,
	FTERMPOSTJUN94 FLOAT,
	CREFERENCENUMBER VARCHAR(255),
	FMINPAYLIMIT FLOAT,
	FLONGSERVICELEAVETAKENHOURS FLOAT,
	UCEEGD7 VARCHAR(30),
	IPAYROLLTAXID NUMBER(38,0),
	DSICKLEAVETAKENDATE TIMESTAMP_NTZ(9),
	ILONGSERVICELEAVECLASSID NUMBER(38,0),
	BWORKINGHOLIDAYMAKER BOOLEAN,
	DHALFSICKLEAVETAKENDATE TIMESTAMP_NTZ(9),
	FTERMPREJUL83 FLOAT,
	ISTP2COUNTRYID NUMBER(38,0),
	CTFN VARCHAR(10),
	DEXTRALEAVETAKENDATE TIMESTAMP_NTZ(9),
	FTERMPOSTJUN83 FLOAT,
	IGENDERID NUMBER(38,0),
	ISTP2INCOMETYPE NUMBER(38,0),
	IANNUALLEAVECLASSID NUMBER(38,0),
	IHECSSFSSDEBT NUMBER(38,0),
	FTOTALREBATES FLOAT,
	ILOCATIONID NUMBER(38,0),
	ICLIMATICID NUMBER(38,0),
	FLOADINGYTD FLOAT,
	FAUTOPAYAMOUNT FLOAT,
	CPOSTCODE VARCHAR(10),
	DDATEPAYSUMMARY TIMESTAMP_NTZ(9),
	CPOSTALADD2 VARCHAR(40),
	BSICKNONENTMET BOOLEAN,
	CKIWISAVERELIGIBILITY VARCHAR(2),
	IPUBLICHOLIDAYID NUMBER(38,0),
	FDATESERVICEHOURS FLOAT,
	BHALFSICKNONENTMET BOOLEAN,
	IPAYFREQUENCYID NUMBER(38,0),
	FAWARDHOURS FLOAT,
	CKIWISAVERLATEOPTOUTREASON VARCHAR(4),
	CTELEPHONE1 VARCHAR(20),
	IPAYMETHODID NUMBER(38,0),
	FNZSTUDENTLOANBORTAXRATE FLOAT,
	DSUSPENDLSLTO TIMESTAMP_NTZ(9),
	BNZSTUDENTLOAN BOOLEAN,
	DKIWISAVEROPTOUTDATE TIMESTAMP_NTZ(9),
	DANNUALLEAVETAKENDATE TIMESTAMP_NTZ(9),
	DKIWISAVERNEWMEMBERREPORTEDDATE TIMESTAMP_NTZ(9),
	FLOADINGATDPENALTIESPAID FLOAT,
	CPOSTALPOSTALCODE VARCHAR(10),
	UCEEGD2 VARCHAR(30),
	BNOTAXFREE BOOLEAN,
	FLOADINGATDPENALTIESUNPAID FLOAT,
	BCIRRATE BOOLEAN,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_HISTORY (
	IDCOSTACCOUNT NUMBER(38,0),
	CCOSTCODE VARCHAR(100),
	ILINK NUMBER(38,0),
	IPOSITION NUMBER(38,0),
	BACTIVE BOOLEAN,
	CCODE VARCHAR(50),
	CDESCRIPTION VARCHAR(30),
	MAX_IPOSITION NUMBER(38,0),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_STRUCTURE_HISTORY (
	IDCOSTACCSTRUCTURE NUMBER(38,0),
	CSEPARATOR VARCHAR(1),
	CDESCRIPTION VARCHAR(50),
	ILENGTH NUMBER(38,0),
	IPOSITION NUMBER(38,0),
	CCODE VARCHAR(10),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_ANNUAL_HISTORY (
	IDLEAVE NUMBER(38,0),
	BPUBLICHOLIDAY BOOLEAN,
	FENTITLEMENT FLOAT,
	IENTITLEMENTSEVERY NUMBER(38,0),
	IPRORATAPERIODUNITS NUMBER(38,0),
	IENTITLEMENTUNITS NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	FPRORATA FLOAT,
	CHOURTYPES VARCHAR(255),
	IPRORATAUNITS NUMBER(38,0),
	BCREDITATENDOFPERIOD BOOLEAN,
	IPRORATAEVERY NUMBER(38,0),
	CUDLEAVECLASS VARCHAR(255),
	BTERMADJUSTMENT BOOLEAN,
	CDESCRIPTION VARCHAR(50),
	BHOURLY BOOLEAN,
	CADDITIONS VARCHAR(256),
	IINCLUDELEAVELOADINGINTERM NUMBER(38,0),
	COTHERLEAVEREASONS VARCHAR(255),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	FACCRUALRATE FLOAT,
	INEXTLEAVE NUMBER(38,0),
	CCODE VARCHAR(10),
	DSTANDARDENTDATE TIMESTAMP_NTZ(9),
	BCOSTSPLIT BOOLEAN,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_HISTORY (
	IDEMPLOYEELEAVE NUMBER(38,0),
	FPOSTPROHOURS FLOAT,
	BNONENTMET BOOLEAN,
	ICOSTACCOUNTID NUMBER(38,0),
	COST_ACCOUNT_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	FCURRENTACCRUALHOURS FLOAT,
	DSUSPENDFROM TIMESTAMP_NTZ(9),
	DCURRENTACCRUALDATE TIMESTAMP_NTZ(9),
	DTAKENDATE TIMESTAMP_NTZ(9),
	FTAKENHOURS FLOAT,
	DPOSTENTDATE TIMESTAMP_NTZ(9),
	IEMPLOYEEID NUMBER(38,0),
	EMPLOYEE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	BFIRSTENTPERIOD BOOLEAN,
	FYEARTODATELOADING FLOAT,
	FLEAVESHIFTS FLOAT,
	FPREENTHOURS FLOAT,
	ILEAVELOADINGCLASSID NUMBER(38,0),
	LEAVE_LOADING_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	ICHANGEAGENTID NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	FPOSTENTHOURS FLOAT,
	DPOSTPRODATE TIMESTAMP_NTZ(9),
	DSUSPENDTO TIMESTAMP_NTZ(9),
	BSUSPENDENT BOOLEAN,
	FPRE78ENTHOURS FLOAT,
	BGRANT BOOLEAN,
	ILEAVECLASSID NUMBER(38,0),
	SICK_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	ANNUAL_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	LONG_SERVICE_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	USER_DEFINED_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	INONENTMONTHS NUMBER(38,0),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LOADING_HISTORY (
	IDLOADING NUMBER(38,0),
	FLOADINGPERCENT FLOAT,
	FMAXLOADING FLOAT,
	ILEAVELOADINGADDSID NUMBER(38,0),
	CCODE VARCHAR(10),
	CLOADINGNAME VARCHAR(50),
	IRATETYPEID NUMBER(38,0),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LONG_SERVICE_HISTORY (
	IDLEAVE NUMBER(38,0),
	IENTITLEMENTSEVERY NUMBER(38,0),
	FENTITLEMENT FLOAT,
	IENTITLEMENTUNITS NUMBER(38,0),
	IPRORATAEVERY NUMBER(38,0),
	CPORTLSLPAYCOMPONENTS VARCHAR(256),
	ITERMPAYOUT NUMBER(38,0),
	CHOURTYPES VARCHAR(255),
	ILEAVETYPE NUMBER(38,0),
	CUDLEAVECLASS VARCHAR(255),
	BPORTABLE BOOLEAN,
	CDESCRIPTION VARCHAR(50),
	CADDITIONS VARCHAR(256),
	COTHERLEAVEREASONS VARCHAR(255),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	FACCRUALRATE FLOAT,
	CPORTLSLUDLEAVECLASS VARCHAR(256),
	IPRORATAPERIODUNITS NUMBER(38,0),
	INEXTLEAVE NUMBER(38,0),
	CPORTLSLADDITIONS VARCHAR(256),
	CCODE VARCHAR(10),
	BHOURLY BOOLEAN,
	BCOSTSPLIT BOOLEAN,
	IREPEATPRORATA NUMBER(38,0),
	CPORTLSLOTHERLEAVEREASONS VARCHAR(256),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_SICK_HISTORY (
	IDLEAVE NUMBER(38,0),
	CADDITIONS VARCHAR(256),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	IMAXPERIODUNITS NUMBER(38,0),
	IACCRUALUNITS NUMBER(38,0),
	CCODE VARCHAR(10),
	IENTITLEMENTUNITS NUMBER(38,0),
	IACCRUALPERIODUNITS NUMBER(38,0),
	CDESCRIPTION VARCHAR(50),
	ICLASSIFICATIONTYPE NUMBER(38,0),
	IACCRUALEVERY NUMBER(38,0),
	IENTITLEMENTSEVERY NUMBER(38,0),
	BPAYOUTONTERMINATION BOOLEAN,
	BCOSTSPLIT BOOLEAN,
	INEXTLEAVE NUMBER(38,0),
	BHOURLY BOOLEAN,
	BAPPLYHALFACCRUAL BOOLEAN,
	CHOURTYPES VARCHAR(255),
	CUDLEAVECLASS VARCHAR(255),
	COTHERLEAVEREASONS VARCHAR(255),
	FACCRUAL FLOAT,
	FMAXACCRUAL FLOAT,
	IACCUMULATEENTITLEMENTS NUMBER(38,0),
	FACCRUALRATE FLOAT,
	FENTITLEMENT FLOAT,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_USER_DEFINED_HISTORY (
	IDLEAVE NUMBER(38,0),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	IENTITLEMENTUNITS NUMBER(38,0),
	IMAXPERIODUNITS NUMBER(38,0),
	INEXTLEAVE NUMBER(38,0),
	CCODE VARCHAR(10),
	FENTITLEMENT FLOAT,
	IPRORATAEVERY NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	IPRORATAPERIODUNITS NUMBER(38,0),
	ITERMINATIONPAYOUT NUMBER(38,0),
	FACCRUALRATE FLOAT,
	CADDITIONS VARCHAR(256),
	FPRORATA FLOAT,
	COTHERLEAVEREASONS VARCHAR(255),
	BCOSTSPLIT BOOLEAN,
	FMAXACCRUAL FLOAT,
	DSTANDARDENTDATE TIMESTAMP_NTZ(9),
	IACCUMULATEENTITLEMENTS NUMBER(38,0),
	IMETHOD NUMBER(38,0),
	CHOURTYPES VARCHAR(255),
	CUDLEAVECLASS VARCHAR(255),
	IENTITLEMENTSEVERY NUMBER(38,0),
	ITERMINATIONPAYMENTTYPE NUMBER(38,0),
	IPRORATAUNITS NUMBER(38,0),
	IINCLUDEONPAYADVICE NUMBER(38,0),
	CDESCRIPTION VARCHAR(50),
	CBALANCEDESCRIPTION VARCHAR(50),
	BPAYOUTONTERMINATION BOOLEAN,
	BCREDITATENDOFPERIOD BOOLEAN,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_CONTRACT_HOUR_HISTORY (
	IDCONTRACTHOURS NUMBER(38,0),
	CCODE VARCHAR(10),
	FDAYSPERWEEK FLOAT,
	FHOURSPERDAY FLOAT,
	CDESCRIPTION VARCHAR(50),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_HISTORY (
	IDEMPLOYEE NUMBER(38,0),
	UCEEARCHJC VARCHAR(30),
	IPAYMETHODID NUMBER(38,0),
	ILONGSERVICELEAVECLASSID NUMBER(38,0),
	BSUSPENDNEXTAUTOPAY BOOLEAN,
	DTFNDATESIGNED TIMESTAMP_NTZ(9),
	FAUTOPAYAMOUNT FLOAT,
	BISAWARDBASED BOOLEAN,
	IPAYROLLTAXID NUMBER(38,0),
	BESPWORKGROUP BOOLEAN,
	ITITLEID NUMBER(38,0),
	DANNUALPOSTPRODATE TIMESTAMP_NTZ(9),
	BHALFSICKGRANTSICK BOOLEAN,
	BAUSRESIDENT BOOLEAN,
	FHALFSICKTOTALENT FLOAT,
	DSICKPROENTDATE TIMESTAMP_NTZ(9),
	FLONGSERVICEPREENTHOURS FLOAT,
	DSUSPENDALFROM TIMESTAMP_NTZ(9),
	CKIWISAVERLATEOPTOUTOTHERREASON VARCHAR(500),
	IADVICEDELIVERYMETHOD NUMBER(38,0),
	DKIWISAVERNEWMEMBERREPORTEDDATE TIMESTAMP_NTZ(9),
	DSUSPENDLSLFROM TIMESTAMP_NTZ(9),
	DSICKACTUALENTDATE TIMESTAMP_NTZ(9),
	IPAYCLASSID NUMBER(38,0),
	ISTP2INCOMETYPE NUMBER(38,0),
	IANNUALLEAVELOADINGCLASSID NUMBER(38,0),
	FLONGSERVICELEAVETAKENHOURS FLOAT,
	BMEDICAREEXEMPTION BOOLEAN,
	CMIDDLENAME VARCHAR(15),
	CREFERENCENUMBER VARCHAR(255),
	IPRINTPAYSUMMARY NUMBER(38,0),
	CTFN VARCHAR(10),
	DHALFSICKPROENTDATE TIMESTAMP_NTZ(9),
	FANNUALPREENTHOURS FLOAT,
	DTERMRETIREDATE TIMESTAMP_NTZ(9),
	DEXTRALEAVETAKENDATE TIMESTAMP_NTZ(9),
	CSURNAME VARCHAR(40),
	IKIWISAVERSTATUS NUMBER(38,0),
	DSTARTPAYSUMMARY TIMESTAMP_NTZ(9),
	FEXTRALEAVEPRO FLOAT,
	IBASISOFPAYMENT NUMBER(38,0),
	CFIRSTNAME VARCHAR(30),
	BFAMILYTAXBENEFIT BOOLEAN,
	UCEEARCHCOSTACC VARCHAR(30),
	BHALFSICKNONENTMET BOOLEAN,
	FNORMALHOURS FLOAT,
	CADDRESS1 VARCHAR(40),
	FLOADINGATDUNPAID FLOAT,
	ITIMESHEETOPTION NUMBER(38,0),
	ITERMINATIONREASONID NUMBER(38,0),
	CPOSTALADD2 VARCHAR(40),
	ISICKCOSTACCID NUMBER(38,0),
	BNZSPECIFYSLRATE BOOLEAN,
	IWORKPLANNERID NUMBER(38,0),
	BNOTAXFREE BOOLEAN,
	DSUSPENDPUBLICFROM TIMESTAMP_NTZ(9),
	IEARNINGSTYPEID NUMBER(38,0),
	FTERMLUMPSUMD FLOAT,
	FSPECIFYTAXRATE FLOAT,
	CPREFERREDNAME VARCHAR(15),
	UCEEPAYADVICEMESSAGE VARCHAR(250),
	IPAYMENTTYPEID NUMBER(38,0),
	BNZSTUDENTLOANBOR BOOLEAN,
	IHALFSICKNONENTMONTHS NUMBER(38,0),
	IQUALIFYINGALLOWANCE NUMBER(38,0),
	FPUBLICHOLIDAYPROHOURS FLOAT,
	IHECSSFSSDEBT NUMBER(38,0),
	IANNUALLEAVECOSTACCID NUMBER(38,0),
	INZSTUDENTLOANBORTYPE NUMBER(38,0),
	FPUBLICHOLIDAYENTHOURS FLOAT,
	FYEARLYSALARY FLOAT,
	FLOADINGATDPAID FLOAT,
	FSICKTOTALENT FLOAT,
	DHALFSICKLEAVETAKENDATE TIMESTAMP_NTZ(9),
	FNZSTUDENTLOANTAXRATE FLOAT,
	FLOADINGATDPENALTIESPAID FLOAT,
	DANNUALLEAVETAKENDATE TIMESTAMP_NTZ(9),
	BOTHERREBATES BOOLEAN,
	CTELEPHONE2 VARCHAR(20),
	IANNUALNONENTPERIOD NUMBER(38,0),
	BSUSPENDLSLENT BOOLEAN,
	BJOBMAKER BOOLEAN,
	FEXTRALEAVETAKEN FLOAT,
	FCUMULATIVEHOURS FLOAT,
	FTERMPOSTJUN94 FLOAT,
	FTERMPOSTJUN83TAX FLOAT,
	FNONCASHBENEFIT FLOAT,
	IETPPAYSUMMARY NUMBER(38,0),
	DPUBLICHOLIDAYENTDATE TIMESTAMP_NTZ(9),
	FLOADINGATDPENALTIESUNPAID FLOAT,
	IDOUBLERATEFACTOR NUMBER(38,0),
	IDEATHTYPEID NUMBER(38,0),
	BSUSPENDHALFSICKENT BOOLEAN,
	DDATEPAYSUMMARY TIMESTAMP_NTZ(9),
	FOTHERINCOME FLOAT,
	BMEDICARESURCHARGE BOOLEAN,
	FDOUBLERATE FLOAT,
	DDATEOFBIRTH TIMESTAMP_NTZ(9),
	FLONGSERVICEPRE78ENTHOURS FLOAT,
	BKIWISAVERISNEWEMPLOYEE BOOLEAN,
	FNZSTUDENTLOANCIRTAXRATE FLOAT,
	ITAXSCALEID NUMBER(38,0),
	ISICKNONENTMONTHS NUMBER(38,0),
	DPUBLICHOLIDAYTAKENDATE TIMESTAMP_NTZ(9),
	CKIWISAVERELIGIBILITY VARCHAR(2),
	BTERMINATED BOOLEAN,
	UCEEGENDESC2 VARCHAR(30),
	DSICKLEAVETAKENDATE TIMESTAMP_NTZ(9),
	FDATESERVICEHOURS FLOAT,
	DANNUALISEDANNIVERSARYDATE TIMESTAMP_NTZ(9),
	FHALFSICKACTUALENTHOURS FLOAT,
	FAWARDRATE FLOAT,
	UCEELEGACY VARCHAR(30),
	FOTHERRATE FLOAT,
	BNZSTUDENTLOANCIR BOOLEAN,
	CEMPCODE VARCHAR(8),
	IHIREDPERIODID NUMBER(38,0),
	IMEDICARESURCHARGEPERCENT NUMBER(38,0),
	ITIMEHALFRATEFACTOR NUMBER(38,0),
	FMAXPAYLIMIT FLOAT,
	FHALFSICKTAKENHOURS FLOAT,
	BNZEXCLUDEFROMEMS BOOLEAN,
	CPOSTCODE VARCHAR(10),
	CPOSTALADD1 VARCHAR(40),
	IGENDERID NUMBER(38,0),
	CTAXSCALECODE VARCHAR(10),
	FNORMALRATE FLOAT,
	CABN VARCHAR(11),
	IDEFAULTCOSTACCOUNT NUMBER(38,0),
	DANNUALPOSTENTDATE TIMESTAMP_NTZ(9),
	DSUSPENDPUBLICTO TIMESTAMP_NTZ(9),
	BTFN BOOLEAN,
	ILOADINGCLASSID NUMBER(38,0),
	UCEERAR VARCHAR(30),
	BDAILYTAXING BOOLEAN,
	CKIWISAVERNEWEMPSTATUS VARCHAR(2),
	FSICKACTUALENTHOURS FLOAT,
	FNZTAXRATE FLOAT,
	BSTP2ISFEIEMPLOYEE BOOLEAN,
	DSUSPENDALTO TIMESTAMP_NTZ(9),
	ICOUNTRYID NUMBER(38,0),
	BCIRRATE BOOLEAN,
	DSUSPENDLSLTO TIMESTAMP_NTZ(9),
	ISTATEID NUMBER(38,0),
	ILOCATIONID NUMBER(38,0),
	FANNUALPOSTPROHOURS FLOAT,
	FTERMPOSTJUN83 FLOAT,
	BSUPPRESSFROMSTP BOOLEAN,
	DKIWISAVEROPTOUTREPORTEDDATE TIMESTAMP_NTZ(9),
	FTERMAVGNORMALGROSS FLOAT,
	FSICKPROENTHOURS FLOAT,
	ISTP2CESSATIONREASON NUMBER(38,0),
	FMINPAYLIMIT FLOAT,
	CKIWISAVERLATEOPTOUTREASON VARCHAR(4),
	IJOBCLASSIFICATIONID NUMBER(38,0),
	FANNUALPOSTENTHOURS FLOAT,
	BSTP2SEASONALWORKER BOOLEAN,
	FPUBLICHOLIDAYTAKENHOURS FLOAT,
	DEXTRALEAVEPRODATE TIMESTAMP_NTZ(9),
	BJOBKEEPER BOOLEAN,
	CTELEPHONE1 VARCHAR(20),
	DKIWISAVEROPTOUTDATE TIMESTAMP_NTZ(9),
	BISCLOSELYHELDPAYEE BOOLEAN,
	BGOTONEXTPAYCLASS BOOLEAN,
	IWORKMANSCOMPID NUMBER(38,0),
	IABORIGINALTORRESSTRAIT NUMBER(38,0),
	FTOTALREBATES FLOAT,
	DHALFSICKACTUALENTDATE TIMESTAMP_NTZ(9),
	BSICKNONENTMET BOOLEAN,
	BKIWISAVERNEWMEMBER BOOLEAN,
	UCEECONTRACTS VARCHAR(30),
	ICLIMATICID NUMBER(38,0),
	IPOSTALCOUNTRYID NUMBER(38,0),
	IDEFAULTEMAIL NUMBER(38,0),
	IPOSTALSTATEID NUMBER(38,0),
	BSICKGRANTSICK BOOLEAN,
	UCEEGENDESC1 VARCHAR(30),
	FSICKTAKENHOURS FLOAT,
	CSTP2TAXTREATMENT VARCHAR(6),
	FANNUALYEARTODATELOADING FLOAT,
	DNZPAYDAYEDLASTEXPORTDATE TIMESTAMP_NTZ(9),
	ISICKLEAVECLASSID NUMBER(38,0),
	IAUTOPAYTYPE NUMBER(38,0),
	BNZWITHHOLDINGTAX BOOLEAN,
	ULEETERMREASON VARCHAR(100),
	BWORKINGHOLIDAYMAKER BOOLEAN,
	INUMBERCHILDREN NUMBER(38,0),
	DEXTRALEAVEENTDATE TIMESTAMP_NTZ(9),
	IRATEINCREASECODE NUMBER(38,0),
	IEMPLOYMENTTYPEID NUMBER(38,0),
	DSUSPENDSLFROM TIMESTAMP_NTZ(9),
	ISTP2COUNTRYID NUMBER(38,0),
	FNZSTUDENTLOANBORTAXRATE FLOAT,
	BSUSPENDSICKENT BOOLEAN,
	FAWARDHOURS FLOAT,
	DVARIATIONDATE TIMESTAMP_NTZ(9),
	DSUSPENDHALFSLFROM TIMESTAMP_NTZ(9),
	FLONGSERVICEPOSTPROHOURS FLOAT,
	DSUSPENDSLTO TIMESTAMP_NTZ(9),
	BNZSTUDENTLOAN BOOLEAN,
	IPUBLICHOLIDAYID NUMBER(38,0),
	FEXTRALEAVEENT FLOAT,
	CADDRESS2 VARCHAR(40),
	IGENERATEAUTOPAY NUMBER(38,0),
	ICONTRACTHOURSID NUMBER(38,0),
	CONTRACT_HOUR_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	DSUSPENDHALFSLTO TIMESTAMP_NTZ(9),
	DLONGSERVICEPOSTPRODATE TIMESTAMP_NTZ(9),
	BESPTIMESHEET BOOLEAN,
	CPOSTALPOSTALCODE VARCHAR(10),
	BSUSPENDPUBLICENT BOOLEAN,
	BSUSPENDANNUALENT BOOLEAN,
	FLONGSERVICEPOSTENTHOURS FLOAT,
	FTIMEHALFRATE FLOAT,
	DPUBLICHOLIDAYPRODATE TIMESTAMP_NTZ(9),
	BMEDICAREREDUCTION BOOLEAN,
	ILONGSERVICECOSTACCID NUMBER(38,0),
	FEXEMPTFRINGEBENEFIT FLOAT,
	CIRDEMPLOYEENAME VARCHAR(255),
	FHALFSICKPROENTHOURS FLOAT,
	IANNUALLEAVECLASSID NUMBER(38,0),
	ISTP2ATODEFINED NUMBER(38,0),
	DHIREDDATE TIMESTAMP_NTZ(9),
	BPUBLICHOLIDAYCREDIT BOOLEAN,
	IHALFSICKLEAVECLASSID NUMBER(38,0),
	ICHANGEAGENTID NUMBER(38,0),
	BISANNUALISEDSALARY BOOLEAN,
	DLONGSERVICELEAVETAKENDATE TIMESTAMP_NTZ(9),
	IEXTRALEAVEID NUMBER(38,0),
	FLOADINGYTD FLOAT,
	FTERMPREJUL83 FLOAT,
	CKIWISAVEROPTOUTFLAG VARCHAR(1),
	IHALFSICKCOSTACCID NUMBER(38,0),
	BLONGSERVICEFIRSTENTPERIOD BOOLEAN,
	ITFNFORSUPER NUMBER(38,0),
	IPAYPOINTID NUMBER(38,0),
	IPAYERGROUPID NUMBER(38,0),
	FREPORTFRINGEBENEFIT FLOAT,
	DTERMINATIONDATE TIMESTAMP_NTZ(9),
	ITERMINATEDPERIODID NUMBER(38,0),
	IPAYFREQUENCYID NUMBER(38,0),
	FANNUALLEAVETAKENHOURS FLOAT,
	DRECOMMENCEDATE TIMESTAMP_NTZ(9),
	IMARITALSTATUSID NUMBER(38,0),
	IKIWISAVERENROLOPTID NUMBER(38,0),
	DLONGSERVICEPOSTENTDATE TIMESTAMP_NTZ(9),
	FEXTRALEAVESHIFTS FLOAT,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_HISTORY (
	IDCOSTACCOUNT NUMBER(38,0),
	CCOSTCODE VARCHAR(100),
	ILINK NUMBER(38,0),
	IPOSITION NUMBER(38,0),
	BACTIVE BOOLEAN,
	CCODE VARCHAR(50),
	CDESCRIPTION VARCHAR(30),
	MAX_IPOSITION NUMBER(38,0),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_STRUCTURE_HISTORY (
	IDCOSTACCSTRUCTURE NUMBER(38,0),
	CSEPARATOR VARCHAR(1),
	CDESCRIPTION VARCHAR(50),
	ILENGTH NUMBER(38,0),
	IPOSITION NUMBER(38,0),
	CCODE VARCHAR(10),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_ANNUAL_HISTORY (
	IDLEAVE NUMBER(38,0),
	BPUBLICHOLIDAY BOOLEAN,
	FENTITLEMENT FLOAT,
	IENTITLEMENTSEVERY NUMBER(38,0),
	IPRORATAPERIODUNITS NUMBER(38,0),
	IENTITLEMENTUNITS NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	FPRORATA FLOAT,
	CHOURTYPES VARCHAR(255),
	IPRORATAUNITS NUMBER(38,0),
	BCREDITATENDOFPERIOD BOOLEAN,
	IPRORATAEVERY NUMBER(38,0),
	CUDLEAVECLASS VARCHAR(255),
	BTERMADJUSTMENT BOOLEAN,
	CDESCRIPTION VARCHAR(50),
	BHOURLY BOOLEAN,
	CADDITIONS VARCHAR(256),
	IINCLUDELEAVELOADINGINTERM NUMBER(38,0),
	COTHERLEAVEREASONS VARCHAR(255),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	FACCRUALRATE FLOAT,
	INEXTLEAVE NUMBER(38,0),
	CCODE VARCHAR(10),
	DSTANDARDENTDATE TIMESTAMP_NTZ(9),
	BCOSTSPLIT BOOLEAN,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_HISTORY (
	IDEMPLOYEELEAVE NUMBER(38,0),
	FPOSTPROHOURS FLOAT,
	BNONENTMET BOOLEAN,
	ICOSTACCOUNTID NUMBER(38,0),
	COST_ACCOUNT_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	FCURRENTACCRUALHOURS FLOAT,
	DSUSPENDFROM TIMESTAMP_NTZ(9),
	DCURRENTACCRUALDATE TIMESTAMP_NTZ(9),
	DTAKENDATE TIMESTAMP_NTZ(9),
	FTAKENHOURS FLOAT,
	DPOSTENTDATE TIMESTAMP_NTZ(9),
	IEMPLOYEEID NUMBER(38,0),
	EMPLOYEE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	BFIRSTENTPERIOD BOOLEAN,
	FYEARTODATELOADING FLOAT,
	FLEAVESHIFTS FLOAT,
	FPREENTHOURS FLOAT,
	ILEAVELOADINGCLASSID NUMBER(38,0),
	LEAVE_LOADING_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	ICHANGEAGENTID NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	FPOSTENTHOURS FLOAT,
	DPOSTPRODATE TIMESTAMP_NTZ(9),
	DSUSPENDTO TIMESTAMP_NTZ(9),
	BSUSPENDENT BOOLEAN,
	FPRE78ENTHOURS FLOAT,
	BGRANT BOOLEAN,
	ILEAVECLASSID NUMBER(38,0),
	SICK_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	ANNUAL_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	LONG_SERVICE_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	USER_DEFINED_LEAVE_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	INONENTMONTHS NUMBER(38,0),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LOADING_HISTORY (
	IDLOADING NUMBER(38,0),
	FLOADINGPERCENT FLOAT,
	FMAXLOADING FLOAT,
	ILEAVELOADINGADDSID NUMBER(38,0),
	CCODE VARCHAR(10),
	CLOADINGNAME VARCHAR(50),
	IRATETYPEID NUMBER(38,0),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LONG_SERVICE_HISTORY (
	IDLEAVE NUMBER(38,0),
	IENTITLEMENTSEVERY NUMBER(38,0),
	FENTITLEMENT FLOAT,
	IENTITLEMENTUNITS NUMBER(38,0),
	IPRORATAEVERY NUMBER(38,0),
	CPORTLSLPAYCOMPONENTS VARCHAR(256),
	ITERMPAYOUT NUMBER(38,0),
	CHOURTYPES VARCHAR(255),
	ILEAVETYPE NUMBER(38,0),
	CUDLEAVECLASS VARCHAR(255),
	BPORTABLE BOOLEAN,
	CDESCRIPTION VARCHAR(50),
	CADDITIONS VARCHAR(256),
	COTHERLEAVEREASONS VARCHAR(255),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	FACCRUALRATE FLOAT,
	CPORTLSLUDLEAVECLASS VARCHAR(256),
	IPRORATAPERIODUNITS NUMBER(38,0),
	INEXTLEAVE NUMBER(38,0),
	CPORTLSLADDITIONS VARCHAR(256),
	CCODE VARCHAR(10),
	BHOURLY BOOLEAN,
	BCOSTSPLIT BOOLEAN,
	IREPEATPRORATA NUMBER(38,0),
	CPORTLSLOTHERLEAVEREASONS VARCHAR(256),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_SICK_HISTORY (
	IDLEAVE NUMBER(38,0),
	CADDITIONS VARCHAR(256),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	IMAXPERIODUNITS NUMBER(38,0),
	IACCRUALUNITS NUMBER(38,0),
	CCODE VARCHAR(10),
	IENTITLEMENTUNITS NUMBER(38,0),
	IACCRUALPERIODUNITS NUMBER(38,0),
	CDESCRIPTION VARCHAR(50),
	ICLASSIFICATIONTYPE NUMBER(38,0),
	IACCRUALEVERY NUMBER(38,0),
	IENTITLEMENTSEVERY NUMBER(38,0),
	BPAYOUTONTERMINATION BOOLEAN,
	BCOSTSPLIT BOOLEAN,
	INEXTLEAVE NUMBER(38,0),
	BHOURLY BOOLEAN,
	BAPPLYHALFACCRUAL BOOLEAN,
	CHOURTYPES VARCHAR(255),
	CUDLEAVECLASS VARCHAR(255),
	COTHERLEAVEREASONS VARCHAR(255),
	FACCRUAL FLOAT,
	FMAXACCRUAL FLOAT,
	IACCUMULATEENTITLEMENTS NUMBER(38,0),
	FACCRUALRATE FLOAT,
	FENTITLEMENT FLOAT,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_USER_DEFINED_HISTORY (
	IDLEAVE NUMBER(38,0),
	IENTITLEMENTPERIODUNITS NUMBER(38,0),
	IENTITLEMENTUNITS NUMBER(38,0),
	IMAXPERIODUNITS NUMBER(38,0),
	INEXTLEAVE NUMBER(38,0),
	CCODE VARCHAR(10),
	FENTITLEMENT FLOAT,
	IPRORATAEVERY NUMBER(38,0),
	ILEAVETYPE NUMBER(38,0),
	IPRORATAPERIODUNITS NUMBER(38,0),
	ITERMINATIONPAYOUT NUMBER(38,0),
	FACCRUALRATE FLOAT,
	CADDITIONS VARCHAR(256),
	FPRORATA FLOAT,
	COTHERLEAVEREASONS VARCHAR(255),
	BCOSTSPLIT BOOLEAN,
	FMAXACCRUAL FLOAT,
	DSTANDARDENTDATE TIMESTAMP_NTZ(9),
	IACCUMULATEENTITLEMENTS NUMBER(38,0),
	IMETHOD NUMBER(38,0),
	CHOURTYPES VARCHAR(255),
	CUDLEAVECLASS VARCHAR(255),
	IENTITLEMENTSEVERY NUMBER(38,0),
	ITERMINATIONPAYMENTTYPE NUMBER(38,0),
	IPRORATAUNITS NUMBER(38,0),
	IINCLUDEONPAYADVICE NUMBER(38,0),
	CDESCRIPTION VARCHAR(50),
	CBALANCEDESCRIPTION VARCHAR(50),
	BPAYOUTONTERMINATION BOOLEAN,
	BCREDITATENDOFPERIOD BOOLEAN,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_CONTRACT_HOUR_HISTORY (
	IDCONTRACTHOURS NUMBER(38,0),
	CCODE VARCHAR(10),
	FDAYSPERWEEK FLOAT,
	FHOURSPERDAY FLOAT,
	CDESCRIPTION VARCHAR(50),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_HISTORY (
	IDEMPLOYEE NUMBER(38,0),
	FOTHERINCOME FLOAT,
	DVARIATIONDATE TIMESTAMP_NTZ(9),
	DANNUALPOSTENTDATE TIMESTAMP_NTZ(9),
	UFEEANNRATE FLOAT,
	BHALFSICKGRANTSICK BOOLEAN,
	DANNUALISEDANNIVERSARYDATE TIMESTAMP_NTZ(9),
	ILONGSERVICELEAVECLASSID NUMBER(38,0),
	IPAYERGROUPID NUMBER(38,0),
	IPAYPOINTID NUMBER(38,0),
	DEXTRALEAVETAKENDATE TIMESTAMP_NTZ(9),
	IETPPAYSUMMARY NUMBER(38,0),
	FDATESERVICEHOURS FLOAT,
	CFIRSTNAME VARCHAR(30),
	FNORMALHOURS FLOAT,
	UCEEGENDESC2 VARCHAR(30),
	BSUSPENDLSLENT BOOLEAN,
	IHALFSICKLEAVECLASSID NUMBER(38,0),
	CADDRESS1 VARCHAR(40),
	DSUSPENDHALFSLFROM TIMESTAMP_NTZ(9),
	IEMPLOYMENTTYPEID NUMBER(38,0),
	IQUALIFYINGALLOWANCE NUMBER(38,0),
	FNZSTUDENTLOANCIRTAXRATE FLOAT,
	CSURNAME VARCHAR(40),
	ISTP2INCOMETYPE NUMBER(38,0),
	FPUBLICHOLIDAYTAKENHOURS FLOAT,
	BSUSPENDANNUALENT BOOLEAN,
	FTERMPREJUL83 FLOAT,
	FEXEMPTFRINGEBENEFIT FLOAT,
	CPOSTALADD1 VARCHAR(40),
	BKIWISAVERNEWMEMBER BOOLEAN,
	BSUSPENDSICKENT BOOLEAN,
	DSUSPENDHALFSLTO TIMESTAMP_NTZ(9),
	ISICKLEAVECLASSID NUMBER(38,0),
	CPREFERREDNAME VARCHAR(15),
	FANNUALYEARTODATELOADING FLOAT,
	DSUSPENDPUBLICFROM TIMESTAMP_NTZ(9),
	BMEDICAREEXEMPTION BOOLEAN,
	BKIWISAVERISNEWEMPLOYEE BOOLEAN,
	IBASISOFPAYMENT NUMBER(38,0),
	CTELEPHONE1 VARCHAR(20),
	FPUBLICHOLIDAYENTHOURS FLOAT,
	IAUTOPAYTYPE NUMBER(38,0),
	FTERMLUMPSUMD FLOAT,
	FNZSTUDENTLOANTAXRATE FLOAT,
	FMINPAYLIMIT FLOAT,
	FTERMPOSTJUN94 FLOAT,
	FAUTOPAYAMOUNT FLOAT,
	IPUBLICHOLIDAYID NUMBER(38,0),
	DSUSPENDLSLTO TIMESTAMP_NTZ(9),
	IHIREDPERIODID NUMBER(38,0),
	DKIWISAVEROPTOUTDATE TIMESTAMP_NTZ(9),
	FNZTAXRATE FLOAT,
	IPAYROLLTAXID NUMBER(38,0),
	IJOBCLASSIFICATIONID NUMBER(38,0),
	FHALFSICKTOTALENT FLOAT,
	BSUPPRESSFROMSTP BOOLEAN,
	DSICKPROENTDATE TIMESTAMP_NTZ(9),
	UCEEPAYADVICEMESSAGE VARCHAR(250),
	FNORMALRATE FLOAT,
	CABN VARCHAR(11),
	IGENERATEAUTOPAY NUMBER(38,0),
	FTOTALREBATES FLOAT,
	UCEECOMPANY VARCHAR(30),
	FSICKTOTALENT FLOAT,
	BPUBLICHOLIDAYCREDIT BOOLEAN,
	IPRINTPAYSUMMARY NUMBER(38,0),
	ISTP2ATODEFINED NUMBER(38,0),
	DHALFSICKACTUALENTDATE TIMESTAMP_NTZ(9),
	DSUSPENDSLFROM TIMESTAMP_NTZ(9),
	IANNUALNONENTPERIOD NUMBER(38,0),
	FOTHERRATE FLOAT,
	IANNUALLEAVECOSTACCID NUMBER(38,0),
	FAWARDRATE FLOAT,
	FSICKTAKENHOURS FLOAT,
	FTIMEHALFRATE FLOAT,
	DDATEPAYSUMMARY TIMESTAMP_NTZ(9),
	IANNUALLEAVELOADINGCLASSID NUMBER(38,0),
	DSUSPENDLSLFROM TIMESTAMP_NTZ(9),
	DSUSPENDALTO TIMESTAMP_NTZ(9),
	BNZSTUDENTLOAN BOOLEAN,
	IMEDICARESURCHARGEPERCENT NUMBER(38,0),
	CADDRESS2 VARCHAR(40),
	DNZPAYDAYEDLASTEXPORTDATE TIMESTAMP_NTZ(9),
	FLOADINGATDPENALTIESUNPAID FLOAT,
	DSUSPENDALFROM TIMESTAMP_NTZ(9),
	FANNUALLEAVETAKENHOURS FLOAT,
	UCEESITE VARCHAR(30),
	BDAILYTAXING BOOLEAN,
	DLONGSERVICEPOSTPRODATE TIMESTAMP_NTZ(9),
	CPOSTALADD2 VARCHAR(40),
	DHALFSICKPROENTDATE TIMESTAMP_NTZ(9),
	FREPORTFRINGEBENEFIT FLOAT,
	ICLIMATICID NUMBER(38,0),
	ULEETERMREASON VARCHAR(100),
	FSPECIFYTAXRATE FLOAT,
	UCEEPAYRULE VARCHAR(30),
	ISTP2COUNTRYID NUMBER(38,0),
	FAWARDHOURS FLOAT,
	DSUSPENDSLTO TIMESTAMP_NTZ(9),
	IPAYMETHODID NUMBER(38,0),
	IPOSTALCOUNTRYID NUMBER(38,0),
	DHALFSICKLEAVETAKENDATE TIMESTAMP_NTZ(9),
	BESPTIMESHEET BOOLEAN,
	IMARITALSTATUSID NUMBER(38,0),
	ISICKNONENTMONTHS NUMBER(38,0),
	IDEFAULTCOSTACCOUNT NUMBER(38,0),
	FANNUALPOSTPROHOURS FLOAT,
	CTELEPHONE2 VARCHAR(20),
	IHALFSICKCOSTACCID NUMBER(38,0),
	CSTP2TAXTREATMENT VARCHAR(6),
	IHECSSFSSDEBT NUMBER(38,0),
	IPOSTALSTATEID NUMBER(38,0),
	BNOTAXFREE BOOLEAN,
	DEXTRALEAVEENTDATE TIMESTAMP_NTZ(9),
	BSICKNONENTMET BOOLEAN,
	BNZSTUDENTLOANBOR BOOLEAN,
	FLONGSERVICELEAVETAKENHOURS FLOAT,
	FANNUALPREENTHOURS FLOAT,
	FTERMPOSTJUN83TAX FLOAT,
	DPUBLICHOLIDAYPRODATE TIMESTAMP_NTZ(9),
	BAUSRESIDENT BOOLEAN,
	FLOADINGYTD FLOAT,
	UCEELEGACY VARCHAR(30),
	ITAXSCALEID NUMBER(38,0),
	UCEESUPERVISOR VARCHAR(30),
	BSTP2SEASONALWORKER BOOLEAN,
	IRATEINCREASECODE NUMBER(38,0),
	BGOTONEXTPAYCLASS BOOLEAN,
	DKIWISAVEROPTOUTREPORTEDDATE TIMESTAMP_NTZ(9),
	FTERMPOSTJUN83 FLOAT,
	BISANNUALISEDSALARY BOOLEAN,
	DPUBLICHOLIDAYENTDATE TIMESTAMP_NTZ(9),
	BTFN BOOLEAN,
	FLOADINGATDUNPAID FLOAT,
	BLONGSERVICEFIRSTENTPERIOD BOOLEAN,
	ITFNFORSUPER NUMBER(38,0),
	FHALFSICKPROENTHOURS FLOAT,
	ICONTRACTHOURSID NUMBER(38,0),
	CONTRACT_HOUR_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	IPAYCLASSID NUMBER(38,0),
	FEXTRALEAVEPRO FLOAT,
	FCUMULATIVEHOURS FLOAT,
	CMIDDLENAME VARCHAR(15),
	FLOADINGATDPENALTIESPAID FLOAT,
	FLONGSERVICEPREENTHOURS FLOAT,
	FLONGSERVICEPOSTPROHOURS FLOAT,
	UCEEMGRNAME VARCHAR(30),
	FEXTRALEAVETAKEN FLOAT,
	UCEECOSTCENTRE VARCHAR(30),
	FMAXPAYLIMIT FLOAT,
	IKIWISAVERENROLOPTID NUMBER(38,0),
	DTERMRETIREDATE TIMESTAMP_NTZ(9),
	DTERMINATIONDATE TIMESTAMP_NTZ(9),
	UCEEMGRNUMBER VARCHAR(30),
	IEARNINGSTYPEID NUMBER(38,0),
	FANNUALPOSTENTHOURS FLOAT,
	ICHANGEAGENTID NUMBER(38,0),
	ISTATEID NUMBER(38,0),
	BJOBMAKER BOOLEAN,
	BOTHERREBATES BOOLEAN,
	FSICKACTUALENTHOURS FLOAT,
	DLONGSERVICELEAVETAKENDATE TIMESTAMP_NTZ(9),
	FDOUBLERATE FLOAT,
	DRECOMMENCEDATE TIMESTAMP_NTZ(9),
	BHALFSICKNONENTMET BOOLEAN,
	IWORKPLANNERID NUMBER(38,0),
	CKIWISAVERELIGIBILITY VARCHAR(2),
	DPUBLICHOLIDAYTAKENDATE TIMESTAMP_NTZ(9),
	BNZEXCLUDEFROMEMS BOOLEAN,
	CTAXSCALECODE VARCHAR(10),
	UCEEBADGE VARCHAR(30),
	BSUSPENDNEXTAUTOPAY BOOLEAN,
	ITERMINATIONREASONID NUMBER(38,0),
	IWORKMANSCOMPID NUMBER(38,0),
	IANNUALLEAVECLASSID NUMBER(38,0),
	IEXTRALEAVEID NUMBER(38,0),
	ILONGSERVICECOSTACCID NUMBER(38,0),
	FHALFSICKTAKENHOURS FLOAT,
	CEMPCODE VARCHAR(8),
	CIRDEMPLOYEENAME VARCHAR(255),
	CPOSTALPOSTALCODE VARCHAR(10),
	ILOADINGCLASSID NUMBER(38,0),
	DSTARTPAYSUMMARY TIMESTAMP_NTZ(9),
	FLONGSERVICEPRE78ENTHOURS FLOAT,
	DTFNDATESIGNED TIMESTAMP_NTZ(9),
	BISCLOSELYHELDPAYEE BOOLEAN,
	BISAWARDBASED BOOLEAN,
	IADVICEDELIVERYMETHOD NUMBER(38,0),
	INZSTUDENTLOANBORTYPE NUMBER(38,0),
	UCEEGENDESC1 VARCHAR(30),
	FLONGSERVICEPOSTENTHOURS FLOAT,
	BESPWORKGROUP BOOLEAN,
	UCEELEAVEGROUP VARCHAR(30),
	BFAMILYTAXBENEFIT BOOLEAN,
	BWORKINGHOLIDAYMAKER BOOLEAN,
	ILOCATIONID NUMBER(38,0),
	DKIWISAVERNEWMEMBERREPORTEDDATE TIMESTAMP_NTZ(9),
	CKIWISAVEROPTOUTFLAG VARCHAR(1),
	IKIWISAVERSTATUS NUMBER(38,0),
	IDOUBLERATEFACTOR NUMBER(38,0),
	FSICKPROENTHOURS FLOAT,
	BTERMINATED BOOLEAN,
	IDEFAULTEMAIL NUMBER(38,0),
	BMEDICAREREDUCTION BOOLEAN,
	CKIWISAVERLATEOPTOUTREASON VARCHAR(4),
	FYEARLYSALARY FLOAT,
	ITIMEHALFRATEFACTOR NUMBER(38,0),
	CKIWISAVERNEWEMPSTATUS VARCHAR(2),
	CKIWISAVERLATEOPTOUTOTHERREASON VARCHAR(500),
	DHIREDDATE TIMESTAMP_NTZ(9),
	ISICKCOSTACCID NUMBER(38,0),
	DSUSPENDPUBLICTO TIMESTAMP_NTZ(9),
	FLOADINGATDPAID FLOAT,
	FEXTRALEAVEENT FLOAT,
	UCEEPOSSTART VARCHAR(30),
	CTFN VARCHAR(10),
	IHALFSICKNONENTMONTHS NUMBER(38,0),
	INUMBERCHILDREN NUMBER(38,0),
	DANNUALLEAVETAKENDATE TIMESTAMP_NTZ(9),
	BCIRRATE BOOLEAN,
	BMEDICARESURCHARGE BOOLEAN,
	FEXTRALEAVESHIFTS FLOAT,
	IABORIGINALTORRESSTRAIT NUMBER(38,0),
	BJOBKEEPER BOOLEAN,
	ITERMINATEDPERIODID NUMBER(38,0),
	UCEEUCEECONTRACTS VARCHAR(30),
	DSICKACTUALENTDATE TIMESTAMP_NTZ(9),
	ITIMESHEETOPTION NUMBER(38,0),
	IDEATHTYPEID NUMBER(38,0),
	CPOSTCODE VARCHAR(10),
	FNONCASHBENEFIT FLOAT,
	UCEEDIVISION VARCHAR(30),
	CREFERENCENUMBER VARCHAR(255),
	IGENDERID NUMBER(38,0),
	BSUSPENDHALFSICKENT BOOLEAN,
	DLONGSERVICEPOSTENTDATE TIMESTAMP_NTZ(9),
	DDATEOFBIRTH TIMESTAMP_NTZ(9),
	DEXTRALEAVEPRODATE TIMESTAMP_NTZ(9),
	IPAYMENTTYPEID NUMBER(38,0),
	BNZWITHHOLDINGTAX BOOLEAN,
	FNZSTUDENTLOANBORTAXRATE FLOAT,
	UCEEEESHIFTACT VARCHAR(3),
	BSTP2ISFEIEMPLOYEE BOOLEAN,
	ICOUNTRYID NUMBER(38,0),
	DSICKLEAVETAKENDATE TIMESTAMP_NTZ(9),
	IPAYFREQUENCYID NUMBER(38,0),
	BNZSTUDENTLOANCIR BOOLEAN,
	BSICKGRANTSICK BOOLEAN,
	FTERMAVGNORMALGROSS FLOAT,
	DANNUALPOSTPRODATE TIMESTAMP_NTZ(9),
	BSUSPENDPUBLICENT BOOLEAN,
	ISTP2CESSATIONREASON NUMBER(38,0),
	ITITLEID NUMBER(38,0),
	UCEEPROCENT VARCHAR(10),
	BNZSPECIFYSLRATE BOOLEAN,
	FHALFSICKACTUALENTHOURS FLOAT,
	FPUBLICHOLIDAYPROHOURS FLOAT,
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace TABLE BEGA_HR_DATA_{{ env }}.RAW_HISTORY.POSITION_HISTORY (
	ID VARCHAR(256),
	SUPERVISORY_ORGANIZATION_ID VARCHAR(256),
	EFFECTIVE_DATE DATE,
	POSITION_CODE VARCHAR(256),
	JOB_POSTING_TITLE VARCHAR(256),
	ACADEMIC_TENURE_ELIGIBLE BOOLEAN,
	JOB_DESCRIPTION_SUMMARY VARCHAR(8192),
	JOB_DESCRIPTION VARCHAR(16384),
	AVAILABLE_FOR_HIRE BOOLEAN,
	AVAILABLE_FOR_RECRUITING BOOLEAN,
	HIRING_FREEZE BOOLEAN,
	WORK_SHIFT_REQUIRED BOOLEAN,
	AVAILABLE_FOR_OVERLAP BOOLEAN,
	EARLIEST_OVERLAP_DATE DATE,
	CRITICAL_JOB BOOLEAN,
	DIFFICULTY_TO_FILL_CODE VARCHAR(256),
	AVAILABILITY_DATE DATE,
	EARLIEST_HIRE_DATE DATE,
	WORKER_TYPE_CODE VARCHAR(256),
	POSITION_TIME_TYPE_CODE VARCHAR(256),
	PRIMARY_COMPENSATION_BASIS FLOAT,
	PRIMARY_COMPENSATION_BASIS_AMOUNT_CHANGE FLOAT,
	PRIMARY_COMPENSATION_BASIS_PERCENT_CHANGE FLOAT,
	COMPENSATION_PACKAGE_CODE VARCHAR(256),
	COMPENSATION_GRADE_CODE VARCHAR(256),
	COMPENSATION_GRADE_PROFILE_CODE VARCHAR(256),
	COMPENSATION_STEP_CODE VARCHAR(256),
	WORKER_FOR_FILLED_POSITION_ID VARCHAR(256),
	WORKER_POSITION_ID VARCHAR(256),
	CLOSED BOOLEAN,
	_FIVETRAN_SYNCED TIMESTAMP_TZ(9),
	_FIVETRAN_DELETED BOOLEAN,
	_FIVETRAN_START TIMESTAMP_TZ(9),
	_FIVETRAN_END TIMESTAMP_TZ(9)
);
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_COST_ACCOUNT_HISTORY table from the Micropay _IPTBLLEAVELOADING table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_HISTORY (
	IDCOSTACCOUNT,
	CCOSTCODE,
	ILINK,
	IPOSITION,
	BACTIVE,
	CCODE,
	CDESCRIPTION,
    MAX_IPOSITION,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_HISTORY as

with
    leave_hist as (
        select
            IDCOSTACCOUNT,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_HISTORY as h
        group by all
    ),

    structure as (
        select MAX(s.IPOSITION) as MAX_IPOSITION
        from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE as s
        )

select
	p.IDCOSTACCOUNT,
	p.CCOSTCODE,
	p.ILINK,
	p.IPOSITION,
	p.BACTIVE,
	p.CCODE,
	p.CDESCRIPTION,
    structure.MAX_IPOSITION,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTS as p

    -- joins to get the corresponding version of the related tables
    cross join structure
    
    left join leave_hist as h on
        p.IDCOSTACCOUNT = h.IDCOSTACCOUNT
        
where
    h.IDCOSTACCOUNT is null                            -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_STRUCTURE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_COST_ACCOUNT_STRUCTURE_HISTORY table from the Micropay _IPTBLCOSTACCOUNTSTRUCTURE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_STRUCTURE_HISTORY (
    IDCOSTACCSTRUCTURE,
    CSEPARATOR,
    CDESCRIPTION,
    ILENGTH,
    IPOSITION,
    CCODE,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_STRUCTURE_HISTORY as

with
    leave_hist as (
        select
            IDCOSTACCSTRUCTURE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_STRUCTURE_HISTORY as h
        group by all
    )

select
    p.IDCOSTACCSTRUCTURE,
    p.CSEPARATOR,
    p.CDESCRIPTION,
    p.ILENGTH,
    p.IPOSITION,
    p.CCODE,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE as p
    left join leave_hist as h on
        p.IDCOSTACCSTRUCTURE = h.IDCOSTACCSTRUCTURE
        
where
    h.IDCOSTACCSTRUCTURE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_ANNUAL_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_LEAVE_ANNUAL_HISTORY table from the Micropay _IPTBLANNUALLEAVE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_ANNUAL_HISTORY (
    IDLEAVE,
    BPUBLICHOLIDAY,
    FENTITLEMENT,
    IENTITLEMENTSEVERY,
    IPRORATAPERIODUNITS,
    IENTITLEMENTUNITS,
    ILEAVETYPE,
    FPRORATA,
    CHOURTYPES,
    IPRORATAUNITS,
    BCREDITATENDOFPERIOD,
    IPRORATAEVERY,
    CUDLEAVECLASS,
    BTERMADJUSTMENT,
    CDESCRIPTION,
    BHOURLY,
    CADDITIONS,
    IINCLUDELEAVELOADINGINTERM,
    COTHERLEAVEREASONS,
    IENTITLEMENTPERIODUNITS,
    FACCRUALRATE,
    INEXTLEAVE,
    CCODE,
    DSTANDARDENTDATE,
    BCOSTSPLIT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_ANNUAL_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_ANNUAL_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
    p.BPUBLICHOLIDAY,
    p.FENTITLEMENT,
    p.IENTITLEMENTSEVERY,
    p.IPRORATAPERIODUNITS,
    p.IENTITLEMENTUNITS,
    p.ILEAVETYPE,
    p.FPRORATA,
    p.CHOURTYPES,
    p.IPRORATAUNITS,
    p.BCREDITATENDOFPERIOD,
    p.IPRORATAEVERY,
    p.CUDLEAVECLASS,
    p.BTERMADJUSTMENT,
    p.CDESCRIPTION,
    p.BHOURLY,
    p.CADDITIONS,
    p.IINCLUDELEAVELOADINGINTERM,
    p.COTHERLEAVEREASONS,
    p.IENTITLEMENTPERIODUNITS,
    p.FACCRUALRATE,
    p.INEXTLEAVE,
    p.CCODE,
    p.DSTANDARDENTDATE,
    p.BCOSTSPLIT,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLANNUALLEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_LEAVE_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_HISTORY (
    IDEMPLOYEELEAVE,
    FPOSTPROHOURS,
    BNONENTMET,
    ICOSTACCOUNTID,
    COST_ACCOUNT_FIVETRAN_SYNCED,
    FCURRENTACCRUALHOURS,
    DSUSPENDFROM,
    DCURRENTACCRUALDATE,
    DTAKENDATE,
    FTAKENHOURS,
    DPOSTENTDATE,
    IEMPLOYEEID,
    EMPLOYEE_FIVETRAN_SYNCED,
    BFIRSTENTPERIOD,
    FYEARTODATELOADING,
    FLEAVESHIFTS,
    FPREENTHOURS,
    ILEAVELOADINGCLASSID,
    LEAVE_LOADING_FIVETRAN_SYNCED,
    ICHANGEAGENTID,
    ILEAVETYPE,
    FPOSTENTHOURS,
    DPOSTPRODATE,
    DSUSPENDTO,
    BSUSPENDENT,
    FPRE78ENTHOURS,
    BGRANT,
    ILEAVECLASSID,
    SICK_LEAVE_FIVETRAN_SYNCED,
    ANNUAL_LEAVE_FIVETRAN_SYNCED,
    LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
    USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
    INONENTMONTHS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_HISTORY as

with
    leave_hist as (
        select
            IDEMPLOYEELEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_HISTORY as h
        group by all
    )

select
    p.IDEMPLOYEELEAVE,
    p.FPOSTPROHOURS,
    p.BNONENTMET,
    p.ICOSTACCOUNTID,
    ca._FIVETRAN_SYNCED as COST_ACCOUNT_FIVETRAN_SYNCED,
    p.FCURRENTACCRUALHOURS,
    p.DSUSPENDFROM,
    p.DCURRENTACCRUALDATE,
    p.DTAKENDATE,
    p.FTAKENHOURS,
    p.DPOSTENTDATE,
    p.IEMPLOYEEID,
    e._FIVETRAN_SYNCED as EMPLOYEE_FIVETRAN_SYNCED,
    p.BFIRSTENTPERIOD,
    p.FYEARTODATELOADING,
    p.FLEAVESHIFTS,
    p.FPREENTHOURS,
    p.ILEAVELOADINGCLASSID,
    ll._FIVETRAN_SYNCED as LEAVE_LOADING_FIVETRAN_SYNCED,
    p.ICHANGEAGENTID,
    p.ILEAVETYPE,
    p.FPOSTENTHOURS,
    p.DPOSTPRODATE,
    p.DSUSPENDTO,
    p.BSUSPENDENT,
    p.FPRE78ENTHOURS,
    p.BGRANT,
    p.ILEAVECLASSID,
    sl._FIVETRAN_SYNCED as SICK_LEAVE_FIVETRAN_SYNCED,
    al._FIVETRAN_SYNCED as ANNUAL_LEAVE_FIVETRAN_SYNCED,
    lsl._FIVETRAN_SYNCED as LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
    udl._FIVETRAN_SYNCED as USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
    p.INONENTMONTHS,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END
    
from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYEELEAVE as p

    -- joins to get the corresponding version of the related tables
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYEE as e on
        p.IEMPLOYEEID = e.IDEMPLOYEE

    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLSICKLEAVE as sl on 
        sl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 0
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLANNUALLEAVE as al on 
        al.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 1
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLLONGSERVICELEAVE as lsl on 
        lsl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 2
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLUSERDEFINEDLEAVE as udl on 
        udl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 6
    
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLLEAVELOADING as ll on 
        ll.IDLOADING = p.ILEAVELOADINGCLASSID
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTS as ca on 
        ca.IDCOSTACCOUNT = p.ICOSTACCOUNTID

    -- latest history already stored
    left join leave_hist as h on
        p.IDEMPLOYEELEAVE = h.IDEMPLOYEELEAVE
        
where
    h.IDEMPLOYEELEAVE is null                           -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LOADING_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_LEAVE_LOADING_HISTORY table from the Micropay _IPTBLLEAVELOADING table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LOADING_HISTORY (
	IDLOADING,
	FLOADINGPERCENT,
	FMAXLOADING,
	ILEAVELOADINGADDSID,
	CCODE,
	CLOADINGNAME,
	IRATETYPEID,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LOADING_HISTORY as

with
    leave_hist as (
        select
            IDLOADING,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LOADING_HISTORY as h
        group by all
    )

select
	p.IDLOADING,
	p.FLOADINGPERCENT,
	p.FMAXLOADING,
	p.ILEAVELOADINGADDSID,
	p.CCODE,
	p.CLOADINGNAME,
	p.IRATETYPEID,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLLEAVELOADING as p
    left join leave_hist as h on
        p.IDLOADING = h.IDLOADING
        
where
    h.IDLOADING is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LONG_SERVICE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_LEAVE_LONG_SERVICE_HISTORY table from the Micropay _IPTBLLONGSERVICELEAVE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LONG_SERVICE_HISTORY (
    IDLEAVE,
    IENTITLEMENTSEVERY,
    FENTITLEMENT,
    IENTITLEMENTUNITS,
    IPRORATAEVERY,
    CPORTLSLPAYCOMPONENTS,
    ITERMPAYOUT,
    CHOURTYPES,
    ILEAVETYPE,
    CUDLEAVECLASS,
    BPORTABLE,
    CDESCRIPTION,
    CADDITIONS,
    COTHERLEAVEREASONS,
    IENTITLEMENTPERIODUNITS,
    FACCRUALRATE,
    CPORTLSLUDLEAVECLASS,
    IPRORATAPERIODUNITS,
    INEXTLEAVE,
    CPORTLSLADDITIONS,
    CCODE,
    BHOURLY,
    BCOSTSPLIT,
    IREPEATPRORATA,
    CPORTLSLOTHERLEAVEREASONS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LONG_SERVICE_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LONG_SERVICE_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
	p.IENTITLEMENTSEVERY,
	p.FENTITLEMENT,
	p.IENTITLEMENTUNITS,
	p.IPRORATAEVERY,
	p.CPORTLSLPAYCOMPONENTS,
	p.ITERMPAYOUT,
	p.CHOURTYPES,
	p.ILEAVETYPE,
	p.CUDLEAVECLASS,
	p.BPORTABLE,
	p.CDESCRIPTION,
	p.CADDITIONS,
	p.COTHERLEAVEREASONS,
	p.IENTITLEMENTPERIODUNITS,
	p.FACCRUALRATE,
	p.CPORTLSLUDLEAVECLASS,
	p.IPRORATAPERIODUNITS,
	p.INEXTLEAVE,
	p.CPORTLSLADDITIONS,
	p.CCODE,
	p.BHOURLY,
	p.BCOSTSPLIT,
	p.IREPEATPRORATA,
	p.CPORTLSLOTHERLEAVEREASONS,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLLONGSERVICELEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_SICK_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_LEAVE_SICK_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_SICK_HISTORY (
    IDLEAVE,
    CADDITIONS,
    IENTITLEMENTPERIODUNITS,
    ILEAVETYPE,
    IMAXPERIODUNITS,
    IACCRUALUNITS,
    CCODE,
    IENTITLEMENTUNITS,
    IACCRUALPERIODUNITS,
    CDESCRIPTION,
    ICLASSIFICATIONTYPE,
    IACCRUALEVERY,
    IENTITLEMENTSEVERY,
    BPAYOUTONTERMINATION,
    BCOSTSPLIT,
    INEXTLEAVE,
    BHOURLY,
    BAPPLYHALFACCRUAL,
    CHOURTYPES,
    CUDLEAVECLASS,
    COTHERLEAVEREASONS,
    FACCRUAL,
    FMAXACCRUAL,
    IACCUMULATEENTITLEMENTS,
    FACCRUALRATE,
    FENTITLEMENT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_SICK_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_SICK_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
	p.CADDITIONS,
	p.IENTITLEMENTPERIODUNITS,
	p.ILEAVETYPE,
	p.IMAXPERIODUNITS,
	p.IACCRUALUNITS,
	p.CCODE,
	p.IENTITLEMENTUNITS,
	p.IACCRUALPERIODUNITS,
	p.CDESCRIPTION,
	p.ICLASSIFICATIONTYPE,
	p.IACCRUALEVERY,
	p.IENTITLEMENTSEVERY,
	p.BPAYOUTONTERMINATION,
	p.BCOSTSPLIT,
	p.INEXTLEAVE,
	p.BHOURLY,
	p.BAPPLYHALFACCRUAL,
	p.CHOURTYPES,
	p.CUDLEAVECLASS,
	p.COTHERLEAVEREASONS,
	p.FACCRUAL,
	p.FMAXACCRUAL,
	p.IACCUMULATEENTITLEMENTS,
	p.FACCRUALRATE,
	p.FENTITLEMENT,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLSICKLEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_USER_DEFINED_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_LEAVE_USER_DEFINED_HISTORY table from the Micropay _IPTBLUSERDEFINEDLEAVE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_USER_DEFINED_HISTORY (
    IDLEAVE,
    IENTITLEMENTPERIODUNITS,
    IENTITLEMENTUNITS,
    IMAXPERIODUNITS,
    INEXTLEAVE,
    CCODE,
    FENTITLEMENT,
    IPRORATAEVERY,
    ILEAVETYPE,
    IPRORATAPERIODUNITS,
    ITERMINATIONPAYOUT,
    FACCRUALRATE,
    CADDITIONS,
    FPRORATA,
    COTHERLEAVEREASONS,
    BCOSTSPLIT,
    FMAXACCRUAL,
    DSTANDARDENTDATE,
    IACCUMULATEENTITLEMENTS,
    IMETHOD,
    CHOURTYPES,
    CUDLEAVECLASS,
    IENTITLEMENTSEVERY,
    ITERMINATIONPAYMENTTYPE,
    IPRORATAUNITS,
    IINCLUDEONPAYADVICE,
    CDESCRIPTION,
    CBALANCEDESCRIPTION,
    BPAYOUTONTERMINATION,
    BCREDITATENDOFPERIOD,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_USER_DEFINED_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_USER_DEFINED_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
	p.IENTITLEMENTPERIODUNITS,
	p.IENTITLEMENTUNITS,
	p.IMAXPERIODUNITS,
	p.INEXTLEAVE,
	p.CCODE,
	p.FENTITLEMENT,
	p.IPRORATAEVERY,
	p.ILEAVETYPE,
	p.IPRORATAPERIODUNITS,
	p.ITERMINATIONPAYOUT,
	p.FACCRUALRATE,
	p.CADDITIONS,
	p.FPRORATA,
	p.COTHERLEAVEREASONS,
	p.BCOSTSPLIT,
	p.FMAXACCRUAL,
	p.DSTANDARDENTDATE,
	p.IACCUMULATEENTITLEMENTS,
	p.IMETHOD,
	p.CHOURTYPES,
	p.CUDLEAVECLASS,
	p.IENTITLEMENTSEVERY,
	p.ITERMINATIONPAYMENTTYPE,
	p.IPRORATAUNITS,
	p.IINCLUDEONPAYADVICE,
	p.CDESCRIPTION,
	p.CBALANCEDESCRIPTION,
	p.BPAYOUTONTERMINATION,
	p.BCREDITATENDOFPERIOD,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLUSERDEFINEDLEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_CONTRACT_HOUR_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_WORKER_CONTRACT_HOUR_HISTORY table from the Workday _IPTBLCONTRACTHOURS table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_CONTRACT_HOUR_HISTORY (
    IDCONTRACTHOURS,
    CCODE,
    FDAYSPERWEEK,
    FHOURSPERDAY,
    CDESCRIPTION,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_CONTRACT_HOUR_HISTORY as

with
    leave_hist as (
        select
            IDCONTRACTHOURS,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_CONTRACT_HOUR_HISTORY as h
        group by all
    )

select
    p.IDCONTRACTHOURS,
    p.CCODE,
    p.FDAYSPERWEEK,
    p.FHOURSPERDAY,
    p.CDESCRIPTION,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END      -- TODO-LATER: change this calculation fo a function

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCONTRACTHOURS as p
    left join leave_hist as h on
        p.IDCONTRACTHOURS = h.IDCONTRACTHOURS
        
where
    h.IDCONTRACTHOURS is null                                -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_WORKER_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_HISTORY (
    IDEMPLOYEE,
    UCEECOSTCENTRE,
    BTERMINATED,
    IKIWISAVERENROLOPTID,
    IGENERATEAUTOPAY,
    ILOADINGCLASSID,
    IRATEINCREASECODE,
    FPUBLICHOLIDAYTAKENHOURS,
    BSUSPENDPUBLICENT,
    DSUSPENDALFROM,
    BSTP2ISFEIEMPLOYEE,
    CMIDDLENAME,
    UCEEGD,
    IANNUALLEAVECOSTACCID,
    FTIMEHALFRATE,
    DHALFSICKPROENTDATE,
    FEXEMPTFRINGEBENEFIT,
    IKIWISAVERSTATUS,
    IAUTOPAYTYPE,
    ICONTRACTHOURSID,
    CONTRACT_HOUR_FIVETRAN_SYNCED,
    FANNUALPOSTPROHOURS,
    CFIRSTNAME,
    ILONGSERVICECOSTACCID,
    DSUSPENDALTO,
    DNZPAYDAYEDLASTEXPORTDATE,
    DANNUALISEDANNIVERSARYDATE,
    DSUSPENDPUBLICFROM,
    DPUBLICHOLIDAYENTDATE,
    ISICKLEAVECLASSID,
    BSUSPENDSICKENT,
    FOTHERRATE,
    DHIREDDATE,
    ISTP2CESSATIONREASON,
    DSUSPENDHALFSLTO,
    FHALFSICKPROENTHOURS,
    BNZWITHHOLDINGTAX,
    CTELEPHONE2,
    UCEEPROCENT,
    FANNUALLEAVETAKENHOURS,
    CIRDEMPLOYEENAME,
    DVARIATIONDATE,
    ITERMINATIONREASONID,
    BOTHERREBATES,
    ISTP2ATODEFINED,
    DTFNDATESIGNED,
    DSUSPENDLSLFROM,
    CABN,
    FEXTRALEAVESHIFTS,
    UCEEGD3,
    ULEEMWPWKAREA,
    UCEEMGRNAME,
    ITERMINATEDPERIODID,
    FMAXPAYLIMIT,
    BNZSPECIFYSLRATE,
    FHALFSICKTAKENHOURS,
    IHALFSICKCOSTACCID,
    FANNUALYEARTODATELOADING,
    ICHANGEAGENTID,
    IEARNINGSTYPEID,
    FPUBLICHOLIDAYENTHOURS,
    BMEDICARESURCHARGE,
    CKIWISAVERLATEOPTOUTOTHERREASON,
    CSURNAME,
    DANNUALPOSTPRODATE,
    DSUSPENDHALFSLFROM,
    FSPECIFYTAXRATE,
    BKIWISAVERISNEWEMPLOYEE,
    UCEESITE,
    BPUBLICHOLIDAYCREDIT,
    FLONGSERVICEPRE78ENTHOURS,
    FTERMLUMPSUMD,
    FNZSTUDENTLOANTAXRATE,
    IPAYPOINTID,
    FSICKTAKENHOURS,
    INUMBERCHILDREN,
    DPUBLICHOLIDAYTAKENDATE,
    CPREFERREDNAME,
    BDAILYTAXING,
    CSTP2TAXTREATMENT,
    DRECOMMENCEDATE,
    DLONGSERVICEPOSTENTDATE,
    DTERMINATIONDATE,
    BMEDICAREEXEMPTION,
    FSICKTOTALENT,
    FNZSTUDENTLOANCIRTAXRATE,
    IETPPAYSUMMARY,
    FSICKACTUALENTHOURS,
    BISAWARDBASED,
    FLOADINGATDUNPAID,
    UCEEGD4,
    UCEEDIVISION,
    FAWARDRATE,
    BNZSTUDENTLOANBOR,
    CADDRESS1,
    BSICKGRANTSICK,
    ULEEMWPLOC,
    FTERMPOSTJUN83TAX,
    FTERMAVGNORMALGROSS,
    FLONGSERVICEPOSTPROHOURS,
    IDOUBLERATEFACTOR,
    UCEECOMPANY,
    IWORKMANSCOMPID,
    FNORMALHOURS,
    DPUBLICHOLIDAYPRODATE,
    DSUSPENDPUBLICTO,
    FYEARLYSALARY,
    FLOADINGATDPAID,
    CEMPCODE,
    BLONGSERVICEFIRSTENTPERIOD,
    IPAYMENTTYPEID,
    DSUSPENDSLFROM,
    FDOUBLERATE,
    IHIREDPERIODID,
    IPOSTALCOUNTRYID,
    DLONGSERVICELEAVETAKENDATE,
    BISANNUALISEDSALARY,
    DKIWISAVEROPTOUTREPORTEDDATE,
    FSICKPROENTHOURS,
    FHALFSICKACTUALENTHOURS,
    ICOUNTRYID,
    IHALFSICKNONENTMONTHS,
    FANNUALPOSTENTHOURS,
    ULEEMWPPYGRP,
    FPUBLICHOLIDAYPROHOURS,
    BJOBKEEPER,
    IDEFAULTEMAIL,
    UCEEGD5,
    BISCLOSELYHELDPAYEE,
    IBASISOFPAYMENT,
    BFAMILYTAXBENEFIT,
    FEXTRALEAVEENT,
    BSUSPENDNEXTAUTOPAY,
    DTERMRETIREDATE,
    DHALFSICKACTUALENTDATE,
    BTFN,
    DSICKACTUALENTDATE,
    CADDRESS2,
    DEXTRALEAVEENTDATE,
    FLONGSERVICEPREENTHOURS,
    FEXTRALEAVEPRO,
    BSUSPENDANNUALENT,
    IADVICEDELIVERYMETHOD,
    IMEDICARESURCHARGEPERCENT,
    IMARITALSTATUSID,
    BHALFSICKGRANTSICK,
    ISICKCOSTACCID,
    UCEEBADGE,
    DSUSPENDSLTO,
    BAUSRESIDENT,
    UCEELEAVEGROUP,
    IEXTRALEAVEID,
    BSTP2SEASONALWORKER,
    BJOBMAKER,
    ISICKNONENTMONTHS,
    FHALFSICKTOTALENT,
    IQUALIFYINGALLOWANCE,
    DLONGSERVICEPOSTPRODATE,
    IDEATHTYPEID,
    BKIWISAVERNEWMEMBER,
    ITIMEHALFRATEFACTOR,
    ISTATEID,
    UCEEPAYRULE,
    DANNUALPOSTENTDATE,
    IPOSTALSTATEID,
    ITIMESHEETOPTION,
    ITITLEID,
    DSICKPROENTDATE,
    BGOTONEXTPAYCLASS,
    UCEEPAYADVICEMESSAGE,
    IWORKPLANNERID,
    BNZEXCLUDEFROMEMS,
    UCEEGD6,
    IHALFSICKLEAVECLASSID,
    FREPORTFRINGEBENEFIT,
    DDATEOFBIRTH,
    BMEDICAREREDUCTION,
    BSUPPRESSFROMSTP,
    BNZSTUDENTLOANCIR,
    IJOBCLASSIFICATIONID,
    BESPWORKGROUP,
    IANNUALLEAVELOADINGCLASSID,
    IABORIGINALTORRESSTRAIT,
    FOTHERINCOME,
    CPOSTALADD1,
    CKIWISAVEROPTOUTFLAG,
    IPAYERGROUPID,
    IPAYCLASSID,
    FANNUALPREENTHOURS,
    IDEFAULTCOSTACCOUNT,
    UCEESHIFTACT,
    BSUSPENDHALFSICKENT,
    FNORMALRATE,
    INZSTUDENTLOANBORTYPE,
    DSTARTPAYSUMMARY,
    FNZTAXRATE,
    CKIWISAVERNEWEMPSTATUS,
    FLONGSERVICEPOSTENTHOURS,
    BSUSPENDLSLENT,
    ITAXSCALEID,
    ITFNFORSUPER,
    IEMPLOYMENTTYPEID,
    IPRINTPAYSUMMARY,
    UCEEMGRNUMBER,
    FCUMULATIVEHOURS,
    FNONCASHBENEFIT,
    CTAXSCALECODE,
    UCEEPOSSTART,
    BESPTIMESHEET,
    UCEESUPERVISOR,
    IANNUALNONENTPERIOD,
    DEXTRALEAVEPRODATE,
    FEXTRALEAVETAKEN,
    FTERMPOSTJUN94,
    CREFERENCENUMBER,
    FMINPAYLIMIT,
    FLONGSERVICELEAVETAKENHOURS,
    UCEEGD7,
    IPAYROLLTAXID,
    DSICKLEAVETAKENDATE,
    ILONGSERVICELEAVECLASSID,
    BWORKINGHOLIDAYMAKER,
    DHALFSICKLEAVETAKENDATE,
    FTERMPREJUL83,
    ISTP2COUNTRYID,
    CTFN,
    DEXTRALEAVETAKENDATE,
    FTERMPOSTJUN83,
    IGENDERID,
    ISTP2INCOMETYPE,
    IANNUALLEAVECLASSID,
    IHECSSFSSDEBT,
    FTOTALREBATES,
    ILOCATIONID,
    ICLIMATICID,
    FLOADINGYTD,
    FAUTOPAYAMOUNT,
    CPOSTCODE,
    DDATEPAYSUMMARY,
    CPOSTALADD2,
    BSICKNONENTMET,
    CKIWISAVERELIGIBILITY,
    IPUBLICHOLIDAYID,
    FDATESERVICEHOURS,
    BHALFSICKNONENTMET,
    IPAYFREQUENCYID,
    FAWARDHOURS,
    CKIWISAVERLATEOPTOUTREASON,
    CTELEPHONE1,
    IPAYMETHODID,
    FNZSTUDENTLOANBORTAXRATE,
    DSUSPENDLSLTO,
    BNZSTUDENTLOAN,
    DKIWISAVEROPTOUTDATE,
    DANNUALLEAVETAKENDATE,
    DKIWISAVERNEWMEMBERREPORTEDDATE,
    FLOADINGATDPENALTIESPAID,
    CPOSTALPOSTALCODE,
    UCEEGD2,
    BNOTAXFREE,
    FLOADINGATDPENALTIESUNPAID,
    BCIRRATE,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_HISTORY as

with
    leave_hist as (
        select
            IDEMPLOYEE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_HISTORY as h
        group by all
    )

select
    p.IDEMPLOYEE,
    p.UCEECOSTCENTRE,
    p.BTERMINATED,
    p.IKIWISAVERENROLOPTID,
    p.IGENERATEAUTOPAY,
    p.ILOADINGCLASSID,
    p.IRATEINCREASECODE,
    p.FPUBLICHOLIDAYTAKENHOURS,
    p.BSUSPENDPUBLICENT,
    p.DSUSPENDALFROM,
    p.BSTP2ISFEIEMPLOYEE,
    p.CMIDDLENAME,
    p.UCEEGD,
    p.IANNUALLEAVECOSTACCID,
    p.FTIMEHALFRATE,
    p.DHALFSICKPROENTDATE,
    p.FEXEMPTFRINGEBENEFIT,
    p.IKIWISAVERSTATUS,
    p.IAUTOPAYTYPE,
    p.ICONTRACTHOURSID,
    ch._FIVETRAN_SYNCED as CONTRACT_HOUR_FIVETRAN_SYNCED,
    p.FANNUALPOSTPROHOURS,
    p.CFIRSTNAME,
    p.ILONGSERVICECOSTACCID,
    p.DSUSPENDALTO,
    p.DNZPAYDAYEDLASTEXPORTDATE,
    p.DANNUALISEDANNIVERSARYDATE,
    p.DSUSPENDPUBLICFROM,
    p.DPUBLICHOLIDAYENTDATE,
    p.ISICKLEAVECLASSID,
    p.BSUSPENDSICKENT,
    p.FOTHERRATE,
    p.DHIREDDATE,
    p.ISTP2CESSATIONREASON,
    p.DSUSPENDHALFSLTO,
    p.FHALFSICKPROENTHOURS,
    p.BNZWITHHOLDINGTAX,
    p.CTELEPHONE2,
    p.UCEEPROCENT,
    p.FANNUALLEAVETAKENHOURS,
    p.CIRDEMPLOYEENAME,
    p.DVARIATIONDATE,
    p.ITERMINATIONREASONID,
    p.BOTHERREBATES,
    p.ISTP2ATODEFINED,
    p.DTFNDATESIGNED,
    p.DSUSPENDLSLFROM,
    p.CABN,
    p.FEXTRALEAVESHIFTS,
    p.UCEEGD3,
    p.ULEEMWPWKAREA,
    p.UCEEMGRNAME,
    p.ITERMINATEDPERIODID,
    p.FMAXPAYLIMIT,
    p.BNZSPECIFYSLRATE,
    p.FHALFSICKTAKENHOURS,
    p.IHALFSICKCOSTACCID,
    p.FANNUALYEARTODATELOADING,
    p.ICHANGEAGENTID,
    p.IEARNINGSTYPEID,
    p.FPUBLICHOLIDAYENTHOURS,
    p.BMEDICARESURCHARGE,
    p.CKIWISAVERLATEOPTOUTOTHERREASON,
    p.CSURNAME,
    p.DANNUALPOSTPRODATE,
    p.DSUSPENDHALFSLFROM,
    p.FSPECIFYTAXRATE,
    p.BKIWISAVERISNEWEMPLOYEE,
    p.UCEESITE,
    p.BPUBLICHOLIDAYCREDIT,
    p.FLONGSERVICEPRE78ENTHOURS,
    p.FTERMLUMPSUMD,
    p.FNZSTUDENTLOANTAXRATE,
    p.IPAYPOINTID,
    p.FSICKTAKENHOURS,
    p.INUMBERCHILDREN,
    p.DPUBLICHOLIDAYTAKENDATE,
    p.CPREFERREDNAME,
    p.BDAILYTAXING,
    p.CSTP2TAXTREATMENT,
    p.DRECOMMENCEDATE,
    p.DLONGSERVICEPOSTENTDATE,
    p.DTERMINATIONDATE,
    p.BMEDICAREEXEMPTION,
    p.FSICKTOTALENT,
    p.FNZSTUDENTLOANCIRTAXRATE,
    p.IETPPAYSUMMARY,
    p.FSICKACTUALENTHOURS,
    p.BISAWARDBASED,
    p.FLOADINGATDUNPAID,
    p.UCEEGD4,
    p.UCEEDIVISION,
    p.FAWARDRATE,
    p.BNZSTUDENTLOANBOR,
    p.CADDRESS1,
    p.BSICKGRANTSICK,
    p.ULEEMWPLOC,
    p.FTERMPOSTJUN83TAX,
    p.FTERMAVGNORMALGROSS,
    p.FLONGSERVICEPOSTPROHOURS,
    p.IDOUBLERATEFACTOR,
    p.UCEECOMPANY,
    p.IWORKMANSCOMPID,
    p.FNORMALHOURS,
    p.DPUBLICHOLIDAYPRODATE,
    p.DSUSPENDPUBLICTO,
    p.FYEARLYSALARY,
    p.FLOADINGATDPAID,
    p.CEMPCODE,
    p.BLONGSERVICEFIRSTENTPERIOD,
    p.IPAYMENTTYPEID,
    p.DSUSPENDSLFROM,
    p.FDOUBLERATE,
    p.IHIREDPERIODID,
    p.IPOSTALCOUNTRYID,
    p.DLONGSERVICELEAVETAKENDATE,
    p.BISANNUALISEDSALARY,
    p.DKIWISAVEROPTOUTREPORTEDDATE,
    p.FSICKPROENTHOURS,
    p.FHALFSICKACTUALENTHOURS,
    p.ICOUNTRYID,
    p.IHALFSICKNONENTMONTHS,
    p.FANNUALPOSTENTHOURS,
    p.ULEEMWPPYGRP,
    p.FPUBLICHOLIDAYPROHOURS,
    p.BJOBKEEPER,
    p.IDEFAULTEMAIL,
    p.UCEEGD5,
    p.BISCLOSELYHELDPAYEE,
    p.IBASISOFPAYMENT,
    p.BFAMILYTAXBENEFIT,
    p.FEXTRALEAVEENT,
    p.BSUSPENDNEXTAUTOPAY,
    p.DTERMRETIREDATE,
    p.DHALFSICKACTUALENTDATE,
    p.BTFN,
    p.DSICKACTUALENTDATE,
    p.CADDRESS2,
    p.DEXTRALEAVEENTDATE,
    p.FLONGSERVICEPREENTHOURS,
    p.FEXTRALEAVEPRO,
    p.BSUSPENDANNUALENT,
    p.IADVICEDELIVERYMETHOD,
    p.IMEDICARESURCHARGEPERCENT,
    p.IMARITALSTATUSID,
    p.BHALFSICKGRANTSICK,
    p.ISICKCOSTACCID,
    p.UCEEBADGE,
    p.DSUSPENDSLTO,
    p.BAUSRESIDENT,
    p.UCEELEAVEGROUP,
    p.IEXTRALEAVEID,
    p.BSTP2SEASONALWORKER,
    p.BJOBMAKER,
    p.ISICKNONENTMONTHS,
    p.FHALFSICKTOTALENT,
    p.IQUALIFYINGALLOWANCE,
    p.DLONGSERVICEPOSTPRODATE,
    p.IDEATHTYPEID,
    p.BKIWISAVERNEWMEMBER,
    p.ITIMEHALFRATEFACTOR,
    p.ISTATEID,
    p.UCEEPAYRULE,
    p.DANNUALPOSTENTDATE,
    p.IPOSTALSTATEID,
    p.ITIMESHEETOPTION,
    p.ITITLEID,
    p.DSICKPROENTDATE,
    p.BGOTONEXTPAYCLASS,
    p.UCEEPAYADVICEMESSAGE,
    p.IWORKPLANNERID,
    p.BNZEXCLUDEFROMEMS,
    p.UCEEGD6,
    p.IHALFSICKLEAVECLASSID,
    p.FREPORTFRINGEBENEFIT,
    p.DDATEOFBIRTH,
    p.BMEDICAREREDUCTION,
    p.BSUPPRESSFROMSTP,
    p.BNZSTUDENTLOANCIR,
    p.IJOBCLASSIFICATIONID,
    p.BESPWORKGROUP,
    p.IANNUALLEAVELOADINGCLASSID,
    p.IABORIGINALTORRESSTRAIT,
    p.FOTHERINCOME,
    p.CPOSTALADD1,
    p.CKIWISAVEROPTOUTFLAG,
    p.IPAYERGROUPID,
    p.IPAYCLASSID,
    p.FANNUALPREENTHOURS,
    p.IDEFAULTCOSTACCOUNT,
    p.UCEESHIFTACT,
    p.BSUSPENDHALFSICKENT,
    p.FNORMALRATE,
    p.INZSTUDENTLOANBORTYPE,
    p.DSTARTPAYSUMMARY,
    p.FNZTAXRATE,
    p.CKIWISAVERNEWEMPSTATUS,
    p.FLONGSERVICEPOSTENTHOURS,
    p.BSUSPENDLSLENT,
    p.ITAXSCALEID,
    p.ITFNFORSUPER,
    p.IEMPLOYMENTTYPEID,
    p.IPRINTPAYSUMMARY,
    p.UCEEMGRNUMBER,
    p.FCUMULATIVEHOURS,
    p.FNONCASHBENEFIT,
    p.CTAXSCALECODE,
    p.UCEEPOSSTART,
    p.BESPTIMESHEET,
    p.UCEESUPERVISOR,
    p.IANNUALNONENTPERIOD,
    p.DEXTRALEAVEPRODATE,
    p.FEXTRALEAVETAKEN,
    p.FTERMPOSTJUN94,
    p.CREFERENCENUMBER,
    p.FMINPAYLIMIT,
    p.FLONGSERVICELEAVETAKENHOURS,
    p.UCEEGD7,
    p.IPAYROLLTAXID,
    p.DSICKLEAVETAKENDATE,
    p.ILONGSERVICELEAVECLASSID,
    p.BWORKINGHOLIDAYMAKER,
    p.DHALFSICKLEAVETAKENDATE,
    p.FTERMPREJUL83,
    p.ISTP2COUNTRYID,
    p.CTFN,
    p.DEXTRALEAVETAKENDATE,
    p.FTERMPOSTJUN83,
    p.IGENDERID,
    p.ISTP2INCOMETYPE,
    p.IANNUALLEAVECLASSID,
    p.IHECSSFSSDEBT,
    p.FTOTALREBATES,
    p.ILOCATIONID,
    p.ICLIMATICID,
    p.FLOADINGYTD,
    p.FAUTOPAYAMOUNT,
    p.CPOSTCODE,
    p.DDATEPAYSUMMARY,
    p.CPOSTALADD2,
    p.BSICKNONENTMET,
    p.CKIWISAVERELIGIBILITY,
    p.IPUBLICHOLIDAYID,
    p.FDATESERVICEHOURS,
    p.BHALFSICKNONENTMET,
    p.IPAYFREQUENCYID,
    p.FAWARDHOURS,
    p.CKIWISAVERLATEOPTOUTREASON,
    p.CTELEPHONE1,
    p.IPAYMETHODID,
    p.FNZSTUDENTLOANBORTAXRATE,
    p.DSUSPENDLSLTO,
    p.BNZSTUDENTLOAN,
    p.DKIWISAVEROPTOUTDATE,
    p.DANNUALLEAVETAKENDATE,
    p.DKIWISAVERNEWMEMBERREPORTEDDATE,
    p.FLOADINGATDPENALTIESPAID,
    p.CPOSTALPOSTALCODE,
    p.UCEEGD2,
    p.BNOTAXFREE,
    p.FLOADINGATDPENALTIESUNPAID,
    p.BCIRRATE,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,      -- TODO-LATER: change this calculation fo a function
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END      -- TODO-LATER: change this calculation fo a function

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYEE as p

    -- joins to get the corresponding version of the related tables
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCONTRACTHOURS as ch on
        p.ICONTRACTHOURSID = ch.IDCONTRACTHOURS
    
    left join leave_hist as h on
        p.IDEMPLOYEE = h.IDEMPLOYEE
        
where
    h.IDEMPLOYEE is null                                -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_2_LEAVE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_LEAVE_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_HISTORY (
    IDEMPLOYEELEAVE,
    FPOSTPROHOURS,
    BNONENTMET,
    ICOSTACCOUNTID,
    COST_ACCOUNT_FIVETRAN_SYNCED,
    FCURRENTACCRUALHOURS,
    DSUSPENDFROM,
    DCURRENTACCRUALDATE,
    DTAKENDATE,
    FTAKENHOURS,
    DPOSTENTDATE,
    IEMPLOYEEID,
    EMPLOYEE_FIVETRAN_SYNCED,
    BFIRSTENTPERIOD,
    FYEARTODATELOADING,
    FLEAVESHIFTS,
    FPREENTHOURS,
    ILEAVELOADINGCLASSID,
    LEAVE_LOADING_FIVETRAN_SYNCED,
    ICHANGEAGENTID,
    ILEAVETYPE,
    FPOSTENTHOURS,
    DPOSTPRODATE,
    DSUSPENDTO,
    BSUSPENDENT,
    FPRE78ENTHOURS,
    BGRANT,
    ILEAVECLASSID,
    SICK_LEAVE_FIVETRAN_SYNCED,
    ANNUAL_LEAVE_FIVETRAN_SYNCED,
    LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
    USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
    INONENTMONTHS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_HISTORYas

with
    leave_hist as (
        select
            IDEMPLOYEELEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
            from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_HISTORY as h
        group by all
    )

select
    p.IDEMPLOYEELEAVE,
    p.FPOSTPROHOURS,
    p.BNONENTMET,
    p.ICOSTACCOUNTID,
    ca._FIVETRAN_SYNCED as COST_ACCOUNT_FIVETRAN_SYNCED,
    p.FCURRENTACCRUALHOURS,
    p.DSUSPENDFROM,
    p.DCURRENTACCRUALDATE,
    p.DTAKENDATE,
    p.FTAKENHOURS,
    p.DPOSTENTDATE,
    p.IEMPLOYEEID,
    e._FIVETRAN_SYNCED as EMPLOYEE_FIVETRAN_SYNCED,
    p.BFIRSTENTPERIOD,
    p.FYEARTODATELOADING,
    p.FLEAVESHIFTS,
    p.FPREENTHOURS,
    p.ILEAVELOADINGCLASSID,
    ll._FIVETRAN_SYNCED as LEAVE_LOADING_FIVETRAN_SYNCED,
    p.ICHANGEAGENTID,
    p.ILEAVETYPE,
    p.FPOSTENTHOURS,
    p.DPOSTPRODATE,
    p.DSUSPENDTO,
    p.BSUSPENDENT,
    p.FPRE78ENTHOURS,
    p.BGRANT,
    p.ILEAVECLASSID,
    sl._FIVETRAN_SYNCED as SICK_LEAVE_FIVETRAN_SYNCED,
    al._FIVETRAN_SYNCED as ANNUAL_LEAVE_FIVETRAN_SYNCED,
    lsl._FIVETRAN_SYNCED as LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
    udl._FIVETRAN_SYNCED as USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
    p.INONENTMONTHS,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END
    
from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEELEAVE as p

    -- joins to get the corresponding version of the related tables
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEE as e on
        p.IEMPLOYEEID = e.IDEMPLOYEE

    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLSICKLEAVE as sl on 
        sl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 0
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLANNUALLEAVE as al on 
        al.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 1
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLONGSERVICELEAVE as lsl on 
        lsl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 2
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLUSERDEFINEDLEAVE as udl on 
        udl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 6
    
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLEAVELOADING as ll on 
        ll.IDLOADING = p.ILEAVELOADINGCLASSID
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCOSTACCOUNTS as ca on 
        ca.IDCOSTACCOUNT = p.ICOSTACCOUNTID

    -- latest history already stored
    left join leave_hist as h on
        p.IDEMPLOYEELEAVE = h.IDEMPLOYEELEAVE
        
where
    h.IDEMPLOYEELEAVE is null                           -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_COST_ACCOUNT_HISTORY table from the Micropay _IPTBLLEAVELOADING table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_HISTORY (
	IDCOSTACCOUNT,
	CCOSTCODE,
	ILINK,
	IPOSITION,
	BACTIVE,
	CCODE,
	CDESCRIPTION,
    MAX_IPOSITION,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_HISTORY as

with
    leave_hist as (
        select
            IDCOSTACCOUNT,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_HISTORY as h
        group by all
    ),

    structure as (
        select MAX(s.IPOSITION) as MAX_IPOSITION
        from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE as s
        )

select
	p.IDCOSTACCOUNT,
	p.CCOSTCODE,
	p.ILINK,
	p.IPOSITION,
	p.BACTIVE,
	p.CCODE,
	p.CDESCRIPTION,
    structure.MAX_IPOSITION,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCOSTACCOUNTS as p

    -- joins to get the corresponding version of the related tables
    cross join structure
    
    left join leave_hist as h on
        p.IDCOSTACCOUNT = h.IDCOSTACCOUNT
        
where
    h.IDCOSTACCOUNT is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_STRUCTURE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_COST_ACCOUNT_STRUCTURE_HISTORY table from the Micropay _IPTBLCOSTACCOUNTSTRUCTURE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_STRUCTURE_HISTORY (
    IDCOSTACCSTRUCTURE,
    CSEPARATOR,
    CDESCRIPTION,
    ILENGTH,
    IPOSITION,
    CCODE,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_STRUCTURE_HISTORY as

with
    leave_hist as (
        select
            IDCOSTACCSTRUCTURE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_STRUCTURE_HISTORY as h
        group by all
    )

select
    p.IDCOSTACCSTRUCTURE,
    p.CSEPARATOR,
    p.CDESCRIPTION,
    p.ILENGTH,
    p.IPOSITION,
    p.CCODE,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE as p
    left join leave_hist as h on
        p.IDCOSTACCSTRUCTURE = h.IDCOSTACCSTRUCTURE
        
where
    h.IDCOSTACCSTRUCTURE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_ANNUAL_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_LEAVE_ANNUAL_HISTORY table from the Micropay _IPTBLANNUALLEAVE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_ANNUAL_HISTORY (
    IDLEAVE,
    BPUBLICHOLIDAY,
    FENTITLEMENT,
    IENTITLEMENTSEVERY,
    IPRORATAPERIODUNITS,
    IENTITLEMENTUNITS,
    ILEAVETYPE,
    FPRORATA,
    CHOURTYPES,
    IPRORATAUNITS,
    BCREDITATENDOFPERIOD,
    IPRORATAEVERY,
    CUDLEAVECLASS,
    BTERMADJUSTMENT,
    CDESCRIPTION,
    BHOURLY,
    CADDITIONS,
    IINCLUDELEAVELOADINGINTERM,
    COTHERLEAVEREASONS,
    IENTITLEMENTPERIODUNITS,
    FACCRUALRATE,
    INEXTLEAVE,
    CCODE,
    DSTANDARDENTDATE,
    BCOSTSPLIT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_ANNUAL_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_ANNUAL_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
    p.BPUBLICHOLIDAY,
    p.FENTITLEMENT,
    p.IENTITLEMENTSEVERY,
    p.IPRORATAPERIODUNITS,
    p.IENTITLEMENTUNITS,
    p.ILEAVETYPE,
    p.FPRORATA,
    p.CHOURTYPES,
    p.IPRORATAUNITS,
    p.BCREDITATENDOFPERIOD,
    p.IPRORATAEVERY,
    p.CUDLEAVECLASS,
    p.BTERMADJUSTMENT,
    p.CDESCRIPTION,
    p.BHOURLY,
    p.CADDITIONS,
    p.IINCLUDELEAVELOADINGINTERM,
    p.COTHERLEAVEREASONS,
    p.IENTITLEMENTPERIODUNITS,
    p.FACCRUALRATE,
    p.INEXTLEAVE,
    p.CCODE,
    p.DSTANDARDENTDATE,
    p.BCOSTSPLIT,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLANNUALLEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_FORTNIGHTLY_LEAVE_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_HISTORY (
    IDEMPLOYEELEAVE,
    FPOSTPROHOURS,
    BNONENTMET,
    ICOSTACCOUNTID,
    COST_ACCOUNT_FIVETRAN_SYNCED,
    FCURRENTACCRUALHOURS,
    DSUSPENDFROM,
    DCURRENTACCRUALDATE,
    DTAKENDATE,
    FTAKENHOURS,
    DPOSTENTDATE,
    IEMPLOYEEID,
    EMPLOYEE_FIVETRAN_SYNCED,
    BFIRSTENTPERIOD,
    FYEARTODATELOADING,
    FLEAVESHIFTS,
    FPREENTHOURS,
    ILEAVELOADINGCLASSID,
    LEAVE_LOADING_FIVETRAN_SYNCED,
    ICHANGEAGENTID,
    ILEAVETYPE,
    FPOSTENTHOURS,
    DPOSTPRODATE,
    DSUSPENDTO,
    BSUSPENDENT,
    FPRE78ENTHOURS,
    BGRANT,
    ILEAVECLASSID,
    SICK_LEAVE_FIVETRAN_SYNCED,
    ANNUAL_LEAVE_FIVETRAN_SYNCED,
    LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
    USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
    INONENTMONTHS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_HISTORYas

with
    leave_hist as (
        select
            IDEMPLOYEELEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_HISTORY as h
        group by all
    )

select
    p.IDEMPLOYEELEAVE,
    p.FPOSTPROHOURS,
    p.BNONENTMET,
    p.ICOSTACCOUNTID,
    ca._FIVETRAN_SYNCED as COST_ACCOUNT_FIVETRAN_SYNCED,
    p.FCURRENTACCRUALHOURS,
    p.DSUSPENDFROM,
    p.DCURRENTACCRUALDATE,
    p.DTAKENDATE,
    p.FTAKENHOURS,
    p.DPOSTENTDATE,
    p.IEMPLOYEEID,
    e._FIVETRAN_SYNCED as EMPLOYEE_FIVETRAN_SYNCED,
    p.BFIRSTENTPERIOD,
    p.FYEARTODATELOADING,
    p.FLEAVESHIFTS,
    p.FPREENTHOURS,
    p.ILEAVELOADINGCLASSID,
    ll._FIVETRAN_SYNCED as LEAVE_LOADING_FIVETRAN_SYNCED,
    p.ICHANGEAGENTID,
    p.ILEAVETYPE,
    p.FPOSTENTHOURS,
    p.DPOSTPRODATE,
    p.DSUSPENDTO,
    p.BSUSPENDENT,
    p.FPRE78ENTHOURS,
    p.BGRANT,
    p.ILEAVECLASSID,
    sl._FIVETRAN_SYNCED as SICK_LEAVE_FIVETRAN_SYNCED,
    al._FIVETRAN_SYNCED as ANNUAL_LEAVE_FIVETRAN_SYNCED,
    lsl._FIVETRAN_SYNCED as LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
    udl._FIVETRAN_SYNCED as USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
    p.INONENTMONTHS,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END
    
from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEELEAVE as p

    -- joins to get the corresponding version of the related tables
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEE as e on
        p.IEMPLOYEEID = e.IDEMPLOYEE

    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLSICKLEAVE as sl on 
        sl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 0
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLANNUALLEAVE as al on 
        al.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 1
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLONGSERVICELEAVE as lsl on 
        lsl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 2
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLUSERDEFINEDLEAVE as udl on 
        udl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 6
    
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLEAVELOADING as ll on 
        ll.IDLOADING = p.ILEAVELOADINGCLASSID
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCOSTACCOUNTS as ca on 
        ca.IDCOSTACCOUNT = p.ICOSTACCOUNTID

    -- latest history already stored
    left join leave_hist as h on
        p.IDEMPLOYEELEAVE = h.IDEMPLOYEELEAVE
        
where
    h.IDEMPLOYEELEAVE is null                           -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LOADING_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_LEAVE_LOADING_HISTORY table from the Micropay _IPTBLLEAVELOADING table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LOADING_HISTORY (
	IDLOADING,
	FLOADINGPERCENT,
	FMAXLOADING,
	ILEAVELOADINGADDSID,
	CCODE,
	CLOADINGNAME,
	IRATETYPEID,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LOADING_HISTORY as

with
    leave_hist as (
        select
            IDLOADING,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LOADING_HISTORY as h
        group by all
    )

select
	p.IDLOADING,
	p.FLOADINGPERCENT,
	p.FMAXLOADING,
	p.ILEAVELOADINGADDSID,
	p.CCODE,
	p.CLOADINGNAME,
	p.IRATETYPEID,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLEAVELOADING as p
    left join leave_hist as h on
        p.IDLOADING = h.IDLOADING
        
where
    h.IDLOADING is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LONG_SERVICE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_LEAVE_LONG_SERVICE_HISTORY table from the Micropay _IPTBLLONGSERVICELEAVE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LONG_SERVICE_HISTORY (
    IDLEAVE,
    IENTITLEMENTSEVERY,
    FENTITLEMENT,
    IENTITLEMENTUNITS,
    IPRORATAEVERY,
    CPORTLSLPAYCOMPONENTS,
    ITERMPAYOUT,
    CHOURTYPES,
    ILEAVETYPE,
    CUDLEAVECLASS,
    BPORTABLE,
    CDESCRIPTION,
    CADDITIONS,
    COTHERLEAVEREASONS,
    IENTITLEMENTPERIODUNITS,
    FACCRUALRATE,
    CPORTLSLUDLEAVECLASS,
    IPRORATAPERIODUNITS,
    INEXTLEAVE,
    CPORTLSLADDITIONS,
    CCODE,
    BHOURLY,
    BCOSTSPLIT,
    IREPEATPRORATA,
    CPORTLSLOTHERLEAVEREASONS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LONG_SERVICE_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LONG_SERVICE_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
	p.IENTITLEMENTSEVERY,
	p.FENTITLEMENT,
	p.IENTITLEMENTUNITS,
	p.IPRORATAEVERY,
	p.CPORTLSLPAYCOMPONENTS,
	p.ITERMPAYOUT,
	p.CHOURTYPES,
	p.ILEAVETYPE,
	p.CUDLEAVECLASS,
	p.BPORTABLE,
	p.CDESCRIPTION,
	p.CADDITIONS,
	p.COTHERLEAVEREASONS,
	p.IENTITLEMENTPERIODUNITS,
	p.FACCRUALRATE,
	p.CPORTLSLUDLEAVECLASS,
	p.IPRORATAPERIODUNITS,
	p.INEXTLEAVE,
	p.CPORTLSLADDITIONS,
	p.CCODE,
	p.BHOURLY,
	p.BCOSTSPLIT,
	p.IREPEATPRORATA,
	p.CPORTLSLOTHERLEAVEREASONS,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLONGSERVICELEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_SICK_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_LEAVE_SICK_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_SICK_HISTORY (
    IDLEAVE,
    CADDITIONS,
    IENTITLEMENTPERIODUNITS,
    ILEAVETYPE,
    IMAXPERIODUNITS,
    IACCRUALUNITS,
    CCODE,
    IENTITLEMENTUNITS,
    IACCRUALPERIODUNITS,
    CDESCRIPTION,
    ICLASSIFICATIONTYPE,
    IACCRUALEVERY,
    IENTITLEMENTSEVERY,
    BPAYOUTONTERMINATION,
    BCOSTSPLIT,
    INEXTLEAVE,
    BHOURLY,
    BAPPLYHALFACCRUAL,
    CHOURTYPES,
    CUDLEAVECLASS,
    COTHERLEAVEREASONS,
    FACCRUAL,
    FMAXACCRUAL,
    IACCUMULATEENTITLEMENTS,
    FACCRUALRATE,
    FENTITLEMENT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_SICK_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_SICK_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
	p.CADDITIONS,
	p.IENTITLEMENTPERIODUNITS,
	p.ILEAVETYPE,
	p.IMAXPERIODUNITS,
	p.IACCRUALUNITS,
	p.CCODE,
	p.IENTITLEMENTUNITS,
	p.IACCRUALPERIODUNITS,
	p.CDESCRIPTION,
	p.ICLASSIFICATIONTYPE,
	p.IACCRUALEVERY,
	p.IENTITLEMENTSEVERY,
	p.BPAYOUTONTERMINATION,
	p.BCOSTSPLIT,
	p.INEXTLEAVE,
	p.BHOURLY,
	p.BAPPLYHALFACCRUAL,
	p.CHOURTYPES,
	p.CUDLEAVECLASS,
	p.COTHERLEAVEREASONS,
	p.FACCRUAL,
	p.FMAXACCRUAL,
	p.IACCUMULATEENTITLEMENTS,
	p.FACCRUALRATE,
	p.FENTITLEMENT,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLSICKLEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_USER_DEFINED_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_LEAVE_USER_DEFINED_HISTORY table from the Micropay _IPTBLUSERDEFINEDLEAVE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_USER_DEFINED_HISTORY (
    IDLEAVE,
    IENTITLEMENTPERIODUNITS,
    IENTITLEMENTUNITS,
    IMAXPERIODUNITS,
    INEXTLEAVE,
    CCODE,
    FENTITLEMENT,
    IPRORATAEVERY,
    ILEAVETYPE,
    IPRORATAPERIODUNITS,
    ITERMINATIONPAYOUT,
    FACCRUALRATE,
    CADDITIONS,
    FPRORATA,
    COTHERLEAVEREASONS,
    BCOSTSPLIT,
    FMAXACCRUAL,
    DSTANDARDENTDATE,
    IACCUMULATEENTITLEMENTS,
    IMETHOD,
    CHOURTYPES,
    CUDLEAVECLASS,
    IENTITLEMENTSEVERY,
    ITERMINATIONPAYMENTTYPE,
    IPRORATAUNITS,
    IINCLUDEONPAYADVICE,
    CDESCRIPTION,
    CBALANCEDESCRIPTION,
    BPAYOUTONTERMINATION,
    BCREDITATENDOFPERIOD,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_USER_DEFINED_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_USER_DEFINED_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
	p.IENTITLEMENTPERIODUNITS,
	p.IENTITLEMENTUNITS,
	p.IMAXPERIODUNITS,
	p.INEXTLEAVE,
	p.CCODE,
	p.FENTITLEMENT,
	p.IPRORATAEVERY,
	p.ILEAVETYPE,
	p.IPRORATAPERIODUNITS,
	p.ITERMINATIONPAYOUT,
	p.FACCRUALRATE,
	p.CADDITIONS,
	p.FPRORATA,
	p.COTHERLEAVEREASONS,
	p.BCOSTSPLIT,
	p.FMAXACCRUAL,
	p.DSTANDARDENTDATE,
	p.IACCUMULATEENTITLEMENTS,
	p.IMETHOD,
	p.CHOURTYPES,
	p.CUDLEAVECLASS,
	p.IENTITLEMENTSEVERY,
	p.ITERMINATIONPAYMENTTYPE,
	p.IPRORATAUNITS,
	p.IINCLUDEONPAYADVICE,
	p.CDESCRIPTION,
	p.CBALANCEDESCRIPTION,
	p.BPAYOUTONTERMINATION,
	p.BCREDITATENDOFPERIOD,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLUSERDEFINEDLEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_CONTRACT_HOUR_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_WORKER_CONTRACT_HOUR_HISTORY table from the Micropay _IPTBLCONTRACTHOURS table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_CONTRACT_HOUR_HISTORY (
    IDCONTRACTHOURS,
    CCODE,
    FDAYSPERWEEK,
    FHOURSPERDAY,
    CDESCRIPTION,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_CONTRACT_HOUR_HISTORY as

with
    leave_hist as (
        select
            IDCONTRACTHOURS,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_CONTRACT_HOUR_HISTORY as h
        group by all
    )

select
    p.IDCONTRACTHOURS,
    p.CCODE,
    p.FDAYSPERWEEK,
    p.FHOURSPERDAY,
    p.CDESCRIPTION,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END      -- TODO-LATER: change this calculation fo a function

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCONTRACTHOURS as p
    left join leave_hist as h on
        p.IDCONTRACTHOURS = h.IDCONTRACTHOURS
        
where
    h.IDCONTRACTHOURS is null                                -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_MONTHLY_WORKER_HISTORY table from the Micropay _IPTBLEMPLOYEE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_HISTORY (
    IDEMPLOYEE,
    UCEEARCHJC,
    IPAYMETHODID,
    ILONGSERVICELEAVECLASSID,
    BSUSPENDNEXTAUTOPAY,
    DTFNDATESIGNED,
    FAUTOPAYAMOUNT,
    BISAWARDBASED,
    IPAYROLLTAXID,
    BESPWORKGROUP,
    ITITLEID,
    DANNUALPOSTPRODATE,
    BHALFSICKGRANTSICK,
    BAUSRESIDENT,
    FHALFSICKTOTALENT,
    DSICKPROENTDATE,
    FLONGSERVICEPREENTHOURS,
    DSUSPENDALFROM,
    CKIWISAVERLATEOPTOUTOTHERREASON,
    IADVICEDELIVERYMETHOD,
    DKIWISAVERNEWMEMBERREPORTEDDATE,
    DSUSPENDLSLFROM,
    DSICKACTUALENTDATE,
    IPAYCLASSID,
    ISTP2INCOMETYPE,
    IANNUALLEAVELOADINGCLASSID,
    FLONGSERVICELEAVETAKENHOURS,
    BMEDICAREEXEMPTION,
    CMIDDLENAME,
    CREFERENCENUMBER,
    IPRINTPAYSUMMARY,
    CTFN,
    DHALFSICKPROENTDATE,
    FANNUALPREENTHOURS,
    DTERMRETIREDATE,
    DEXTRALEAVETAKENDATE,
    CSURNAME,
    IKIWISAVERSTATUS,
    DSTARTPAYSUMMARY,
    FEXTRALEAVEPRO,
    IBASISOFPAYMENT,
    CFIRSTNAME,
    BFAMILYTAXBENEFIT,
    UCEEARCHCOSTACC,
    BHALFSICKNONENTMET,
    FNORMALHOURS,
    CADDRESS1,
    FLOADINGATDUNPAID,
    ITIMESHEETOPTION,
    ITERMINATIONREASONID,
    CPOSTALADD2,
    ISICKCOSTACCID,
    BNZSPECIFYSLRATE,
    IWORKPLANNERID,
    BNOTAXFREE,
    DSUSPENDPUBLICFROM,
    IEARNINGSTYPEID,
    FTERMLUMPSUMD,
    FSPECIFYTAXRATE,
    CPREFERREDNAME,
    UCEEPAYADVICEMESSAGE,
    IPAYMENTTYPEID,
    BNZSTUDENTLOANBOR,
    IHALFSICKNONENTMONTHS,
    IQUALIFYINGALLOWANCE,
    FPUBLICHOLIDAYPROHOURS,
    IHECSSFSSDEBT,
    IANNUALLEAVECOSTACCID,
    INZSTUDENTLOANBORTYPE,
    FPUBLICHOLIDAYENTHOURS,
    FYEARLYSALARY,
    FLOADINGATDPAID,
    FSICKTOTALENT,
    DHALFSICKLEAVETAKENDATE,
    FNZSTUDENTLOANTAXRATE,
    FLOADINGATDPENALTIESPAID,
    DANNUALLEAVETAKENDATE,
    BOTHERREBATES,
    CTELEPHONE2,
    IANNUALNONENTPERIOD,
    BSUSPENDLSLENT,
    BJOBMAKER,
    FEXTRALEAVETAKEN,
    FCUMULATIVEHOURS,
    FTERMPOSTJUN94,
    FTERMPOSTJUN83TAX,
    FNONCASHBENEFIT,
    IETPPAYSUMMARY,
    DPUBLICHOLIDAYENTDATE,
    FLOADINGATDPENALTIESUNPAID,
    IDOUBLERATEFACTOR,
    IDEATHTYPEID,
    BSUSPENDHALFSICKENT,
    DDATEPAYSUMMARY,
    FOTHERINCOME,
    BMEDICARESURCHARGE,
    FDOUBLERATE,
    DDATEOFBIRTH,
    FLONGSERVICEPRE78ENTHOURS,
    BKIWISAVERISNEWEMPLOYEE,
    FNZSTUDENTLOANCIRTAXRATE,
    ITAXSCALEID,
    ISICKNONENTMONTHS,
    DPUBLICHOLIDAYTAKENDATE,
    CKIWISAVERELIGIBILITY,
    BTERMINATED,
    UCEEGENDESC2,
    DSICKLEAVETAKENDATE,
    FDATESERVICEHOURS,
    DANNUALISEDANNIVERSARYDATE,
    FHALFSICKACTUALENTHOURS,
    FAWARDRATE,
    UCEELEGACY,
    FOTHERRATE,
    BNZSTUDENTLOANCIR,
    CEMPCODE,
    IHIREDPERIODID,
    IMEDICARESURCHARGEPERCENT,
    ITIMEHALFRATEFACTOR,
    FMAXPAYLIMIT,
    FHALFSICKTAKENHOURS,
    BNZEXCLUDEFROMEMS,
    CPOSTCODE,
    CPOSTALADD1,
    IGENDERID,
    CTAXSCALECODE,
    FNORMALRATE,
    CABN,
    IDEFAULTCOSTACCOUNT,
    DANNUALPOSTENTDATE,
    DSUSPENDPUBLICTO,
    BTFN,
    ILOADINGCLASSID,
    UCEERAR,
    BDAILYTAXING,
    CKIWISAVERNEWEMPSTATUS,
    FSICKACTUALENTHOURS,
    FNZTAXRATE,
    BSTP2ISFEIEMPLOYEE,
    DSUSPENDALTO,
    ICOUNTRYID,
    BCIRRATE,
    DSUSPENDLSLTO,
    ISTATEID,
    ILOCATIONID,
    FANNUALPOSTPROHOURS,
    FTERMPOSTJUN83,
    BSUPPRESSFROMSTP,
    DKIWISAVEROPTOUTREPORTEDDATE,
    FTERMAVGNORMALGROSS,
    FSICKPROENTHOURS,
    ISTP2CESSATIONREASON,
    FMINPAYLIMIT,
    CKIWISAVERLATEOPTOUTREASON,
    IJOBCLASSIFICATIONID,
    FANNUALPOSTENTHOURS,
    BSTP2SEASONALWORKER,
    FPUBLICHOLIDAYTAKENHOURS,
    DEXTRALEAVEPRODATE,
    BJOBKEEPER,
    CTELEPHONE1,
    DKIWISAVEROPTOUTDATE,
    BISCLOSELYHELDPAYEE,
    BGOTONEXTPAYCLASS,
    IWORKMANSCOMPID,
    IABORIGINALTORRESSTRAIT,
    FTOTALREBATES,
    DHALFSICKACTUALENTDATE,
    BSICKNONENTMET,
    BKIWISAVERNEWMEMBER,
    UCEECONTRACTS,
    ICLIMATICID,
    IPOSTALCOUNTRYID,
    IDEFAULTEMAIL,
    IPOSTALSTATEID,
    BSICKGRANTSICK,
    UCEEGENDESC1,
    FSICKTAKENHOURS,
    CSTP2TAXTREATMENT,
    FANNUALYEARTODATELOADING,
    DNZPAYDAYEDLASTEXPORTDATE,
    ISICKLEAVECLASSID,
    IAUTOPAYTYPE,
    BNZWITHHOLDINGTAX,
    ULEETERMREASON,
    BWORKINGHOLIDAYMAKER,
    INUMBERCHILDREN,
    DEXTRALEAVEENTDATE,
    IRATEINCREASECODE,
    IEMPLOYMENTTYPEID,
    DSUSPENDSLFROM,
    ISTP2COUNTRYID,
    FNZSTUDENTLOANBORTAXRATE,
    BSUSPENDSICKENT,
    FAWARDHOURS,
    DVARIATIONDATE,
    DSUSPENDHALFSLFROM,
    FLONGSERVICEPOSTPROHOURS,
    DSUSPENDSLTO,
    BNZSTUDENTLOAN,
    IPUBLICHOLIDAYID,
    FEXTRALEAVEENT,
    CADDRESS2,
    IGENERATEAUTOPAY,
    ICONTRACTHOURSID,
    CONTRACT_HOUR_FIVETRAN_SYNCED,
    DSUSPENDHALFSLTO,
    DLONGSERVICEPOSTPRODATE,
    BESPTIMESHEET,
    CPOSTALPOSTALCODE,
    BSUSPENDPUBLICENT,
    BSUSPENDANNUALENT,
    FLONGSERVICEPOSTENTHOURS,
    FTIMEHALFRATE,
    DPUBLICHOLIDAYPRODATE,
    BMEDICAREREDUCTION,
    ILONGSERVICECOSTACCID,
    FEXEMPTFRINGEBENEFIT,
    CIRDEMPLOYEENAME,
    FHALFSICKPROENTHOURS,
    IANNUALLEAVECLASSID,
    ISTP2ATODEFINED,
    DHIREDDATE,
    BPUBLICHOLIDAYCREDIT,
    IHALFSICKLEAVECLASSID,
    ICHANGEAGENTID,
    BISANNUALISEDSALARY,
    DLONGSERVICELEAVETAKENDATE,
    IEXTRALEAVEID,
    FLOADINGYTD,
    FTERMPREJUL83,
    CKIWISAVEROPTOUTFLAG,
    IHALFSICKCOSTACCID,
    BLONGSERVICEFIRSTENTPERIOD,
    ITFNFORSUPER,
    IPAYPOINTID,
    IPAYERGROUPID,
    FREPORTFRINGEBENEFIT,
    DTERMINATIONDATE,
    ITERMINATEDPERIODID,
    IPAYFREQUENCYID,
    FANNUALLEAVETAKENHOURS,
    DRECOMMENCEDATE,
    IMARITALSTATUSID,
    IKIWISAVERENROLOPTID,
    DLONGSERVICEPOSTENTDATE,
    FEXTRALEAVESHIFTS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_HISTORY as

with
    leave_hist as (
        select
            IDEMPLOYEE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_HISTORY as h
        group by all
    )

select
    p.IDEMPLOYEE,
    p.UCEEARCHJC,
    p.IPAYMETHODID,
    p.ILONGSERVICELEAVECLASSID,
    p.BSUSPENDNEXTAUTOPAY,
    p.DTFNDATESIGNED,
    p.FAUTOPAYAMOUNT,
    p.BISAWARDBASED,
    p.IPAYROLLTAXID,
    p.BESPWORKGROUP,
    p.ITITLEID,
    p.DANNUALPOSTPRODATE,
    p.BHALFSICKGRANTSICK,
    p.BAUSRESIDENT,
    p.FHALFSICKTOTALENT,
    p.DSICKPROENTDATE,
    p.FLONGSERVICEPREENTHOURS,
    p.DSUSPENDALFROM,
    p.CKIWISAVERLATEOPTOUTOTHERREASON,
    p.IADVICEDELIVERYMETHOD,
    p.DKIWISAVERNEWMEMBERREPORTEDDATE,
    p.DSUSPENDLSLFROM,
    p.DSICKACTUALENTDATE,
    p.IPAYCLASSID,
    p.ISTP2INCOMETYPE,
    p.IANNUALLEAVELOADINGCLASSID,
    p.FLONGSERVICELEAVETAKENHOURS,
    p.BMEDICAREEXEMPTION,
    p.CMIDDLENAME,
    p.CREFERENCENUMBER,
    p.IPRINTPAYSUMMARY,
    p.CTFN,
    p.DHALFSICKPROENTDATE,
    p.FANNUALPREENTHOURS,
    p.DTERMRETIREDATE,
    p.DEXTRALEAVETAKENDATE,
    p.CSURNAME,
    p.IKIWISAVERSTATUS,
    p.DSTARTPAYSUMMARY,
    p.FEXTRALEAVEPRO,
    p.IBASISOFPAYMENT,
    p.CFIRSTNAME,
    p.BFAMILYTAXBENEFIT,
    p.UCEEARCHCOSTACC,
    p.BHALFSICKNONENTMET,
    p.FNORMALHOURS,
    p.CADDRESS1,
    p.FLOADINGATDUNPAID,
    p.ITIMESHEETOPTION,
    p.ITERMINATIONREASONID,
    p.CPOSTALADD2,
    p.ISICKCOSTACCID,
    p.BNZSPECIFYSLRATE,
    p.IWORKPLANNERID,
    p.BNOTAXFREE,
    p.DSUSPENDPUBLICFROM,
    p.IEARNINGSTYPEID,
    p.FTERMLUMPSUMD,
    p.FSPECIFYTAXRATE,
    p.CPREFERREDNAME,
    p.UCEEPAYADVICEMESSAGE,
    p.IPAYMENTTYPEID,
    p.BNZSTUDENTLOANBOR,
    p.IHALFSICKNONENTMONTHS,
    p.IQUALIFYINGALLOWANCE,
    p.FPUBLICHOLIDAYPROHOURS,
    p.IHECSSFSSDEBT,
    p.IANNUALLEAVECOSTACCID,
    p.INZSTUDENTLOANBORTYPE,
    p.FPUBLICHOLIDAYENTHOURS,
    p.FYEARLYSALARY,
    p.FLOADINGATDPAID,
    p.FSICKTOTALENT,
    p.DHALFSICKLEAVETAKENDATE,
    p.FNZSTUDENTLOANTAXRATE,
    p.FLOADINGATDPENALTIESPAID,
    p.DANNUALLEAVETAKENDATE,
    p.BOTHERREBATES,
    p.CTELEPHONE2,
    p.IANNUALNONENTPERIOD,
    p.BSUSPENDLSLENT,
    p.BJOBMAKER,
    p.FEXTRALEAVETAKEN,
    p.FCUMULATIVEHOURS,
    p.FTERMPOSTJUN94,
    p.FTERMPOSTJUN83TAX,
    p.FNONCASHBENEFIT,
    p.IETPPAYSUMMARY,
    p.DPUBLICHOLIDAYENTDATE,
    p.FLOADINGATDPENALTIESUNPAID,
    p.IDOUBLERATEFACTOR,
    p.IDEATHTYPEID,
    p.BSUSPENDHALFSICKENT,
    p.DDATEPAYSUMMARY,
    p.FOTHERINCOME,
    p.BMEDICARESURCHARGE,
    p.FDOUBLERATE,
    p.DDATEOFBIRTH,
    p.FLONGSERVICEPRE78ENTHOURS,
    p.BKIWISAVERISNEWEMPLOYEE,
    p.FNZSTUDENTLOANCIRTAXRATE,
    p.ITAXSCALEID,
    p.ISICKNONENTMONTHS,
    p.DPUBLICHOLIDAYTAKENDATE,
    p.CKIWISAVERELIGIBILITY,
    p.BTERMINATED,
    p.UCEEGENDESC2,
    p.DSICKLEAVETAKENDATE,
    p.FDATESERVICEHOURS,
    p.DANNUALISEDANNIVERSARYDATE,
    p.FHALFSICKACTUALENTHOURS,
    p.FAWARDRATE,
    p.UCEELEGACY,
    p.FOTHERRATE,
    p.BNZSTUDENTLOANCIR,
    p.CEMPCODE,
    p.IHIREDPERIODID,
    p.IMEDICARESURCHARGEPERCENT,
    p.ITIMEHALFRATEFACTOR,
    p.FMAXPAYLIMIT,
    p.FHALFSICKTAKENHOURS,
    p.BNZEXCLUDEFROMEMS,
    p.CPOSTCODE,
    p.CPOSTALADD1,
    p.IGENDERID,
    p.CTAXSCALECODE,
    p.FNORMALRATE,
    p.CABN,
    p.IDEFAULTCOSTACCOUNT,
    p.DANNUALPOSTENTDATE,
    p.DSUSPENDPUBLICTO,
    p.BTFN,
    p.ILOADINGCLASSID,
    p.UCEERAR,
    p.BDAILYTAXING,
    p.CKIWISAVERNEWEMPSTATUS,
    p.FSICKACTUALENTHOURS,
    p.FNZTAXRATE,
    p.BSTP2ISFEIEMPLOYEE,
    p.DSUSPENDALTO,
    p.ICOUNTRYID,
    p.BCIRRATE,
    p.DSUSPENDLSLTO,
    p.ISTATEID,
    p.ILOCATIONID,
    p.FANNUALPOSTPROHOURS,
    p.FTERMPOSTJUN83,
    p.BSUPPRESSFROMSTP,
    p.DKIWISAVEROPTOUTREPORTEDDATE,
    p.FTERMAVGNORMALGROSS,
    p.FSICKPROENTHOURS,
    p.ISTP2CESSATIONREASON,
    p.FMINPAYLIMIT,
    p.CKIWISAVERLATEOPTOUTREASON,
    p.IJOBCLASSIFICATIONID,
    p.FANNUALPOSTENTHOURS,
    p.BSTP2SEASONALWORKER,
    p.FPUBLICHOLIDAYTAKENHOURS,
    p.DEXTRALEAVEPRODATE,
    p.BJOBKEEPER,
    p.CTELEPHONE1,
    p.DKIWISAVEROPTOUTDATE,
    p.BISCLOSELYHELDPAYEE,
    p.BGOTONEXTPAYCLASS,
    p.IWORKMANSCOMPID,
    p.IABORIGINALTORRESSTRAIT,
    p.FTOTALREBATES,
    p.DHALFSICKACTUALENTDATE,
    p.BSICKNONENTMET,
    p.BKIWISAVERNEWMEMBER,
    p.UCEECONTRACTS,
    p.ICLIMATICID,
    p.IPOSTALCOUNTRYID,
    p.IDEFAULTEMAIL,
    p.IPOSTALSTATEID,
    p.BSICKGRANTSICK,
    p.UCEEGENDESC1,
    p.FSICKTAKENHOURS,
    p.CSTP2TAXTREATMENT,
    p.FANNUALYEARTODATELOADING,
    p.DNZPAYDAYEDLASTEXPORTDATE,
    p.ISICKLEAVECLASSID,
    p.IAUTOPAYTYPE,
    p.BNZWITHHOLDINGTAX,
    p.ULEETERMREASON,
    p.BWORKINGHOLIDAYMAKER,
    p.INUMBERCHILDREN,
    p.DEXTRALEAVEENTDATE,
    p.IRATEINCREASECODE,
    p.IEMPLOYMENTTYPEID,
    p.DSUSPENDSLFROM,
    p.ISTP2COUNTRYID,
    p.FNZSTUDENTLOANBORTAXRATE,
    p.BSUSPENDSICKENT,
    p.FAWARDHOURS,
    p.DVARIATIONDATE,
    p.DSUSPENDHALFSLFROM,
    p.FLONGSERVICEPOSTPROHOURS,
    p.DSUSPENDSLTO,
    p.BNZSTUDENTLOAN,
    p.IPUBLICHOLIDAYID,
    p.FEXTRALEAVEENT,
    p.CADDRESS2,
    p.IGENERATEAUTOPAY,
    p.ICONTRACTHOURSID,
    ch._FIVETRAN_SYNCED as CONTRACT_HOUR_FIVETRAN_SYNCED,
    p.DSUSPENDHALFSLTO,
    p.DLONGSERVICEPOSTPRODATE,
    p.BESPTIMESHEET,
    p.CPOSTALPOSTALCODE,
    p.BSUSPENDPUBLICENT,
    p.BSUSPENDANNUALENT,
    p.FLONGSERVICEPOSTENTHOURS,
    p.FTIMEHALFRATE,
    p.DPUBLICHOLIDAYPRODATE,
    p.BMEDICAREREDUCTION,
    p.ILONGSERVICECOSTACCID,
    p.FEXEMPTFRINGEBENEFIT,
    p.CIRDEMPLOYEENAME,
    p.FHALFSICKPROENTHOURS,
    p.IANNUALLEAVECLASSID,
    p.ISTP2ATODEFINED,
    p.DHIREDDATE,
    p.BPUBLICHOLIDAYCREDIT,
    p.IHALFSICKLEAVECLASSID,
    p.ICHANGEAGENTID,
    p.BISANNUALISEDSALARY,
    p.DLONGSERVICELEAVETAKENDATE,
    p.IEXTRALEAVEID,
    p.FLOADINGYTD,
    p.FTERMPREJUL83,
    p.CKIWISAVEROPTOUTFLAG,
    p.IHALFSICKCOSTACCID,
    p.BLONGSERVICEFIRSTENTPERIOD,
    p.ITFNFORSUPER,
    p.IPAYPOINTID,
    p.IPAYERGROUPID,
    p.FREPORTFRINGEBENEFIT,
    p.DTERMINATIONDATE,
    p.ITERMINATEDPERIODID,
    p.IPAYFREQUENCYID,
    p.FANNUALLEAVETAKENHOURS,
    p.DRECOMMENCEDATE,
    p.IMARITALSTATUSID,
    p.IKIWISAVERENROLOPTID,
    p.DLONGSERVICEPOSTENTDATE,
    p.FEXTRALEAVESHIFTS,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,      -- TODO-LATER: change this calculation fo a function
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END      -- TODO-LATER: change this calculation fo a function

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEE as p

    -- joins to get the corresponding version of the related tables
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCONTRACTHOURS as ch on
        p.ICONTRACTHOURSID = ch.IDCONTRACTHOURS
    
    left join leave_hist as h on
        p.IDEMPLOYEE = h.IDEMPLOYEE
        
where
    h.IDEMPLOYEE is null                                -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_COST_ACCOUNT_HISTORY table from the Micropay _IPTBLLEAVELOADING table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_HISTORY (
	IDCOSTACCOUNT,
	CCOSTCODE,
	ILINK,
	IPOSITION,
	BACTIVE,
	CCODE,
	CDESCRIPTION,
    MAX_IPOSITION,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_HISTORY as

with
    leave_hist as (
        select
            IDCOSTACCOUNT,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_HISTORY as h
        group by all
    ),

    structure as (
        select MAX(s.IPOSITION) as MAX_IPOSITION
        from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE as s
        )

select
	p.IDCOSTACCOUNT,
	p.CCOSTCODE,
	p.ILINK,
	p.IPOSITION,
	p.BACTIVE,
	p.CCODE,
	p.CDESCRIPTION,
    structure.MAX_IPOSITION,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCOSTACCOUNTS as p

    -- joins to get the corresponding version of the related tables
    cross join structure
    
    left join leave_hist as h on
        p.IDCOSTACCOUNT = h.IDCOSTACCOUNT
        
where
    h.IDCOSTACCOUNT is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_STRUCTURE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_COST_ACCOUNT_STRUCTURE_HISTORY table from the Micropay _IPTBLCOSTACCOUNTSTRUCTURE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_STRUCTURE_HISTORY (
    IDCOSTACCSTRUCTURE,
    CSEPARATOR,
    CDESCRIPTION,
    ILENGTH,
    IPOSITION,
    CCODE,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_STRUCTURE_HISTORY as

with
    leave_hist as (
        select
            IDCOSTACCSTRUCTURE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_STRUCTURE_HISTORY as h
        group by all
    )

select
    p.IDCOSTACCSTRUCTURE,
    p.CSEPARATOR,
    p.CDESCRIPTION,
    p.ILENGTH,
    p.IPOSITION,
    p.CCODE,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE as p
    left join leave_hist as h on
        p.IDCOSTACCSTRUCTURE = h.IDCOSTACCSTRUCTURE
        
where
    h.IDCOSTACCSTRUCTURE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_ANNUAL_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_LEAVE_ANNUAL_HISTORY table from the Micropay _IPTBLANNUALLEAVE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_ANNUAL_HISTORY (
    IDLEAVE,
    BPUBLICHOLIDAY,
    FENTITLEMENT,
    IENTITLEMENTSEVERY,
    IPRORATAPERIODUNITS,
    IENTITLEMENTUNITS,
    ILEAVETYPE,
    FPRORATA,
    CHOURTYPES,
    IPRORATAUNITS,
    BCREDITATENDOFPERIOD,
    IPRORATAEVERY,
    CUDLEAVECLASS,
    BTERMADJUSTMENT,
    CDESCRIPTION,
    BHOURLY,
    CADDITIONS,
    IINCLUDELEAVELOADINGINTERM,
    COTHERLEAVEREASONS,
    IENTITLEMENTPERIODUNITS,
    FACCRUALRATE,
    INEXTLEAVE,
    CCODE,
    DSTANDARDENTDATE,
    BCOSTSPLIT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_ANNUAL_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_ANNUAL_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
    p.BPUBLICHOLIDAY,
    p.FENTITLEMENT,
    p.IENTITLEMENTSEVERY,
    p.IPRORATAPERIODUNITS,
    p.IENTITLEMENTUNITS,
    p.ILEAVETYPE,
    p.FPRORATA,
    p.CHOURTYPES,
    p.IPRORATAUNITS,
    p.BCREDITATENDOFPERIOD,
    p.IPRORATAEVERY,
    p.CUDLEAVECLASS,
    p.BTERMADJUSTMENT,
    p.CDESCRIPTION,
    p.BHOURLY,
    p.CADDITIONS,
    p.IINCLUDELEAVELOADINGINTERM,
    p.COTHERLEAVEREASONS,
    p.IENTITLEMENTPERIODUNITS,
    p.FACCRUALRATE,
    p.INEXTLEAVE,
    p.CCODE,
    p.DSTANDARDENTDATE,
    p.BCOSTSPLIT,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLANNUALLEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_LEAVE_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_HISTORY (
    IDEMPLOYEELEAVE,
    FPOSTPROHOURS,
    BNONENTMET,
    ICOSTACCOUNTID,
    COST_ACCOUNT_FIVETRAN_SYNCED,
    FCURRENTACCRUALHOURS,
    DSUSPENDFROM,
    DCURRENTACCRUALDATE,
    DTAKENDATE,
    FTAKENHOURS,
    DPOSTENTDATE,
    IEMPLOYEEID,
    EMPLOYEE_FIVETRAN_SYNCED,
    BFIRSTENTPERIOD,
    FYEARTODATELOADING,
    FLEAVESHIFTS,
    FPREENTHOURS,
    ILEAVELOADINGCLASSID,
    LEAVE_LOADING_FIVETRAN_SYNCED,
    ICHANGEAGENTID,
    ILEAVETYPE,
    FPOSTENTHOURS,
    DPOSTPRODATE,
    DSUSPENDTO,
    BSUSPENDENT,
    FPRE78ENTHOURS,
    BGRANT,
    ILEAVECLASSID,
    SICK_LEAVE_FIVETRAN_SYNCED,
    ANNUAL_LEAVE_FIVETRAN_SYNCED,
    LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
    USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
    INONENTMONTHS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_HISTORY as

with
    leave_hist as (
        select
            IDEMPLOYEELEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_HISTORY as h
        group by all
    )

select
    p.IDEMPLOYEELEAVE,
    p.FPOSTPROHOURS,
    p.BNONENTMET,
    p.ICOSTACCOUNTID,
    ca._FIVETRAN_SYNCED as COST_ACCOUNT_FIVETRAN_SYNCED,
    p.FCURRENTACCRUALHOURS,
    p.DSUSPENDFROM,
    p.DCURRENTACCRUALDATE,
    p.DTAKENDATE,
    p.FTAKENHOURS,
    p.DPOSTENTDATE,
    p.IEMPLOYEEID,
    e._FIVETRAN_SYNCED as EMPLOYEE_FIVETRAN_SYNCED,
    p.BFIRSTENTPERIOD,
    p.FYEARTODATELOADING,
    p.FLEAVESHIFTS,
    p.FPREENTHOURS,
    p.ILEAVELOADINGCLASSID,
    ll._FIVETRAN_SYNCED as LEAVE_LOADING_FIVETRAN_SYNCED,
    p.ICHANGEAGENTID,
    p.ILEAVETYPE,
    p.FPOSTENTHOURS,
    p.DPOSTPRODATE,
    p.DSUSPENDTO,
    p.BSUSPENDENT,
    p.FPRE78ENTHOURS,
    p.BGRANT,
    p.ILEAVECLASSID,
    sl._FIVETRAN_SYNCED as SICK_LEAVE_FIVETRAN_SYNCED,
    al._FIVETRAN_SYNCED as ANNUAL_LEAVE_FIVETRAN_SYNCED,
    lsl._FIVETRAN_SYNCED as LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
    udl._FIVETRAN_SYNCED as USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
    p.INONENTMONTHS,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYEELEAVE as p

    -- joins to get the corresponding version of the related tables
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYEE as e on
        p.IEMPLOYEEID = e.IDEMPLOYEE

    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLSICKLEAVE as sl on 
        sl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 0
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLANNUALLEAVE as al on 
        al.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 1
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLLONGSERVICELEAVE as lsl on 
        lsl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 2
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLUSERDEFINEDLEAVE as udl on 
        udl.IDLEAVE = p.ILEAVECLASSID
        and p.ILEAVETYPE = 6
    
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLLEAVELOADING as ll on 
        ll.IDLOADING = p.ILEAVELOADINGCLASSID
        
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCOSTACCOUNTS as ca on 
        ca.IDCOSTACCOUNT = p.ICOSTACCOUNTID

    left join leave_hist as h on
        p.IDEMPLOYEELEAVE = h.IDEMPLOYEELEAVE
        
where
    h.IDEMPLOYEELEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LOADING_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_LEAVE_LOADING_HISTORY table from the Micropay _IPTBLLEAVELOADING table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LOADING_HISTORY (
	IDLOADING,
	FLOADINGPERCENT,
	FMAXLOADING,
	ILEAVELOADINGADDSID,
	CCODE,
	CLOADINGNAME,
	IRATETYPEID,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LOADING_HISTORY as

with
    leave_hist as (
        select
            IDLOADING,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LOADING_HISTORY as h
        group by all
    )

select
	p.IDLOADING,
	p.FLOADINGPERCENT,
	p.FMAXLOADING,
	p.ILEAVELOADINGADDSID,
	p.CCODE,
	p.CLOADINGNAME,
	p.IRATETYPEID,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLLEAVELOADING as p
    left join leave_hist as h on
        p.IDLOADING = h.IDLOADING
        
where
    h.IDLOADING is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LONG_SERVICE_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_LEAVE_LONG_SERVICE_HISTORY table from the Micropay _IPTBLLONGSERVICELEAVE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LONG_SERVICE_HISTORY (
	IDLEAVE,
	IENTITLEMENTSEVERY,
	FENTITLEMENT,
	IENTITLEMENTUNITS,
	IPRORATAEVERY,
	CPORTLSLPAYCOMPONENTS,
	ITERMPAYOUT,
	CHOURTYPES,
	ILEAVETYPE,
	CUDLEAVECLASS,
	BPORTABLE,
	CDESCRIPTION,
	CADDITIONS,
	COTHERLEAVEREASONS,
	IENTITLEMENTPERIODUNITS,
	FACCRUALRATE,
	CPORTLSLUDLEAVECLASS,
	IPRORATAPERIODUNITS,
	INEXTLEAVE,
	CPORTLSLADDITIONS,
	CCODE,
	BHOURLY,
	BCOSTSPLIT,
	IREPEATPRORATA,
	CPORTLSLOTHERLEAVEREASONS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LONG_SERVICE_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LONG_SERVICE_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
	p.IENTITLEMENTSEVERY,
	p.FENTITLEMENT,
	p.IENTITLEMENTUNITS,
	p.IPRORATAEVERY,
	p.CPORTLSLPAYCOMPONENTS,
	p.ITERMPAYOUT,
	p.CHOURTYPES,
	p.ILEAVETYPE,
	p.CUDLEAVECLASS,
	p.BPORTABLE,
	p.CDESCRIPTION,
	p.CADDITIONS,
	p.COTHERLEAVEREASONS,
	p.IENTITLEMENTPERIODUNITS,
	p.FACCRUALRATE,
	p.CPORTLSLUDLEAVECLASS,
	p.IPRORATAPERIODUNITS,
	p.INEXTLEAVE,
	p.CPORTLSLADDITIONS,
	p.CCODE,
	p.BHOURLY,
	p.BCOSTSPLIT,
	p.IREPEATPRORATA,
	p.CPORTLSLOTHERLEAVEREASONS,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLLONGSERVICELEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_SICK_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_LEAVE_SICK_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_SICK_HISTORY (
	IDLEAVE,
	CADDITIONS,
	IENTITLEMENTPERIODUNITS,
	ILEAVETYPE,
	IMAXPERIODUNITS,
	IACCRUALUNITS,
	CCODE,
	IENTITLEMENTUNITS,
	IACCRUALPERIODUNITS,
	CDESCRIPTION,
	ICLASSIFICATIONTYPE,
	IACCRUALEVERY,
	IENTITLEMENTSEVERY,
	BPAYOUTONTERMINATION,
	BCOSTSPLIT,
	INEXTLEAVE,
	BHOURLY,
	BAPPLYHALFACCRUAL,
	CHOURTYPES,
	CUDLEAVECLASS,
	COTHERLEAVEREASONS,
	FACCRUAL,
	FMAXACCRUAL,
	IACCUMULATEENTITLEMENTS,
	FACCRUALRATE,
	FENTITLEMENT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_SICK_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_SICK_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
	p.CADDITIONS,
	p.IENTITLEMENTPERIODUNITS,
	p.ILEAVETYPE,
	p.IMAXPERIODUNITS,
	p.IACCRUALUNITS,
	p.CCODE,
	p.IENTITLEMENTUNITS,
	p.IACCRUALPERIODUNITS,
	p.CDESCRIPTION,
	p.ICLASSIFICATIONTYPE,
	p.IACCRUALEVERY,
	p.IENTITLEMENTSEVERY,
	p.BPAYOUTONTERMINATION,
	p.BCOSTSPLIT,
	p.INEXTLEAVE,
	p.BHOURLY,
	p.BAPPLYHALFACCRUAL,
	p.CHOURTYPES,
	p.CUDLEAVECLASS,
	p.COTHERLEAVEREASONS,
	p.FACCRUAL,
	p.FMAXACCRUAL,
	p.IACCUMULATEENTITLEMENTS,
	p.FACCRUALRATE,
	p.FENTITLEMENT,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLSICKLEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_USER_DEFINED_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_LEAVE_USER_DEFINED_HISTORY table from the Micropay _IPTBLUSERDEFINEDLEAVE table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_USER_DEFINED_HISTORY (
	IDLEAVE,
	IENTITLEMENTPERIODUNITS,
	IENTITLEMENTUNITS,
	IMAXPERIODUNITS,
	INEXTLEAVE,
	CCODE,
	FENTITLEMENT,
	IPRORATAEVERY,
	ILEAVETYPE,
	IPRORATAPERIODUNITS,
	ITERMINATIONPAYOUT,
	FACCRUALRATE,
	CADDITIONS,
	FPRORATA,
	COTHERLEAVEREASONS,
	BCOSTSPLIT,
	FMAXACCRUAL,
	DSTANDARDENTDATE,
	IACCUMULATEENTITLEMENTS,
	IMETHOD,
	CHOURTYPES,
	CUDLEAVECLASS,
	IENTITLEMENTSEVERY,
	ITERMINATIONPAYMENTTYPE,
	IPRORATAUNITS,
	IINCLUDEONPAYADVICE,
	CDESCRIPTION,
	CBALANCEDESCRIPTION,
	BPAYOUTONTERMINATION,
	BCREDITATENDOFPERIOD,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_USER_DEFINED_HISTORY as

with
    leave_hist as (
        select
            IDLEAVE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_USER_DEFINED_HISTORY as h
        group by all
    )

select
	p.IDLEAVE,
	p.IENTITLEMENTPERIODUNITS,
	p.IENTITLEMENTUNITS,
	p.IMAXPERIODUNITS,
	p.INEXTLEAVE,
	p.CCODE,
	p.FENTITLEMENT,
	p.IPRORATAEVERY,
	p.ILEAVETYPE,
	p.IPRORATAPERIODUNITS,
	p.ITERMINATIONPAYOUT,
	p.FACCRUALRATE,
	p.CADDITIONS,
	p.FPRORATA,
	p.COTHERLEAVEREASONS,
	p.BCOSTSPLIT,
	p.FMAXACCRUAL,
	p.DSTANDARDENTDATE,
	p.IACCUMULATEENTITLEMENTS,
	p.IMETHOD,
	p.CHOURTYPES,
	p.CUDLEAVECLASS,
	p.IENTITLEMENTSEVERY,
	p.ITERMINATIONPAYMENTTYPE,
	p.IPRORATAUNITS,
	p.IINCLUDEONPAYADVICE,
	p.CDESCRIPTION,
	p.CBALANCEDESCRIPTION,
	p.BPAYOUTONTERMINATION,
	p.BCREDITATENDOFPERIOD,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLUSERDEFINEDLEAVE as p
    left join leave_hist as h on
        p.IDLEAVE = h.IDLEAVE
        
where
    h.IDLEAVE is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_CONTRACT_HOUR_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_WORKER_CONTRACT_HOUR_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_CONTRACT_HOUR_HISTORY (
    IDCONTRACTHOURS,
    CCODE,
    FDAYSPERWEEK,
    FHOURSPERDAY,
    CDESCRIPTION,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_CONTRACT_HOUR_HISTORY as

with
    leave_hist as (
        select
            IDCONTRACTHOURS,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_CONTRACT_HOUR_HISTORY as h
        group by all
    )

select
    p.IDCONTRACTHOURS,
    p.CCODE,
    p.FDAYSPERWEEK,
    p.FHOURSPERDAY,
    p.CDESCRIPTION,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END      -- TODO-LATER: change this calculation fo a function

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCONTRACTHOURS as p
    left join leave_hist as h on
        p.IDCONTRACTHOURS = h.IDCONTRACTHOURS
        
where
    h.IDCONTRACTHOURS is null                                -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 0 3 * * * Australia/Sydney'
	COMMENT='Creates the PAYROLL_WEEKLY_WORKER_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_HISTORY (
    IDEMPLOYEE,
	FOTHERINCOME,
	DVARIATIONDATE,
	DANNUALPOSTENTDATE,
	UFEEANNRATE,
	BHALFSICKGRANTSICK,
	DANNUALISEDANNIVERSARYDATE,
	ILONGSERVICELEAVECLASSID,
	IPAYERGROUPID,
	IPAYPOINTID,
	DEXTRALEAVETAKENDATE,
	IETPPAYSUMMARY,
	FDATESERVICEHOURS,
	CFIRSTNAME,
	FNORMALHOURS,
	UCEEGENDESC2,
	BSUSPENDLSLENT,
	IHALFSICKLEAVECLASSID,
	CADDRESS1,
	DSUSPENDHALFSLFROM,
	IEMPLOYMENTTYPEID,
	IQUALIFYINGALLOWANCE,
	FNZSTUDENTLOANCIRTAXRATE,
	CSURNAME,
	ISTP2INCOMETYPE,
	FPUBLICHOLIDAYTAKENHOURS,
	BSUSPENDANNUALENT,
	FTERMPREJUL83,
	FEXEMPTFRINGEBENEFIT,
	CPOSTALADD1,
	BKIWISAVERNEWMEMBER,
	BSUSPENDSICKENT,
	DSUSPENDHALFSLTO,
	ISICKLEAVECLASSID,
	CPREFERREDNAME,
	FANNUALYEARTODATELOADING,
	DSUSPENDPUBLICFROM,
	BMEDICAREEXEMPTION,
	BKIWISAVERISNEWEMPLOYEE,
	IBASISOFPAYMENT,
	CTELEPHONE1,
	FPUBLICHOLIDAYENTHOURS,
	IAUTOPAYTYPE,
	FTERMLUMPSUMD,
	FNZSTUDENTLOANTAXRATE,
	FMINPAYLIMIT,
	FTERMPOSTJUN94,
	FAUTOPAYAMOUNT,
	IPUBLICHOLIDAYID,
	DSUSPENDLSLTO,
	IHIREDPERIODID,
	DKIWISAVEROPTOUTDATE,
	FNZTAXRATE,
	IPAYROLLTAXID,
	IJOBCLASSIFICATIONID,
	FHALFSICKTOTALENT,
	BSUPPRESSFROMSTP,
	DSICKPROENTDATE,
	UCEEPAYADVICEMESSAGE,
	FNORMALRATE,
	CABN,
	IGENERATEAUTOPAY,
	FTOTALREBATES,
	UCEECOMPANY,
	FSICKTOTALENT,
	BPUBLICHOLIDAYCREDIT,
	IPRINTPAYSUMMARY,
	ISTP2ATODEFINED,
	DHALFSICKACTUALENTDATE,
	DSUSPENDSLFROM,
	IANNUALNONENTPERIOD,
	FOTHERRATE,
	IANNUALLEAVECOSTACCID,
	FAWARDRATE,
	FSICKTAKENHOURS,
	FTIMEHALFRATE,
	DDATEPAYSUMMARY,
	IANNUALLEAVELOADINGCLASSID,
	DSUSPENDLSLFROM,
	DSUSPENDALTO,
	BNZSTUDENTLOAN,
	IMEDICARESURCHARGEPERCENT,
	CADDRESS2,
	DNZPAYDAYEDLASTEXPORTDATE,
	FLOADINGATDPENALTIESUNPAID,
	DSUSPENDALFROM,
	FANNUALLEAVETAKENHOURS,
	UCEESITE,
	BDAILYTAXING,
	DLONGSERVICEPOSTPRODATE,
	CPOSTALADD2,
	DHALFSICKPROENTDATE,
	FREPORTFRINGEBENEFIT,
	ICLIMATICID,
	ULEETERMREASON,
	FSPECIFYTAXRATE,
	UCEEPAYRULE,
	ISTP2COUNTRYID,
	FAWARDHOURS,
	DSUSPENDSLTO,
	IPAYMETHODID,
	IPOSTALCOUNTRYID,
	DHALFSICKLEAVETAKENDATE,
	BESPTIMESHEET,
	IMARITALSTATUSID,
	ISICKNONENTMONTHS,
	IDEFAULTCOSTACCOUNT,
	FANNUALPOSTPROHOURS,
	CTELEPHONE2,
	IHALFSICKCOSTACCID,
	CSTP2TAXTREATMENT,
	IHECSSFSSDEBT,
	IPOSTALSTATEID,
	BNOTAXFREE,
	DEXTRALEAVEENTDATE,
	BSICKNONENTMET,
	BNZSTUDENTLOANBOR,
	FLONGSERVICELEAVETAKENHOURS,
	FANNUALPREENTHOURS,
	FTERMPOSTJUN83TAX,
	DPUBLICHOLIDAYPRODATE,
	BAUSRESIDENT,
	FLOADINGYTD,
	UCEELEGACY,
	ITAXSCALEID,
	UCEESUPERVISOR,
	BSTP2SEASONALWORKER,
	IRATEINCREASECODE,
	BGOTONEXTPAYCLASS,
	DKIWISAVEROPTOUTREPORTEDDATE,
	FTERMPOSTJUN83,
	BISANNUALISEDSALARY,
	DPUBLICHOLIDAYENTDATE,
	BTFN,
	FLOADINGATDUNPAID,
	BLONGSERVICEFIRSTENTPERIOD,
	ITFNFORSUPER,
	FHALFSICKPROENTHOURS,
	ICONTRACTHOURSID,
    CONTRACT_HOUR_FIVETRAN_SYNCED,
	IPAYCLASSID,
	FEXTRALEAVEPRO,
	FCUMULATIVEHOURS,
	CMIDDLENAME,
	FLOADINGATDPENALTIESPAID,
	FLONGSERVICEPREENTHOURS,
	FLONGSERVICEPOSTPROHOURS,
	UCEEMGRNAME,
	FEXTRALEAVETAKEN,
	UCEECOSTCENTRE,
	FMAXPAYLIMIT,
	IKIWISAVERENROLOPTID,
	DTERMRETIREDATE,
	DTERMINATIONDATE,
	UCEEMGRNUMBER,
	IEARNINGSTYPEID,
	FANNUALPOSTENTHOURS,
	ICHANGEAGENTID,
	ISTATEID,
	BJOBMAKER,
	BOTHERREBATES,
	FSICKACTUALENTHOURS,
	DLONGSERVICELEAVETAKENDATE,
	FDOUBLERATE,
	DRECOMMENCEDATE,
	BHALFSICKNONENTMET,
	IWORKPLANNERID,
	CKIWISAVERELIGIBILITY,
	DPUBLICHOLIDAYTAKENDATE,
	BNZEXCLUDEFROMEMS,
	CTAXSCALECODE,
	UCEEBADGE,
	BSUSPENDNEXTAUTOPAY,
	ITERMINATIONREASONID,
	IWORKMANSCOMPID,
	IANNUALLEAVECLASSID,
	IEXTRALEAVEID,
	ILONGSERVICECOSTACCID,
	FHALFSICKTAKENHOURS,
	CEMPCODE,
	CIRDEMPLOYEENAME,
	CPOSTALPOSTALCODE,
	ILOADINGCLASSID,
	DSTARTPAYSUMMARY,
	FLONGSERVICEPRE78ENTHOURS,
	DTFNDATESIGNED,
	BISCLOSELYHELDPAYEE,
	BISAWARDBASED,
	IADVICEDELIVERYMETHOD,
	INZSTUDENTLOANBORTYPE,
	UCEEGENDESC1,
	FLONGSERVICEPOSTENTHOURS,
	BESPWORKGROUP,
	UCEELEAVEGROUP,
	BFAMILYTAXBENEFIT,
	BWORKINGHOLIDAYMAKER,
	ILOCATIONID,
	DKIWISAVERNEWMEMBERREPORTEDDATE,
	CKIWISAVEROPTOUTFLAG,
	IKIWISAVERSTATUS,
	IDOUBLERATEFACTOR,
	FSICKPROENTHOURS,
	BTERMINATED,
	IDEFAULTEMAIL,
	BMEDICAREREDUCTION,
	CKIWISAVERLATEOPTOUTREASON,
	FYEARLYSALARY,
	ITIMEHALFRATEFACTOR,
	CKIWISAVERNEWEMPSTATUS,
	CKIWISAVERLATEOPTOUTOTHERREASON,
	DHIREDDATE,
	ISICKCOSTACCID,
	DSUSPENDPUBLICTO,
	FLOADINGATDPAID,
	FEXTRALEAVEENT,
	UCEEPOSSTART,
	CTFN,
	IHALFSICKNONENTMONTHS,
	INUMBERCHILDREN,
	DANNUALLEAVETAKENDATE,
	BCIRRATE,
	BMEDICARESURCHARGE,
	FEXTRALEAVESHIFTS,
	IABORIGINALTORRESSTRAIT,
	BJOBKEEPER,
	ITERMINATEDPERIODID,
	UCEEUCEECONTRACTS,
	DSICKACTUALENTDATE,
	ITIMESHEETOPTION,
	IDEATHTYPEID,
	CPOSTCODE,
	FNONCASHBENEFIT,
	UCEEDIVISION,
	CREFERENCENUMBER,
	IGENDERID,
	BSUSPENDHALFSICKENT,
	DLONGSERVICEPOSTENTDATE,
	DDATEOFBIRTH,
	DEXTRALEAVEPRODATE,
	IPAYMENTTYPEID,
	BNZWITHHOLDINGTAX,
	FNZSTUDENTLOANBORTAXRATE,
	UCEEEESHIFTACT,
	BSTP2ISFEIEMPLOYEE,
	ICOUNTRYID,
	DSICKLEAVETAKENDATE,
	IPAYFREQUENCYID,
	BNZSTUDENTLOANCIR,
	BSICKGRANTSICK,
	FTERMAVGNORMALGROSS,
	DANNUALPOSTPRODATE,
	BSUSPENDPUBLICENT,
	ISTP2CESSATIONREASON,
	ITITLEID,
	UCEEPROCENT,
	BNZSPECIFYSLRATE,
	FHALFSICKACTUALENTHOURS,
	FPUBLICHOLIDAYPROHOURS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

-- create or replace table BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_HISTORY as

with
    leave_hist as (
        select
            IDEMPLOYEE,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_HISTORY as h
        group by all
    )

select
    p.IDEMPLOYEE,
	p.FOTHERINCOME,
	p.DVARIATIONDATE,
	p.DANNUALPOSTENTDATE,
	p.UFEEANNRATE,
	p.BHALFSICKGRANTSICK,
	p.DANNUALISEDANNIVERSARYDATE,
	p.ILONGSERVICELEAVECLASSID,
	p.IPAYERGROUPID,
	p.IPAYPOINTID,
	p.DEXTRALEAVETAKENDATE,
	p.IETPPAYSUMMARY,
	p.FDATESERVICEHOURS,
	p.CFIRSTNAME,
	p.FNORMALHOURS,
	p.UCEEGENDESC2,
	p.BSUSPENDLSLENT,
	p.IHALFSICKLEAVECLASSID,
	p.CADDRESS1,
	p.DSUSPENDHALFSLFROM,
	p.IEMPLOYMENTTYPEID,
	p.IQUALIFYINGALLOWANCE,
	p.FNZSTUDENTLOANCIRTAXRATE,
	p.CSURNAME,
	p.ISTP2INCOMETYPE,
	p.FPUBLICHOLIDAYTAKENHOURS,
	p.BSUSPENDANNUALENT,
	p.FTERMPREJUL83,
	p.FEXEMPTFRINGEBENEFIT,
	p.CPOSTALADD1,
	p.BKIWISAVERNEWMEMBER,
	p.BSUSPENDSICKENT,
	p.DSUSPENDHALFSLTO,
	p.ISICKLEAVECLASSID,
	p.CPREFERREDNAME,
	p.FANNUALYEARTODATELOADING,
	p.DSUSPENDPUBLICFROM,
	p.BMEDICAREEXEMPTION,
	p.BKIWISAVERISNEWEMPLOYEE,
	p.IBASISOFPAYMENT,
	p.CTELEPHONE1,
	p.FPUBLICHOLIDAYENTHOURS,
	p.IAUTOPAYTYPE,
	p.FTERMLUMPSUMD,
	p.FNZSTUDENTLOANTAXRATE,
	p.FMINPAYLIMIT,
	p.FTERMPOSTJUN94,
	p.FAUTOPAYAMOUNT,
	p.IPUBLICHOLIDAYID,
	p.DSUSPENDLSLTO,
	p.IHIREDPERIODID,
	p.DKIWISAVEROPTOUTDATE,
	p.FNZTAXRATE,
	p.IPAYROLLTAXID,
	p.IJOBCLASSIFICATIONID,
	p.FHALFSICKTOTALENT,
	p.BSUPPRESSFROMSTP,
	p.DSICKPROENTDATE,
	p.UCEEPAYADVICEMESSAGE,
	p.FNORMALRATE,
	p.CABN,
	p.IGENERATEAUTOPAY,
	p.FTOTALREBATES,
	p.UCEECOMPANY,
	p.FSICKTOTALENT,
	p.BPUBLICHOLIDAYCREDIT,
	p.IPRINTPAYSUMMARY,
	p.ISTP2ATODEFINED,
	p.DHALFSICKACTUALENTDATE,
	p.DSUSPENDSLFROM,
	p.IANNUALNONENTPERIOD,
	p.FOTHERRATE,
	p.IANNUALLEAVECOSTACCID,
	p.FAWARDRATE,
	p.FSICKTAKENHOURS,
	p.FTIMEHALFRATE,
	p.DDATEPAYSUMMARY,
	p.IANNUALLEAVELOADINGCLASSID,
	p.DSUSPENDLSLFROM,
	p.DSUSPENDALTO,
	p.BNZSTUDENTLOAN,
	p.IMEDICARESURCHARGEPERCENT,
	p.CADDRESS2,
	p.DNZPAYDAYEDLASTEXPORTDATE,
	p.FLOADINGATDPENALTIESUNPAID,
	p.DSUSPENDALFROM,
	p.FANNUALLEAVETAKENHOURS,
	p.UCEESITE,
	p.BDAILYTAXING,
	p.DLONGSERVICEPOSTPRODATE,
	p.CPOSTALADD2,
	p.DHALFSICKPROENTDATE,
	p.FREPORTFRINGEBENEFIT,
	p.ICLIMATICID,
	p.ULEETERMREASON,
	p.FSPECIFYTAXRATE,
	p.UCEEPAYRULE,
	p.ISTP2COUNTRYID,
	p.FAWARDHOURS,
	p.DSUSPENDSLTO,
	p.IPAYMETHODID,
	p.IPOSTALCOUNTRYID,
	p.DHALFSICKLEAVETAKENDATE,
	p.BESPTIMESHEET,
	p.IMARITALSTATUSID,
	p.ISICKNONENTMONTHS,
	p.IDEFAULTCOSTACCOUNT,
	p.FANNUALPOSTPROHOURS,
	p.CTELEPHONE2,
	p.IHALFSICKCOSTACCID,
	p.CSTP2TAXTREATMENT,
	p.IHECSSFSSDEBT,
	p.IPOSTALSTATEID,
	p.BNOTAXFREE,
	p.DEXTRALEAVEENTDATE,
	p.BSICKNONENTMET,
	p.BNZSTUDENTLOANBOR,
	p.FLONGSERVICELEAVETAKENHOURS,
	p.FANNUALPREENTHOURS,
	p.FTERMPOSTJUN83TAX,
	p.DPUBLICHOLIDAYPRODATE,
	p.BAUSRESIDENT,
	p.FLOADINGYTD,
	p.UCEELEGACY,
	p.ITAXSCALEID,
	p.UCEESUPERVISOR,
	p.BSTP2SEASONALWORKER,
	p.IRATEINCREASECODE,
	p.BGOTONEXTPAYCLASS,
	p.DKIWISAVEROPTOUTREPORTEDDATE,
	p.FTERMPOSTJUN83,
	p.BISANNUALISEDSALARY,
	p.DPUBLICHOLIDAYENTDATE,
	p.BTFN,
	p.FLOADINGATDUNPAID,
	p.BLONGSERVICEFIRSTENTPERIOD,
	p.ITFNFORSUPER,
	p.FHALFSICKPROENTHOURS,
	p.ICONTRACTHOURSID,
    ch._FIVETRAN_SYNCED as CONTRACT_HOUR_FIVETRAN_SYNCED,
	p.IPAYCLASSID,
	p.FEXTRALEAVEPRO,
	p.FCUMULATIVEHOURS,
	p.CMIDDLENAME,
	p.FLOADINGATDPENALTIESPAID,
	p.FLONGSERVICEPREENTHOURS,
	p.FLONGSERVICEPOSTPROHOURS,
	p.UCEEMGRNAME,
	p.FEXTRALEAVETAKEN,
	p.UCEECOSTCENTRE,
	p.FMAXPAYLIMIT,
	p.IKIWISAVERENROLOPTID,
	p.DTERMRETIREDATE,
	p.DTERMINATIONDATE,
	p.UCEEMGRNUMBER,
	p.IEARNINGSTYPEID,
	p.FANNUALPOSTENTHOURS,
	p.ICHANGEAGENTID,
	p.ISTATEID,
	p.BJOBMAKER,
	p.BOTHERREBATES,
	p.FSICKACTUALENTHOURS,
	p.DLONGSERVICELEAVETAKENDATE,
	p.FDOUBLERATE,
	p.DRECOMMENCEDATE,
	p.BHALFSICKNONENTMET,
	p.IWORKPLANNERID,
	p.CKIWISAVERELIGIBILITY,
	p.DPUBLICHOLIDAYTAKENDATE,
	p.BNZEXCLUDEFROMEMS,
	p.CTAXSCALECODE,
	p.UCEEBADGE,
	p.BSUSPENDNEXTAUTOPAY,
	p.ITERMINATIONREASONID,
	p.IWORKMANSCOMPID,
	p.IANNUALLEAVECLASSID,
	p.IEXTRALEAVEID,
	p.ILONGSERVICECOSTACCID,
	p.FHALFSICKTAKENHOURS,
	p.CEMPCODE,
	p.CIRDEMPLOYEENAME,
	p.CPOSTALPOSTALCODE,
	p.ILOADINGCLASSID,
	p.DSTARTPAYSUMMARY,
	p.FLONGSERVICEPRE78ENTHOURS,
	p.DTFNDATESIGNED,
	p.BISCLOSELYHELDPAYEE,
	p.BISAWARDBASED,
	p.IADVICEDELIVERYMETHOD,
	p.INZSTUDENTLOANBORTYPE,
	p.UCEEGENDESC1,
	p.FLONGSERVICEPOSTENTHOURS,
	p.BESPWORKGROUP,
	p.UCEELEAVEGROUP,
	p.BFAMILYTAXBENEFIT,
	p.BWORKINGHOLIDAYMAKER,
	p.ILOCATIONID,
	p.DKIWISAVERNEWMEMBERREPORTEDDATE,
	p.CKIWISAVEROPTOUTFLAG,
	p.IKIWISAVERSTATUS,
	p.IDOUBLERATEFACTOR,
	p.FSICKPROENTHOURS,
	p.BTERMINATED,
	p.IDEFAULTEMAIL,
	p.BMEDICAREREDUCTION,
	p.CKIWISAVERLATEOPTOUTREASON,
	p.FYEARLYSALARY,
	p.ITIMEHALFRATEFACTOR,
	p.CKIWISAVERNEWEMPSTATUS,
	p.CKIWISAVERLATEOPTOUTOTHERREASON,
	p.DHIREDDATE,
	p.ISICKCOSTACCID,
	p.DSUSPENDPUBLICTO,
	p.FLOADINGATDPAID,
	p.FEXTRALEAVEENT,
	p.UCEEPOSSTART,
	p.CTFN,
	p.IHALFSICKNONENTMONTHS,
	p.INUMBERCHILDREN,
	p.DANNUALLEAVETAKENDATE,
	p.BCIRRATE,
	p.BMEDICARESURCHARGE,
	p.FEXTRALEAVESHIFTS,
	p.IABORIGINALTORRESSTRAIT,
	p.BJOBKEEPER,
	p.ITERMINATEDPERIODID,
	p.UCEEUCEECONTRACTS,
	p.DSICKACTUALENTDATE,
	p.ITIMESHEETOPTION,
	p.IDEATHTYPEID,
	p.CPOSTCODE,
	p.FNONCASHBENEFIT,
	p.UCEEDIVISION,
	p.CREFERENCENUMBER,
	p.IGENDERID,
	p.BSUSPENDHALFSICKENT,
	p.DLONGSERVICEPOSTENTDATE,
	p.DDATEOFBIRTH,
	p.DEXTRALEAVEPRODATE,
	p.IPAYMENTTYPEID,
	p.BNZWITHHOLDINGTAX,
	p.FNZSTUDENTLOANBORTAXRATE,
	p.UCEEEESHIFTACT,
	p.BSTP2ISFEIEMPLOYEE,
	p.ICOUNTRYID,
	p.DSICKLEAVETAKENDATE,
	p.IPAYFREQUENCYID,
	p.BNZSTUDENTLOANCIR,
	p.BSICKGRANTSICK,
	p.FTERMAVGNORMALGROSS,
	p.DANNUALPOSTPRODATE,
	p.BSUSPENDPUBLICENT,
	p.ISTP2CESSATIONREASON,
	p.ITITLEID,
	p.UCEEPROCENT,
	p.BNZSPECIFYSLRATE,
	p.FHALFSICKACTUALENTHOURS,
	p.FPUBLICHOLIDAYPROHOURS,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END      -- TODO-LATER: change this calculation fo a function

from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYEE as p

    -- joins to get the corresponding version of the related tables
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCONTRACTHOURS as ch on
        p.ICONTRACTHOURSID = ch.IDCONTRACTHOURS
    
    left join leave_hist as h on
        p.IDEMPLOYEE = h.IDEMPLOYEE
        
where
    h.IDEMPLOYEE is null                                -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;
create or replace task BEGA_HR_DATA_{{ env }}.RAW_HISTORY.POSITION_HISTORY_BUILDER
	warehouse=COMPUTE_WH
	schedule='USING CRON 30 4 * * * Australia/Sydney'
	COMMENT='Creates the POSITION_HISTORY table from the POSITION table in a incremental manner'
	as insert into BEGA_HR_DATA_{{ env }}.RAW_HISTORY.POSITION_HISTORY (
    ID,
	SUPERVISORY_ORGANIZATION_ID,
	EFFECTIVE_DATE,
	POSITION_CODE,
	JOB_POSTING_TITLE,
	ACADEMIC_TENURE_ELIGIBLE,
	JOB_DESCRIPTION_SUMMARY,
	JOB_DESCRIPTION,
	AVAILABLE_FOR_HIRE,
	AVAILABLE_FOR_RECRUITING,
	HIRING_FREEZE,
	WORK_SHIFT_REQUIRED,
	AVAILABLE_FOR_OVERLAP,
	EARLIEST_OVERLAP_DATE,
	CRITICAL_JOB,
	DIFFICULTY_TO_FILL_CODE,
	AVAILABILITY_DATE,
	EARLIEST_HIRE_DATE,
	WORKER_TYPE_CODE,
	POSITION_TIME_TYPE_CODE,
	PRIMARY_COMPENSATION_BASIS,
	PRIMARY_COMPENSATION_BASIS_AMOUNT_CHANGE,
	PRIMARY_COMPENSATION_BASIS_PERCENT_CHANGE,
	COMPENSATION_PACKAGE_CODE,
	COMPENSATION_GRADE_CODE,
	COMPENSATION_GRADE_PROFILE_CODE,
	COMPENSATION_STEP_CODE,
	WORKER_FOR_FILLED_POSITION_ID,
	WORKER_POSITION_ID,
	CLOSED,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
    )

with
    pos_hist as (
        select
            ID,
            max(_FIVETRAN_SYNCED) as MAX_FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.POSITION_HISTORY as h
        group by all
    )

select
    p.ID,
	p.SUPERVISORY_ORGANIZATION_ID,
	p.EFFECTIVE_DATE,
	p.POSITION_CODE,
	p.JOB_POSTING_TITLE,
	p.ACADEMIC_TENURE_ELIGIBLE,
	p.JOB_DESCRIPTION_SUMMARY,
	p.JOB_DESCRIPTION,
	p.AVAILABLE_FOR_HIRE,
	p.AVAILABLE_FOR_RECRUITING,
	p.HIRING_FREEZE,
	p.WORK_SHIFT_REQUIRED,
	p.AVAILABLE_FOR_OVERLAP,
	p.EARLIEST_OVERLAP_DATE,
	p.CRITICAL_JOB,
	p.DIFFICULTY_TO_FILL_CODE,
	p.AVAILABILITY_DATE,
	p.EARLIEST_HIRE_DATE,
	p.WORKER_TYPE_CODE,
	p.POSITION_TIME_TYPE_CODE,
	p.PRIMARY_COMPENSATION_BASIS,
	p.PRIMARY_COMPENSATION_BASIS_AMOUNT_CHANGE,
	p.PRIMARY_COMPENSATION_BASIS_PERCENT_CHANGE,
	p.COMPENSATION_PACKAGE_CODE,
	p.COMPENSATION_GRADE_CODE,
	p.COMPENSATION_GRADE_PROFILE_CODE,
	p.COMPENSATION_STEP_CODE,
	p.WORKER_FOR_FILLED_POSITION_ID,
	p.WORKER_POSITION_ID,
	p.CLOSED,
    p._FIVETRAN_DELETED,
	p._FIVETRAN_SYNCED,
	TO_TIMESTAMP_TZ(
        dateadd(
            day, 
            -1, 
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_START,
	DATEADD(
        nanosecond, 
        -1, 
        TO_TIMESTAMP_TZ(
            TO_DATE(
                convert_timezone(
                    'Australia/Sydney', 
                    current_timestamp()
                    )
                )
            )
        ) as _FIVETRAN_END

from
    BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.POSITION as p
    left join pos_hist as h on
        p.ID = h.ID
        
where
    h.ID is null                                    -- first time
    or p._FIVETRAN_SYNCED > h.MAX_FIVETRAN_SYNCED;

create or replace schema BEGA_HR_DATA_{{ env }}.STAGING;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_COST_ACCOUNT_HISTORY(
	PAY_FREQUENCY_KEY,
	IDCOSTACCOUNT,
	CCOSTCODE,
	ILINK,
	IPOSITION,
	BACTIVE,
	CCODE,
	CDESCRIPTION,
	MAX_IPOSITION,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5('Weekly') as PAY_FREQUENCY_KEY,
    *
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_HISTORY
--
union
--
select
	md5('Fortnightly') as PAY_FREQUENCY_KEY,
	*
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_HISTORY
--
union
--
select
	md5('Monthly') as PAY_FREQUENCY_KEY,
	*
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_HISTORY

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_COST_ACCOUNT_STRUCTURE_HISTORY(
	PAY_FREQUENCY_KEY,
	IDCOSTACCSTRUCTURE,
	CSEPARATOR,
	CDESCRIPTION,
	ILENGTH,
	IPOSITION,
	CCODE,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5('Weekly') as PAY_FREQUENCY_KEY,
    *
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_COST_ACCOUNT_STRUCTURE_HISTORY
--
union
--
select
	md5('Fortnightly') as PAY_FREQUENCY_KEY,
	*
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_COST_ACCOUNT_STRUCTURE_HISTORY
--
union
--
select
	md5('Monthly') as PAY_FREQUENCY_KEY,
	*
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_COST_ACCOUNT_STRUCTURE_HISTORY

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_COST_CENTRE(
	COST_CENTRE_NAME,
	COST_CENTRE_ID,
	COST_CENTRE_CODE,
	COST_CENTRE_DESCRIPTION,
	VERSION_TIMESTAMP
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 

with 

fortnightly_eivCostAccounts_cte as (
select
	idCostAccount "Cost Account ID",
	cCostCode "Cost Account Code",
	cDescription "Cost Account Description",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTS
where
    bActive = 1 
    and iPosition = (
        select MAX(iPosition) 
        from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE
        )
),

monthly_eivCostAccounts_cte as (
select
	idCostAccount "Cost Account ID",
	cCostCode "Cost Account Code",
	cDescription "Cost Account Description",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCOSTACCOUNTS
where
    bActive = 1 
    and iPosition = (
        select MAX(iPosition) 
        from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE
        )
),

weekly_eivCostAccounts_cte as (
select
	idCostAccount "Cost Account ID",
	cCostCode "Cost Account Code",
	cDescription "Cost Account Description",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCOSTACCOUNTS
where
    bActive = 1 
    and iPosition = (
        select MAX(iPosition) 
        from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE
        )
),

cost_accounts_all as (
    select distinct
        "Cost Account Code" as COST_CENTRE_CODE,
        case when substr("Cost Account Code",15,7) between '0000000' and '9999999' then 
                case when substr("Cost Account Code",15,2) = '00' then substr("Cost Account Code",17,5) 
                else 
                    case when substr("Cost Account Code",15,1) = '0' then substr("Cost Account Code",16,6) 
                    else substr("Cost Account Code",15,7) 
                end 
            end 
        else substr("Cost Account Code",1,5) 
        end as COST_CENTRE,
        case when substr("Cost Account Description",1,5) between '00000' and '99999' then substr("Cost Account Description",7,50) 
        else "Cost Account Description" 
        end as COST_CENTRE_DESCRIPTION,
        VERSION_TIMESTAMP
    from
        fortnightly_eivCostAccounts_cte
    --
    union
    --
    select distinct
        "Cost Account Code" as COST_CENTRE_CODE,
        case when substr("Cost Account Code",15,7) between '0000000' and '9999999' then 
                case when substr("Cost Account Code",15,2) = '00' then substr("Cost Account Code",17,5) 
                else 
                    case when substr("Cost Account Code",15,1) = '0' then substr("Cost Account Code",16,6) 
                    else substr("Cost Account Code",15,7) 
                end 
            end 
        else substr("Cost Account Code",1,5) 
        end as COST_CENTRE,
        case when substr("Cost Account Description",1,5) between '00000' and '99999' then substr("Cost Account Description",7,50) 
        else "Cost Account Description" 
        end as COST_CENTRE_DESCRIPTION,
        VERSION_TIMESTAMP
    from
        monthly_eivCostAccounts_cte
    --
    union
    --
    select distinct
        "Cost Account Code" as COST_CENTRE_CODE,
        case when substr("Cost Account Code",15,7) between '0000000' and '9999999' then 
                case when substr("Cost Account Code",15,2) = '00' then substr("Cost Account Code",17,5) 
                else 
                    case when substr("Cost Account Code",15,1) = '0' then substr("Cost Account Code",16,6) 
                    else substr("Cost Account Code",15,7) 
                end 
            end 
        else substr("Cost Account Code",1,5) 
        end as COST_CENTRE,
        case when substr("Cost Account Description",1,5) between '00000' and '99999' then substr("Cost Account Description",7,50) 
        else "Cost Account Description" 
        end as COST_CENTRE_DESCRIPTION,
        VERSION_TIMESTAMP
    from
        weekly_eivCostAccounts_cte
)
,
cost_accounts_agg_all as (
    select 
        COST_CENTRE,
        max(COST_CENTRE_DESCRIPTION) as COST_CENTRE_DESCRIPTION, 
        max(VERSION_TIMESTAMP) as VERSION_TIMESTAMP 
    from 
        cost_accounts_all
    group by all
)
select
    concat(COST_CENTRE,' ',COST_CENTRE_DESCRIPTION) as COST_CENTRE_NAME,
    MD5(COST_CENTRE) as COST_CENTRE_ID,
    COST_CENTRE as COST_CENTRE_CODE,
    COST_CENTRE_DESCRIPTION as COST_CENTRE_DESCRIPTION,
    VERSION_TIMESTAMP
from cost_accounts_agg_all
group by all
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_EMPLOYMENT_TYPE(
	EMPLOYMENT_TYPE_ID,
	EMPLOYMENT_TYPE,
	VERSION_TIMESTAMP
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 

with 

fortnightly_eivEmploymentTypes_cte as (
select 
    idEmploymentType "Employment Type ID", 
    cEmploymentType "Employment Type",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYMENTTYPES
),

monthly_eivEmploymentTypes_cte as (
select 
    idEmploymentType "Employment Type ID", 
    cEmploymentType "Employment Type",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYMENTTYPES
),

weekly_eivEmploymentTypes_cte as (
select 
    idEmploymentType "Employment Type ID", 
    cEmploymentType "Employment Type",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYMENTTYPES
),

employment_types_all as (
    select distinct
        "Employment Type" as EMPLOYMENT_TYPE,
        VERSION_TIMESTAMP
    from
        fortnightly_eivEmploymentTypes_cte
    --
    union
    --
    select distinct
        "Employment Type" as EMPLOYMENT_TYPE,
        VERSION_TIMESTAMP
    from
        monthly_eivEmploymentTypes_cte
    --
    union
    --
    select distinct
        "Employment Type" as EMPLOYMENT_TYPE,
        VERSION_TIMESTAMP
    from
        weekly_eivEmploymentTypes_cte
)
,
employment_types_agg_all as (
    select 
        EMPLOYMENT_TYPE,
        max(VERSION_TIMESTAMP) as VERSION_TIMESTAMP 
    from 
        employment_types_all
    group by all
)
select
    MD5(EMPLOYMENT_TYPE) as EMPLOYMENT_TYPE_ID,
    EMPLOYMENT_TYPE as EMPLOYMENT_TYPE,
    VERSION_TIMESTAMP
from employment_types_agg_all
group by all
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_ANNUAL_HISTORY(
	PAY_FREQUENCY_KEY,
	IDLEAVE,
	BPUBLICHOLIDAY,
	FENTITLEMENT,
	IENTITLEMENTSEVERY,
	IPRORATAPERIODUNITS,
	IENTITLEMENTUNITS,
	ILEAVETYPE,
	FPRORATA,
	CHOURTYPES,
	IPRORATAUNITS,
	BCREDITATENDOFPERIOD,
	IPRORATAEVERY,
	CUDLEAVECLASS,
	BTERMADJUSTMENT,
	CDESCRIPTION,
	BHOURLY,
	CADDITIONS,
	IINCLUDELEAVELOADINGINTERM,
	COTHERLEAVEREASONS,
	IENTITLEMENTPERIODUNITS,
	FACCRUALRATE,
	INEXTLEAVE,
	CCODE,
	DSTANDARDENTDATE,
	BCOSTSPLIT,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5('Weekly') as PAY_FREQUENCY_KEY,
    IDLEAVE,
    BPUBLICHOLIDAY,
    FENTITLEMENT,
    IENTITLEMENTSEVERY,
    IPRORATAPERIODUNITS,
    IENTITLEMENTUNITS,
    ILEAVETYPE,
    FPRORATA,
    CHOURTYPES,
    IPRORATAUNITS,
    BCREDITATENDOFPERIOD,
    IPRORATAEVERY,
    CUDLEAVECLASS,
    BTERMADJUSTMENT,
    CDESCRIPTION,
    BHOURLY,
    CADDITIONS,
    IINCLUDELEAVELOADINGINTERM,
    COTHERLEAVEREASONS,
    IENTITLEMENTPERIODUNITS,
    FACCRUALRATE,
    INEXTLEAVE,
    CCODE,
    DSTANDARDENTDATE,
    BCOSTSPLIT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_ANNUAL_HISTORY
--
union
--
select
	md5('Fortnightly') as PAY_FREQUENCY_KEY,
    IDLEAVE,
    BPUBLICHOLIDAY,
    FENTITLEMENT,
    IENTITLEMENTSEVERY,
    IPRORATAPERIODUNITS,
    IENTITLEMENTUNITS,
    ILEAVETYPE,
    FPRORATA,
    CHOURTYPES,
    IPRORATAUNITS,
    BCREDITATENDOFPERIOD,
    IPRORATAEVERY,
    CUDLEAVECLASS,
    BTERMADJUSTMENT,
    CDESCRIPTION,
    BHOURLY,
    CADDITIONS,
    IINCLUDELEAVELOADINGINTERM,
    COTHERLEAVEREASONS,
    IENTITLEMENTPERIODUNITS,
    FACCRUALRATE,
    INEXTLEAVE,
    CCODE,
    DSTANDARDENTDATE,
    BCOSTSPLIT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_ANNUAL_HISTORY
--
union
--
select
	md5('Monthly') as PAY_FREQUENCY_KEY,
    IDLEAVE,
    BPUBLICHOLIDAY,
    FENTITLEMENT,
    IENTITLEMENTSEVERY,
    IPRORATAPERIODUNITS,
    IENTITLEMENTUNITS,
    ILEAVETYPE,
    FPRORATA,
    CHOURTYPES,
    IPRORATAUNITS,
    BCREDITATENDOFPERIOD,
    IPRORATAEVERY,
    CUDLEAVECLASS,
    BTERMADJUSTMENT,
    CDESCRIPTION,
    BHOURLY,
    CADDITIONS,
    IINCLUDELEAVELOADINGINTERM,
    COTHERLEAVEREASONS,
    IENTITLEMENTPERIODUNITS,
    FACCRUALRATE,
    INEXTLEAVE,
    CCODE,
    DSTANDARDENTDATE,
    BCOSTSPLIT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_ANNUAL_HISTORY

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_HISTORY(
	PAY_FREQUENCY_KEY,
	IDEMPLOYEELEAVE,
	FPOSTPROHOURS,
	BNONENTMET,
	ICOSTACCOUNTID,
	COST_ACCOUNT_FIVETRAN_SYNCED,
	FCURRENTACCRUALHOURS,
	DSUSPENDFROM,
	DCURRENTACCRUALDATE,
	DTAKENDATE,
	FTAKENHOURS,
	DPOSTENTDATE,
	IEMPLOYEEID,
	EMPLOYEE_FIVETRAN_SYNCED,
	BFIRSTENTPERIOD,
	FYEARTODATELOADING,
	FLEAVESHIFTS,
	FPREENTHOURS,
	ILEAVELOADINGCLASSID,
	LEAVE_LOADING_FIVETRAN_SYNCED,
	ICHANGEAGENTID,
	ILEAVETYPE,
	FPOSTENTHOURS,
	DPOSTPRODATE,
	DSUSPENDTO,
	BSUSPENDENT,
	FPRE78ENTHOURS,
	BGRANT,
	ILEAVECLASSID,
	SICK_LEAVE_FIVETRAN_SYNCED,
	ANNUAL_LEAVE_FIVETRAN_SYNCED,
	LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
	USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
	INONENTMONTHS,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
    md5('Weekly') as PAY_FREQUENCY_KEY,
    *
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_HISTORY
--
union
--
select
    md5('Fortnightly') as PAY_FREQUENCY_KEY,
    *
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_HISTORY
--
union
--
select
    md5('Monthly') as PAY_FREQUENCY_KEY,
    *
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_HISTORY

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_LOADING_HISTORY(
	PAY_FREQUENCY_KEY,
	IDLOADING,
	FLOADINGPERCENT,
	FMAXLOADING,
	ILEAVELOADINGADDSID,
	CCODE,
	CLOADINGNAME,
	IRATETYPEID,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5('Weekly') as PAY_FREQUENCY_KEY,
	IDLOADING,
	FLOADINGPERCENT,
	FMAXLOADING,
	ILEAVELOADINGADDSID,
	CCODE,
	CLOADINGNAME,
	IRATETYPEID,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LOADING_HISTORY
--
union
--
select
	md5('Fortnightly') as PAY_FREQUENCY_KEY,
	IDLOADING,
	FLOADINGPERCENT,
	FMAXLOADING,
	ILEAVELOADINGADDSID,
	CCODE,
	CLOADINGNAME,
	IRATETYPEID,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LOADING_HISTORY
--
union
--
select
	md5('Monthly') as PAY_FREQUENCY_KEY,
	IDLOADING,
	FLOADINGPERCENT,
	FMAXLOADING,
	ILEAVELOADINGADDSID,
	CCODE,
	CLOADINGNAME,
	IRATETYPEID,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LOADING_HISTORY

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_LONG_SERVICE_HISTORY(
	PAY_FREQUENCY_KEY,
	IDLEAVE,
	IENTITLEMENTSEVERY,
	FENTITLEMENT,
	IENTITLEMENTUNITS,
	IPRORATAEVERY,
	CPORTLSLPAYCOMPONENTS,
	ITERMPAYOUT,
	CHOURTYPES,
	ILEAVETYPE,
	CUDLEAVECLASS,
	BPORTABLE,
	CDESCRIPTION,
	CADDITIONS,
	COTHERLEAVEREASONS,
	IENTITLEMENTPERIODUNITS,
	FACCRUALRATE,
	CPORTLSLUDLEAVECLASS,
	IPRORATAPERIODUNITS,
	INEXTLEAVE,
	CPORTLSLADDITIONS,
	CCODE,
	BHOURLY,
	BCOSTSPLIT,
	IREPEATPRORATA,
	CPORTLSLOTHERLEAVEREASONS,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5('Weekly') as PAY_FREQUENCY_KEY,
	IDLEAVE,
	IENTITLEMENTSEVERY,
	FENTITLEMENT,
	IENTITLEMENTUNITS,
	IPRORATAEVERY,
	CPORTLSLPAYCOMPONENTS,
	ITERMPAYOUT,
	CHOURTYPES,
	ILEAVETYPE,
	CUDLEAVECLASS,
	BPORTABLE,
	CDESCRIPTION,
	CADDITIONS,
	COTHERLEAVEREASONS,
	IENTITLEMENTPERIODUNITS,
	FACCRUALRATE,
	CPORTLSLUDLEAVECLASS,
	IPRORATAPERIODUNITS,
	INEXTLEAVE,
	CPORTLSLADDITIONS,
	CCODE,
	BHOURLY,
	BCOSTSPLIT,
	IREPEATPRORATA,
	CPORTLSLOTHERLEAVEREASONS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_LONG_SERVICE_HISTORY
--
union
--
select
	md5('Fortnightly') as PAY_FREQUENCY_KEY,
	IDLEAVE,
	IENTITLEMENTSEVERY,
	FENTITLEMENT,
	IENTITLEMENTUNITS,
	IPRORATAEVERY,
	CPORTLSLPAYCOMPONENTS,
	ITERMPAYOUT,
	CHOURTYPES,
	ILEAVETYPE,
	CUDLEAVECLASS,
	BPORTABLE,
	CDESCRIPTION,
	CADDITIONS,
	COTHERLEAVEREASONS,
	IENTITLEMENTPERIODUNITS,
	FACCRUALRATE,
	CPORTLSLUDLEAVECLASS,
	IPRORATAPERIODUNITS,
	INEXTLEAVE,
	CPORTLSLADDITIONS,
	CCODE,
	BHOURLY,
	BCOSTSPLIT,
	IREPEATPRORATA,
	CPORTLSLOTHERLEAVEREASONS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_LONG_SERVICE_HISTORY
--
union
--
select
	md5('Monthly') as PAY_FREQUENCY_KEY,
	IDLEAVE,
	IENTITLEMENTSEVERY,
	FENTITLEMENT,
	IENTITLEMENTUNITS,
	IPRORATAEVERY,
	CPORTLSLPAYCOMPONENTS,
	ITERMPAYOUT,
	CHOURTYPES,
	ILEAVETYPE,
	CUDLEAVECLASS,
	BPORTABLE,
	CDESCRIPTION,
	CADDITIONS,
	COTHERLEAVEREASONS,
	IENTITLEMENTPERIODUNITS,
	FACCRUALRATE,
	CPORTLSLUDLEAVECLASS,
	IPRORATAPERIODUNITS,
	INEXTLEAVE,
	CPORTLSLADDITIONS,
	CCODE,
	BHOURLY,
	BCOSTSPLIT,
	IREPEATPRORATA,
	CPORTLSLOTHERLEAVEREASONS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_LONG_SERVICE_HISTORY

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_SICK_HISTORY(
	PAY_FREQUENCY_KEY,
	IDLEAVE,
	CADDITIONS,
	IENTITLEMENTPERIODUNITS,
	ILEAVETYPE,
	IMAXPERIODUNITS,
	IACCRUALUNITS,
	CCODE,
	IENTITLEMENTUNITS,
	IACCRUALPERIODUNITS,
	CDESCRIPTION,
	ICLASSIFICATIONTYPE,
	IACCRUALEVERY,
	IENTITLEMENTSEVERY,
	BPAYOUTONTERMINATION,
	BCOSTSPLIT,
	INEXTLEAVE,
	BHOURLY,
	BAPPLYHALFACCRUAL,
	CHOURTYPES,
	CUDLEAVECLASS,
	COTHERLEAVEREASONS,
	FACCRUAL,
	FMAXACCRUAL,
	IACCUMULATEENTITLEMENTS,
	FACCRUALRATE,
	FENTITLEMENT,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5('Weekly') as PAY_FREQUENCY_KEY,
	IDLEAVE,
	CADDITIONS,
	IENTITLEMENTPERIODUNITS,
	ILEAVETYPE,
	IMAXPERIODUNITS,
	IACCRUALUNITS,
	CCODE,
	IENTITLEMENTUNITS,
	IACCRUALPERIODUNITS,
	CDESCRIPTION,
	ICLASSIFICATIONTYPE,
	IACCRUALEVERY,
	IENTITLEMENTSEVERY,
	BPAYOUTONTERMINATION,
	BCOSTSPLIT,
	INEXTLEAVE,
	BHOURLY,
	BAPPLYHALFACCRUAL,
	CHOURTYPES,
	CUDLEAVECLASS,
	COTHERLEAVEREASONS,
	FACCRUAL,
	FMAXACCRUAL,
	IACCUMULATEENTITLEMENTS,
	FACCRUALRATE,
	FENTITLEMENT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_SICK_HISTORY
--
union
--
select
	md5('Fortnightly') as PAY_FREQUENCY_KEY,
	IDLEAVE,
	CADDITIONS,
	IENTITLEMENTPERIODUNITS,
	ILEAVETYPE,
	IMAXPERIODUNITS,
	IACCRUALUNITS,
	CCODE,
	IENTITLEMENTUNITS,
	IACCRUALPERIODUNITS,
	CDESCRIPTION,
	ICLASSIFICATIONTYPE,
	IACCRUALEVERY,
	IENTITLEMENTSEVERY,
	BPAYOUTONTERMINATION,
	BCOSTSPLIT,
	INEXTLEAVE,
	BHOURLY,
	BAPPLYHALFACCRUAL,
	CHOURTYPES,
	CUDLEAVECLASS,
	COTHERLEAVEREASONS,
	FACCRUAL,
	FMAXACCRUAL,
	IACCUMULATEENTITLEMENTS,
	FACCRUALRATE,
	FENTITLEMENT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_SICK_HISTORY
--
union
--
select
	md5('Monthly') as PAY_FREQUENCY_KEY,
	IDLEAVE,
	CADDITIONS,
	IENTITLEMENTPERIODUNITS,
	ILEAVETYPE,
	IMAXPERIODUNITS,
	IACCRUALUNITS,
	CCODE,
	IENTITLEMENTUNITS,
	IACCRUALPERIODUNITS,
	CDESCRIPTION,
	ICLASSIFICATIONTYPE,
	IACCRUALEVERY,
	IENTITLEMENTSEVERY,
	BPAYOUTONTERMINATION,
	BCOSTSPLIT,
	INEXTLEAVE,
	BHOURLY,
	BAPPLYHALFACCRUAL,
	CHOURTYPES,
	CUDLEAVECLASS,
	COTHERLEAVEREASONS,
	FACCRUAL,
	FMAXACCRUAL,
	IACCUMULATEENTITLEMENTS,
	FACCRUALRATE,
	FENTITLEMENT,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_SICK_HISTORY

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_USER_DEFINED_HISTORY(
	PAY_FREQUENCY_KEY,
	IDLEAVE,
	IENTITLEMENTPERIODUNITS,
	IENTITLEMENTUNITS,
	IMAXPERIODUNITS,
	INEXTLEAVE,
	CCODE,
	FENTITLEMENT,
	IPRORATAEVERY,
	ILEAVETYPE,
	IPRORATAPERIODUNITS,
	ITERMINATIONPAYOUT,
	FACCRUALRATE,
	CADDITIONS,
	FPRORATA,
	COTHERLEAVEREASONS,
	BCOSTSPLIT,
	FMAXACCRUAL,
	DSTANDARDENTDATE,
	IACCUMULATEENTITLEMENTS,
	IMETHOD,
	CHOURTYPES,
	CUDLEAVECLASS,
	IENTITLEMENTSEVERY,
	ITERMINATIONPAYMENTTYPE,
	IPRORATAUNITS,
	IINCLUDEONPAYADVICE,
	CDESCRIPTION,
	CBALANCEDESCRIPTION,
	BPAYOUTONTERMINATION,
	BCREDITATENDOFPERIOD,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5('Weekly') as PAY_FREQUENCY_KEY,
	IDLEAVE,
	IENTITLEMENTPERIODUNITS,
	IENTITLEMENTUNITS,
	IMAXPERIODUNITS,
	INEXTLEAVE,
	CCODE,
	FENTITLEMENT,
	IPRORATAEVERY,
	ILEAVETYPE,
	IPRORATAPERIODUNITS,
	ITERMINATIONPAYOUT,
	FACCRUALRATE,
	CADDITIONS,
	FPRORATA,
	COTHERLEAVEREASONS,
	BCOSTSPLIT,
	FMAXACCRUAL,
	DSTANDARDENTDATE,
	IACCUMULATEENTITLEMENTS,
	IMETHOD,
	CHOURTYPES,
	CUDLEAVECLASS,
	IENTITLEMENTSEVERY,
	ITERMINATIONPAYMENTTYPE,
	IPRORATAUNITS,
	IINCLUDEONPAYADVICE,
	CDESCRIPTION,
	CBALANCEDESCRIPTION,
	BPAYOUTONTERMINATION,
	BCREDITATENDOFPERIOD,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_LEAVE_USER_DEFINED_HISTORY
--
union
--
select
	md5('Fortnightly') as PAY_FREQUENCY_KEY,
	IDLEAVE,
	IENTITLEMENTPERIODUNITS,
	IENTITLEMENTUNITS,
	IMAXPERIODUNITS,
	INEXTLEAVE,
	CCODE,
	FENTITLEMENT,
	IPRORATAEVERY,
	ILEAVETYPE,
	IPRORATAPERIODUNITS,
	ITERMINATIONPAYOUT,
	FACCRUALRATE,
	CADDITIONS,
	FPRORATA,
	COTHERLEAVEREASONS,
	BCOSTSPLIT,
	FMAXACCRUAL,
	DSTANDARDENTDATE,
	IACCUMULATEENTITLEMENTS,
	IMETHOD,
	CHOURTYPES,
	CUDLEAVECLASS,
	IENTITLEMENTSEVERY,
	ITERMINATIONPAYMENTTYPE,
	IPRORATAUNITS,
	IINCLUDEONPAYADVICE,
	CDESCRIPTION,
	CBALANCEDESCRIPTION,
	BPAYOUTONTERMINATION,
	BCREDITATENDOFPERIOD,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_LEAVE_USER_DEFINED_HISTORY
--
union
--
select
	md5('Monthly') as PAY_FREQUENCY_KEY,
	IDLEAVE,
	IENTITLEMENTPERIODUNITS,
	IENTITLEMENTUNITS,
	IMAXPERIODUNITS,
	INEXTLEAVE,
	CCODE,
	FENTITLEMENT,
	IPRORATAEVERY,
	ILEAVETYPE,
	IPRORATAPERIODUNITS,
	ITERMINATIONPAYOUT,
	FACCRUALRATE,
	CADDITIONS,
	FPRORATA,
	COTHERLEAVEREASONS,
	BCOSTSPLIT,
	FMAXACCRUAL,
	DSTANDARDENTDATE,
	IACCUMULATEENTITLEMENTS,
	IMETHOD,
	CHOURTYPES,
	CUDLEAVECLASS,
	IENTITLEMENTSEVERY,
	ITERMINATIONPAYMENTTYPE,
	IPRORATAUNITS,
	IINCLUDEONPAYADVICE,
	CDESCRIPTION,
	CBALANCEDESCRIPTION,
	BPAYOUTONTERMINATION,
	BCREDITATENDOFPERIOD,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_LEAVE_USER_DEFINED_HISTORY

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_PAY_LEVEL(
	PAY_LEVEL_ID,
	PAY_LEVEL_CODE,
	PAY_LEVEL_DESCRIPTION,
	VERSION_TIMESTAMP
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 

with 

fortnightly_eivPAYCLASSES_cte as (
select 
	idPayClass "Pay Class ID",
	cCode "Pay Class Code",
    cDescription "Pay Class Description",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYCLASSES
),

monthly_eivPAYCLASSES_cte as (
select 
	idPayClass "Pay Class ID",
	cCode "Pay Class Code",
    cDescription "Pay Class Description",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYCLASSES    
),

weekly_eivPAYCLASSES_cte as (
select 
	idPayClass "Pay Class ID",
	cCode "Pay Class Code",
    cDescription "Pay Class Description",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYCLASSES
),

pay_levels_all as (
    select distinct
        "Pay Class Code" as PAY_LEVEL_CODE,
        "Pay Class Description" as PAY_LEVEL_DESCRIPTION,
        VERSION_TIMESTAMP
    from
        fortnightly_eivPAYCLASSES_cte
    --
    union
    --
    select distinct
        "Pay Class Code" as PAY_LEVEL_CODE,
        "Pay Class Description" as PAY_LEVEL_DESCRIPTION,
        VERSION_TIMESTAMP
    from
        monthly_eivPAYCLASSES_cte
    --
    union
    --
    select distinct
        "Pay Class Code" as PAY_LEVEL_CODE,
        "Pay Class Description" as PAY_LEVEL_DESCRIPTION,
        VERSION_TIMESTAMP
    from
        weekly_eivPAYCLASSES_cte
),

pay_levels_agg_all as (
    select
        PAY_LEVEL_CODE,
        max(PAY_LEVEL_DESCRIPTION) as PAY_LEVEL_DESCRIPTION,
        max(VERSION_TIMESTAMP) as VERSION_TIMESTAMP 
    from 
        pay_levels_all
    group by all
)
select
    MD5(PAY_LEVEL_CODE) as PAY_LEVEL_ID,
    PAY_LEVEL_CODE as PAY_LEVEL_CODE,
    PAY_LEVEL_DESCRIPTION as PAY_LEVEL_DESCRIPTION,
    VERSION_TIMESTAMP
from PAY_LEVELs_agg_all
group by all
order by PAY_LEVEL_CODE
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_PAY_POINT(
	PAY_POINT_ID,
	PAY_POINT,
	VERSION_TIMESTAMP
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 

with 

fortnightly_eivPayPoints_cte as (
select 
    idPayPoint "Pay Point ID", 
    cPayPoint "Pay Point",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYPOINTS
),

monthly_eivPayPoints_cte as (
select 
    idPayPoint "Pay Point ID", 
    cPayPoint "Pay Point",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYPOINTS
),

weekly_eivPayPoints_cte as (
select 
    idPayPoint "Pay Point ID", 
    cPayPoint "Pay Point",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYPOINTS
),

pay_points_all as (
    select distinct
        "Pay Point" as PAY_POINT,
        VERSION_TIMESTAMP
    from
        fortnightly_eivPayPoints_cte
    --
    union
    --
    select distinct
        "Pay Point" as PAY_POINT,
        VERSION_TIMESTAMP
    from
        monthly_eivPayPoints_cte
    --
    union
    --
    select distinct
        "Pay Point" as PAY_POINT,
        VERSION_TIMESTAMP
    from
        weekly_eivPayPoints_cte
)
,
pay_points_agg_all as (
    select 
        PAY_POINT,
        max(VERSION_TIMESTAMP) as VERSION_TIMESTAMP 
    from 
        pay_points_all
    group by all
)
select
    MD5(PAY_POINT) as PAY_POINT_ID,
    PAY_POINT as PAY_POINT,
    VERSION_TIMESTAMP
from pay_points_agg_all
group by all
;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION_FORTNIGHTLY(
	PAYROLL_TYPE,
	PAY_FREQUENCY,
	WORKER_CODE,
	PAYROLL_TAX_CODE,
	TRANSACTION_LOCATION,
	LOCATION,
	EMPLOYMENT_TYPE,
	PAY_LEVEL_CODE,
	PAY_POINT,
	COST_CENTRE,
	PAY_END_DATE_FOR_PREVIOUS_EARNINGS,
	REFERENCE_DATE,
	TRANSACTION_TYPE,
	PAY_COMPONENT_ADD_DED_CODE,
	LEAVE_REASON_CODE,
	LEAVE_START_DATE,
	LEAVE_END_DATE,
	TRANSACTION_HOURS,
	HOURS,
	AMOUNT
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with 

_ipvLeaveReasons_cte as (
select LR.idLeaveReason,
	LR.cCode,
	LR.cDescription,
	case LR.iLeaveTypeID
		when 0 then 'Sick Leave'
		when 1 then 'Annual Leave'
		when 2 then 'Long Service Leave'
		when 3 then 'Other'
		else concat(UL.cCode,' - ',UL.cDescription)
	end as sLeaveType
    from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLLEAVEREASONS AS LR
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLUSERDEFINEDLEAVE AS UL on LR.iLeaveClassID = UL.idLeave and LR.iLeaveTypeID = 6
),

_eivAdditionsDeductions_cte as (
with _ipfnGetAddsDeds as (
    select
        ATD.iAddDeductID idAddDeductid,
        AD.cCode ADcCode,
        ATD.cDescription,
        ATD.cShortcutKey,
        ATD.idAdditionsDeductionsTD
    from
        BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLADDITIONSDEDUCTIONS AD
        left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLADDITIONSDEDUCTIONS_TD ATD on AD.idAddDeduct = ATD.iAddDeductID
)
select
    idAddDeductid "Add/Ded ID",
    idAdditionsDeductionsTD "Add/Ded TD ID",
    ADcCode "Code",
    cDescription "Description",
    cShortcutKey "Shortcut Key"
from
    _ipfnGetAddsDeds
),

_eivCostAccounts_cte as (
select
	idCostAccount "Cost Account ID",
	cCostCode "Cost Account Code",
	cDescription "Cost Account Description",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTS
where
    bActive = 1 
    and iPosition = (
        select MAX(iPosition) 
        from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE
        )
),

_eivLeaveReasons_cte as (
select 
    idLeaveReason "Leave Reason ID",
    cCode "Code",
    cDescription "Description"
from
    _ipvLeaveReasons_cte
),

_eivLocations_cte as (
select 
    idLocation "Location ID", 
    cLocation "Location"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLLOCATIONS
),

_eivEmpContractHours_cte as (
select
    E.idEmployee "Employee ID",
    E.iContractHoursID "Contract Hours ID",
    CH.cCode "Contract Hours Code",
    CH.cDescription "Contract Hours Description",
    CH.fHoursPerDay "Hours per Day",
    CH.fDaysPerWeek "Days per Week",
    CH.fDaysPerWeek * CH.fHoursPerDay "Hours Per Week"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYEE E
left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCONTRACTHOURS CH on CH.idContractHours = E.iContractHoursID
),

_eivPayMethods_cte as (
select '0' as "Pay Method ID", 'Envelope' as "Pay Method"
union
select '1' as "Pay Method ID", 'Direct Deposit' as "Pay Method"
union
select '2' as "Pay Method ID", 'Transfer EFT' as "Pay Method"
union
select '3' as "Pay Method ID", 'Advice Only' as "Pay Method"
),

_eivPayClasses_cte as (
select
	idPayClass "Pay Class ID",
	cCode "Code",
    cDescription "Description"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYCLASSES 
),

_eivRateFactors_cte as (
select
	idRateFactor "Rate Factor ID",
	cCode "Code",
	cDescription "Description"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLRATEFACTORS
),

_eivSuperContributions_cte as (
select
    idSuperScheme "Super Contribution ID",
    cCode "Code",
    cDescription "Description"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLSUPERSCHEME
),

_eivSuperFunds_cte as (
select
	idSuperFund "Super Fund ID",
	cCode "Code",
	cFundName "Fund Name"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLSUPERFUND 
),

_eivPayrollCompanies_cte as (
select
	idPayer "Payroll Company ID",
	cCode "Code", cPayerName "Payroll Company Name"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYERGROUPS
),

_eivPayPoints_cte as (
select 
    idPayPoint "Pay Point ID", 
    cPayPoint "Pay Point"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYPOINTS
),

_ipvEmployeeTransCurrent_cte as (
select TR.idEmployeeTrans,1 bCurrentYear
,(select top 1 Year(EndTaxYear) from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO.DEFAULTS) as iYearEndingID, TR.iEmployeeID, TR.iPeriodID, TR.iSickLeaveID, TR.iAnnualLeaveID, TR.iLongServiceLeaveID, TR.iAddsDedsID, TR.iOtherLeaveID, TR.iPostType, TR.iCostAccountID
, TR.bPosted, TR.dEffectiveDate, TR.dEndDate, TR.dRecommenceDate, TR.iNoOfPayPeriod, TR.iPayAdvice, TR.bIncludeInPayslip, TR.bPayslipPrinted, TR.bEFT, TR.iEFTExportLogID, TR.fHours
, TR.fUnits, TR.fPercent, TR.fRate, TR.fAmount, TR.fLoadingRate, TR.fLoadingPercent, TR.fLoadingAmount, TR.iUDTransType, TR.iUDHoursWorked, TR.iLeaveReasonID
, TR.iOTRateFactorID, TR.fOTRateFactor, TR.iPayClassID, TR.iAddDedType, TR.iHoursThatApply, TR.iSuperSchemeID, TR.iSuperFundID, TR.fSuperCalcedOn, TR.bRDODeduct, TR.bIncludeRDOHours
, TR.fRDOAddDedBank, TR.iPayPointID, TR.fTermTax, TR.dPEPayDate, TR.iAdjustmentPeriod, TR.bSuperProcessed, TR.dPayAdvicePrinted, TR.fQualValue, TR.fSGLCalcedOn, TR.fSGLActuallyPaid
, TR.fSGLHoursWorked, TR.dSuperProcessedDate, TR.bTransModified, TR.fSGLEmpAge, TR.iPayClassGroup, TR.iUDLeaveType, TR.bCreditorProcessed, TR.iPayrollCompanyID, TR.iLocationID, TR.bALPaid
, TR.iALLink, TR.cJobCode, TR.iValidateID, TR.bTerminationTransition, TR.iEMSExportNZID, TR.bNZUsedLowerLumpSumRate, TR.cNZChildSupportCode, TR.iRateTypeID, TR.fNZLumpSumTaxRate, TR.iUDLeaveClassID
, TR.bSystemGenerated, TR.fSGLSalaryAndWagesAmount, TR.fSGLSalaryAndWagesHours, TR.iPayFrequencyID, TR.iPayrollTaxID, TR.iFrequency, TR.iTransFrequency, TR.iCreateAgentID, TR.iCreateSource, TR.dCreateDate
, TR.iCreateImportID, TR.iChangeAgentID, TR.iChangeSource, TR.dChangeDate, TR.iChangeImportID, TR.iAwardID, TR.iAwardCategoryID, TR.iETPPaymentCode
, TR.fLumpSumEAmount, TR.iStp2IncomeType, TR.iStp2CountryID, TR.iLumpSumEFY
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYEETRANS  TR
),

_ipvEmployeeTransEOY_cte as (
select TR.idEmployeeTransEOY as idEmployeeTrans,0 bCurrentYear
, TR.iYearEndingID, TR.iEmployeeID, TR.iPeriodID, TR.iSickLeaveID, TR.iAnnualLeaveID, TR.iLongServiceLeaveID, TR.iAddsDedsID, TR.iOtherLeaveID, TR.iPostType, TR.iCostAccountID
, TR.bPosted, TR.dEffectiveDate, TR.dEndDate, TR.dRecommenceDate, TR.iNoOfPayPeriod, TR.iPayAdvice, TR.bIncludeInPayslip, TR.bPayslipPrinted, TR.bEFT, TR.iEFTExportLogID, TR.fHours
, TR.fUnits, TR.fPercent, TR.fRate, TR.fAmount, TR.fLoadingRate, TR.fLoadingPercent, TR.fLoadingAmount, TR.iUDTransType, TR.iUDHoursWorked, TR.iLeaveReasonID
, TR.iOTRateFactorID, TR.fOTRateFactor, TR.iPayClassID, TR.iAddDedType, TR.iHoursThatApply, TR.iSuperSchemeID, TR.iSuperFundID, TR.fSuperCalcedOn, TR.bRDODeduct, TR.bIncludeRDOHours
, TR.fRDOAddDedBank, TR.iPayPointID, TR.fTermTax, TR.dPEPayDate, TR.iAdjustmentPeriod, TR.bSuperProcessed, TR.dPayAdvicePrinted, TR.fQualValue, TR.fSGLCalcedOn, TR.fSGLActuallyPaid
, TR.fSGLHoursWorked, TR.dSuperProcessedDate, TR.bTransModified, TR.fSGLEmpAge, TR.iPayClassGroup, TR.iUDLeaveType, TR.bCreditorProcessed, TR.iPayrollCompanyID, TR.iLocationID, TR.bALPaid
, TR.iALLink, TR.cJobCode, TR.iValidateID, TR.bTerminationTransition, TR.iEMSExportNZID, TR.bNZUsedLowerLumpSumRate, TR.cNZChildSupportCode, TR.iRateTypeID, TR.fNZLumpSumTaxRate, TR.iUDLeaveClassID
, TR.bSystemGenerated, TR.fSGLSalaryAndWagesAmount, TR.fSGLSalaryAndWagesHours, TR.iPayFrequencyID, TR.iPayrollTaxID, TR.iFrequency, TR.iTransFrequency, TR.iCreateAgentID, TR.iCreateSource, TR.dCreateDate
, TR.iCreateImportID, TR.iChangeAgentID, TR.iChangeSource, TR.dChangeDate, TR.iChangeImportID, TR.iAwardID, TR.iAwardCategoryID, TR.iETPPaymentCode
, TR.fLumpSumEAmount, TR.iStp2IncomeType, TR.iStp2CountryID, TR.iLumpSumEFY
from BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYEETRANSEOY  TR
),

_eivEmpTransCurrent_cte as (
select
    idEmployeeTrans "Transaction ID",
    AD.idAdditionsDeductionsTD "Add/Deds TD",
    RD.idratetypetd "Rate Type TD",
    PD.idpayclasstd "Pay Class TD",
    iEmployeeID "Employee ID",
    iPeriodID "Period ID",
    iSickLeaveID "Sick Leave ID",
    iAnnualLeaveID "Annual Leave ID",
    iLongServiceLeaveID "Long Service Leave ID",
    iAddsDedsID "Adds/Deds ID",
    iOtherLeaveID "Other Leave ID",
    iPostType,
    case
        iPostType
        when 0 then 'Timesheet'
        when 1 then 'Termination'
        when 2 then 'Manual Calculation Add'
        when 3 then 'Manual Calculation Subtract'
        when 4 then 'Previous Earnings'
        when 5 then 'Backpay'
        when 6 then 'Period End'
        when 7 then 'Year End'
        when 8 then 'Adjustment Add'
        when 9 then 'Adjustment Subtract'
        when 10 then 'Cost Adjustment Add'
        when 11 then 'Cost Adjustment Subtract'
        when 12 then 'Migration Previous Earnings'
        when 13 then 'Previous Year Adjustment'
    end "Post Type",
    ET.iCostAccountID "Cost Account ID",
    bPosted,
    case
        when bPosted = TRUE then 'Yes'
        else 'No'
    end "Posted",
    ET.dEffectiveDate "Effective Date",
    ET.dEndDate "End Date",
    ET.dRecommenceDate "Recommence Date",
    case
        iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-FORTNIGHTLY'
        when 5 then 'FORTNIGHTLY'
    end "Pay Period Pay Frequency",
    iNoOfPayPeriod "Number of Periods",
    iPayAdvice "Advice Number",
    case
        when bEFT = TRUE then 'Yes'
        else 'No'
    end "Generate Payment",
    iEFTExportLogID "EFT Export Log ID",
    fHours "Hours",
    fUnits "Units",
    ET.fPercent "Percent",
    ET.fRate "Rate",
    ET.fAmount "Amount",
    fLoadingRate "Loading Rate",
    fLoadingPercent "Loading Percent",
    fLoadingAmount "Loading Amount",
    case
        iUDTransType
        when 0 then 'Sick Leave'
        when 1 then 'Annual Leave'
        when 2 then 'Hours By Rate'
        when 3 then 'Non Standard Add Before'
        when 4 then 'Non Standard Add After'
        when 5 then 'Non Standard Ded Before'
        when 6 then 'Non Standard Ded After'
        when 7 then 'Standard Add Before'
        when 8 then 'Standard Add After'
        when 9 then 'Standard Ded Before'
        when 10 then 'Standard Ded After'
        when 11 then 'Long Service Leave'
        when 12 then 'Other Leave'
        when 13 then 'Auto Pay'
        when 14 then 'Tax'
        when 15 then 'Super'
        when 16 then 'Super Adjustment'
        when 17 then 'RDO Deduct'
        when 18 then 'RDO Pay'
        when 19 then 'Term Pre 78 LSL Comp B'
        when 20 then 'Term Pre 93 LSL Comp A'
        when 21 then 'Term Post 93 LSL Gross'
        when 22 then 'Term Post 93 LSL Comp A'
        when 23 then 'Term Pre 93 AL Comp A'
        when 24 then 'Term Post 93 AL Gross'
        when 25 then 'Term AL Comp A'
        when 26 then 'Term Pre 93 LL Comp A'
        when 27 then 'Term Post 93 LL Gross'
        when 28 then 'Term LL Comp A'
        when 29 then 'Term AL Death'
        when 30 then 'Term LL Death'
        when 31 then 'Term LSL Death'
        when 32 then 'Term Sick Leave'
        when 33 then 'Term RDO'
        when 34 then 'Term Lump Sum'
        when 35 then 'Term Lump Sum D'
        when 36 then concat(
            'Term ETP - Tax Free',
            case
                iETPPaymentCode
                when 0 then ''
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        )
        when 37 then concat(
            'Term ETP - Taxable',
            case
                iETPPaymentCode
                when 0 then ' '
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        ) --when 38 then 'Term Assessable Amount' Not used
        when 39 then 'Term ETP - Invalidity'
        when 40 then 'Net Pay'
        when 41 then 'Non Standard Tax Adj'
        when 42 then 'Standard Tax Adj'
        when 43 then 'STSL' --HECS
        when 44 then 'SFSS'
        when 45 then 'RDO Migration'
        when 46 then 'Student Loan'
        when 47 then 'Term PH Gross'
        when 48 then 'Term EL Gross'
        when 49 then 'Term SL Gross'
        when 50 then 'Term RDO Gross'
        when 51 then 'Term AL Prorata'
        when 53 then 'Term ETP (Superable) - Tax Free'
        when 54 then 'Term ETP (Superable) - Taxable'
        when 52 then 'Term Redundancy/Retirement'
        when 55 then 'User Defined Leave'
        when 57 then 'Term User Defined Leave'
        when 62 then 'Term Golden Handshake'
        when 63 then 'Term Gratuity'
        when 64 then 'Term Early Retirement Scheme'
        when 65 then 'Term Genuine Redundancy'
        when 66 then 'Term Invalidity'
        when 67 then 'Term Compensation'
        when 68 then 'Term Non Genuine Redundancy'
        when 69 then 'Term Death'
        when 70 then 'Term Severance'
    end "Transaction Type",
    case
        ET.iUDHoursWorked
        when 0 then 'Normal'
        when 1 then 'Time Half'
        when 2 then 'Double Time'
        when 3 then 'Award'
        when 4 then 'Extra Pay'
        when 5 then 'Penalty'
        when 6 then 'Other'
        when 7 then 'Other Leave'
        when 8 then 'Sick Leave'
        when 9 then 'Annual Leave'
        when 10 then 'Long Service Leave'
        when 11 then 'Public Holiday Leave'
        when 12 then 'Extra Leave'
        when 13 then 'Half Sick Leave'
        when 14 then 'User Defined Leave'
        when 15 then 'Overtime'
    end "Hours Worked",
    iLeaveReasonID "Leave Reason ID",
    iOTRateFactorID "OT Rate Factor ID",
    fOTRateFactor "OT Rate Factor",
    ET.iPayClassID "Pay Class ID",
    iAddDedType,
    case
        iAddDedType
        when 0 then 'Amount'
        when 1 then 'Rate'
        when 2 then 'Percent'
        when 3 then 'Unit'
    end "Addition/Deduction Type",
    iSuperSchemeID "Super Contribution ID",
    iSuperFundID "Super Fund ID",
    fSuperCalcedOn "Super Calculated On",
    ET.bRDODeduct,
    iPayPointID "Pay Point ID",
    fTermTax "Term Tax",
    dPEPayDate "Previous Earnings Date",
    iAdjustmentPeriod "Adjustment Period ID",
    bSuperProcessed,
    case
        when bSuperProcessed = TRUE then 'Yes'
        else 'No'
    end "Super Processed",
    dPayAdvicePrinted "Advice Printed Date",
    fQualValue "Qualification Value",
    fSGLCalcedOn "SGL Calculated On",
    fSGLActuallyPaid "SGL Actually Paid",
    fSGLHoursWorked "SGL hours Worked",
    dSuperProcessedDate "Super Process Date",
    fSGLEmpAge "SGL Age",
    iPayClassGroup "Pay Class Group ID",
    iPayrollCompanyID "Transaction Payroll Company ID",
    iLocationID "Transaction Location ID",
    cJobCode "Job Code",
    case
        when bTerminationTransition = TRUE then 'Yes'
        else 'No'
    end "Transitional Terminiation Payment",
    iUDLeaveClassID "User Defined Leave ID"
from
    _ipvEmployeeTransCurrent_cte ET
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLADDITIONSDEDUCTIONS_TD AD on AD.iAddDeductID = ET.iAddsDedsID and (((ET.dEffectiveDate >= AD.dEffectiveDate) and ((ET.dEffectiveDate <= AD.dEndDate) or (IfNull(AD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= AD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLRATETYPES_TD RD on RD.iratetypeid = ET.iratetypeid and (((ET.dEffectiveDate >= RD.dEffectiveDate) and ((ET.dEffectiveDate <= RD.dEndDate) or (IfNull(RD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= RD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYCLASSES_TD PD on PD.ipayclassid = ET.ipayclassid and (((ET.dEffectiveDate >= PD.dEffectiveDate) and ((ET.dEffectiveDate <= PD.dEndDate) or (IfNull(PD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= PD.dEffectiveDate))
),

_eivEmpTransEOY_cte as (
select
	idEmployeeTrans "Transaction ID",
	AD.idAdditionsDeductionsTD "Add/Deds TD",
	RD.idratetypetd "Rate Type TD",
	PD.idpayclasstd "Pay Class TD",
	iEmployeeID "Employee ID",
	iPeriodID "Period ID",
	iSickLeaveID "Sick Leave ID",
	iAnnualLeaveID "Annual Leave ID",
	iLongServiceLeaveID "Long Service Leave ID",
	iAddsDedsID "Adds/Deds ID",
	iOtherLeaveID "Other Leave ID",
	iPostType,
    case
        iPostType
        when 0 then 'Timesheet'
        when 1 then 'Termination'
        when 2 then 'Manual Calculation Add'
        when 3 then 'Manual Calculation Subtract'
        when 4 then 'Previous Earnings'
        when 5 then 'Backpay'
        when 6 then 'Period End'
        when 7 then 'Year End'
        when 8 then 'Adjustment Add'
        when 9 then 'Adjustment Subtract'
        when 10 then 'Cost Adjustment Add'
        when 11 then 'Cost Adjustment Subtract'
        when 12 then 'Migration Previous Earnings'
        when 13 then 'Previous Year Adjustment'
    end "Post Type",
	ET.iCostAccountID "Cost Account ID",
	bPosted,
    case
        when bPosted = TRUE then 'Yes'
        else 'No'
    end "Posted",
	ET.dEffectiveDate "Effective Date",
	ET.dEndDate "End Date",
	dRecommenceDate "Recommence Date",
    case
        iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-FORTNIGHTLY'
        when 5 then 'FORTNIGHTLY'
    end "Pay Period Pay Frequency",
	iNoOfPayPeriod "Number of Periods",
	iPayAdvice "Advice Number",
    case
        when bEFT = TRUE then 'Yes'
        else 'No'
    end "Generate Payment",
	iEFTExportLogID "EFT Export Log ID",
	fHours "Hours",
	fUnits "Units",
	ET.fPercent "Percent",
	ET.fRate "Rate",
	ET.fAmount "Amount",
	fLoadingRate "Loading Rate",
	fLoadingPercent "Loading Percent",
	fLoadingAmount "Loading Amount",
	iUDTransType,
    case
        iUDTransType
        when 0 then 'Sick Leave'
        when 1 then 'Annual Leave'
        when 2 then 'Hours By Rate'
        when 3 then 'Non Standard Add Before'
        when 4 then 'Non Standard Add After'
        when 5 then 'Non Standard Ded Before'
        when 6 then 'Non Standard Ded After'
        when 7 then 'Standard Add Before'
        when 8 then 'Standard Add After'
        when 9 then 'Standard Ded Before'
        when 10 then 'Standard Ded After'
        when 11 then 'Long Service Leave'
        when 12 then 'Other Leave'
        when 13 then 'Auto Pay'
        when 14 then 'Tax'
        when 15 then 'Super'
        when 16 then 'Super Adjustment'
        when 17 then 'RDO Deduct'
        when 18 then 'RDO Pay'
        when 19 then 'Term Pre 78 LSL Comp B'
        when 20 then 'Term Pre 93 LSL Comp A'
        when 21 then 'Term Post 93 LSL Gross'
        when 22 then 'Term Post 93 LSL Comp A'
        when 23 then 'Term Pre 93 AL Comp A'
        when 24 then 'Term Post 93 AL Gross'
        when 25 then 'Term AL Comp A'
        when 26 then 'Term Pre 93 LL Comp A'
        when 27 then 'Term Post 93 LL Gross'
        when 28 then 'Term LL Comp A'
        when 29 then 'Term AL Death'
        when 30 then 'Term LL Death'
        when 31 then 'Term LSL Death'
        when 32 then 'Term Sick Leave'
        when 33 then 'Term RDO'
        when 34 then 'Term Lump Sum'
        when 35 then 'Term Lump Sum D'
        when 36 then concat(
            'Term ETP - Tax Free',
            case
                iETPPaymentCode
                when 0 then ''
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        )
        when 37 then concat(
            'Term ETP - Taxable',
            case
                iETPPaymentCode
                when 0 then ' '
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        ) --when 38 then 'Term Assessable Amount' Not used
        when 39 then 'Term ETP - Invalidity'
        when 40 then 'Net Pay'
        when 41 then 'Non Standard Tax Adj'
        when 42 then 'Standard Tax Adj'
        when 43 then 'STSL' --HECS
        when 44 then 'SFSS'
        when 45 then 'RDO Migration'
        when 46 then 'Student Loan'
        when 47 then 'Term PH Gross'
        when 48 then 'Term EL Gross'
        when 49 then 'Term SL Gross'
        when 50 then 'Term RDO Gross'
        when 51 then 'Term AL Prorata'
        when 53 then 'Term ETP (Superable) - Tax Free'
        when 54 then 'Term ETP (Superable) - Taxable'
        when 52 then 'Term Redundancy/Retirement'
        when 55 then 'User Defined Leave'
        when 57 then 'Term User Defined Leave'
        when 62 then 'Term Golden Handshake'
        when 63 then 'Term Gratuity'
        when 64 then 'Term Early Retirement Scheme'
        when 65 then 'Term Genuine Redundancy'
        when 66 then 'Term Invalidity'
        when 67 then 'Term Compensation'
        when 68 then 'Term Non Genuine Redundancy'
        when 69 then 'Term Death'
        when 70 then 'Term Severance'
    end "Transaction Type",
	ET.iUDHoursWorked,
	case ET.iUDHoursWorked
		when 0 then 'Normal'
		when 1 then 'Time Half'
		when 2 then 'Double Time'
		when 3 then 'Award'
		when 4 then 'Extra Pay'
		when 5 then 'Penalty'
		when 6 then 'Other'
		when 7 then 'Other Leave'
		when 8 then 'Sick Leave'
		when 9 then 'Annual Leave'
		when 10 then 'Long Service Leave'
		when 11 then 'Public Holiday Leave'
		when 12 then 'Extra Leave'
		when 13 then 'Half Sick Leave'
		when 14 then 'User Defined Leave'
		when 15 then 'Overtime'
	end "Hours Worked",
	iLeaveReasonID "Leave Reason ID",
    iOTRateFactorID "OT Rate Factor ID",
	fOTRateFactor "OT Rate Factor",
    ET.iPayClassID "Pay Class ID",
    ET.iAddDedType,
	case ET.iAddDedType
		when 0 then 'Amount'
		when 1 then 'Rate'
		when 2 then 'Percent'
		when 3 then 'Unit'
	end "Addition/Deduction Type",
    iSuperSchemeID "Super Contribution ID",
    iSuperFundID "Super Fund ID",
	fSuperCalcedOn "Super Calculated On",
    iPayPointID "Pay Point ID",
	fTermTax "Term Tax",
	dPEPayDate "Previous Earnings Date",
	iAdjustmentPeriod "Adjustment Period ID",
	bSuperProcessed,
    case
        when bSuperProcessed = TRUE then 'Yes'
        else 'No'
    end "Super Processed",
	dPayAdvicePrinted "Advice Printed Date",
	fQualValue "Qualification Value",
	fSGLCalcedOn "SGL Calculated On",
	fSGLActuallyPaid "SGL Actually Paid",
	fSGLHoursWorked "SGL hours Worked",
	dSuperProcessedDate "Super Process Date",
	fSGLEmpAge "SGL Age",
	iPayClassGroup "Pay Class Group ID",
	iPayrollCompanyID "Transaction Payroll Company ID",
	iLocationID "Transaction Location ID",
	cJobCode "Job Code",
    case
        when bTerminationTransition = TRUE then 'Yes'
        else 'No'
    end "Transitional Terminiation Payment",
	iUDLeaveClassID "User Defined Leave ID"
from 
    _ipvEmployeeTransEOY_cte ET
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLADDITIONSDEDUCTIONS_TD AD on AD.iAddDeductID = ET.iAddsDedsID and (((ET.dEffectiveDate >= AD.dEffectiveDate) and ((ET.dEffectiveDate <= AD.dEndDate) or (IfNull(AD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= AD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLRATETYPES_TD RD on RD.iratetypeid= ET.iratetypeid and (((ET.dEffectiveDate >= RD.dEffectiveDate) and ((ET.dEffectiveDate <= RD.dEndDate) or (IfNull(RD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= RD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYCLASSES_TD PD on PD.ipayclassid = ET.ipayclassid and (((ET.dEffectiveDate >= PD.dEffectiveDate) and ((ET.dEffectiveDate <= PD.dEndDate) or (IfNull(PD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= PD.dEffectiveDate))
),

_eivEmpHeader_cte as (
select
    E.idEmployee "Employee ID",
    E.cEmpCode "Employee Code",
    E.cSurname "Surname",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then E.cFirstName
        else left(
            E.cFirstName,
            charindex(' ', E.cFirstName, 0) - 1
        )
    end as "First Name",
    E.cMiddleName "Middle Name",
    E.cPreferredName "EmpPrefName",
    E.cFirstName "Given Names",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then ''
        else substr(
            E.cFirstName,
            (charindex(' ', E.cFirstName, 0) + 1),
            len(E.cFirstName)
        )
    end as "Other Names",
    concat(E.cFirstName, ' ', E.cSurname) "Full Name",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then concat(E.cSurname, ' ', left(E.cFirstName, 1), '.')
        else concat(
            E.cSurname,
            ' ',
            left(E.cFirstName, 1),
            '. ',
            substr(
                E.cFirstName,
                (charindex(' ', E.cFirstName, 0) + 1),
                1
            ),
            '.'
        )
    end as "Surname with Initials",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then concat(left(E.cFirstName, 1), '.')
        else concat(
            left(E.cFirstName, 1),
            '. ',
            substr(
                E.cFirstName,
                (charindex(' ', E.cFirstName, 0) + 1),
                1
            ),
            '.'
        )
    end as "Initials",
    E.dHiredDate "Hired Date",
    case
        when E.bTerminated = TRUE then case
            when dateadd(
                year,
                datediff(year, E.dHiredDate, E.dTerminationDate),
                E.dHiredDate
            ) > E.dTerminationDate then datediff(year, E.dHiredDate, E.dTerminationDate) - 1
            else datediff(year, E.dHiredDate, E.dTerminationDate)
        end
        else case
            when dateadd(
                year,
                datediff(year, E.dHiredDate, GETDATE()),
                E.dHiredDate
            ) > GETDATE() then datediff(year, E.dHiredDate, GETDATE()) - 1
            else datediff(year, E.dHiredDate, GETDATE())
        end
    end "Years of Service",
    E.iPayerGroupID "Payroll Company ID",
    PG.cCode "Payroll Company Code",
    PG.cPayerName "Payroll Company Description",
    concat(PG.cCode, ' - ', PG.cPayerName) "Payroll Company",
    E.iPayFrequencyID "Pay Frequency ID",
    PF.cCode "Pay Frequency Code",
    PF.cDescription "Pay Frequency Description",
    case
        PF.iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-FORTNIGHTLY'
        when 5 then 'FORTNIGHTLY'
    end "Frequency",
    case
        PF.iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-FORTNIGHTLY'
        when 5 then 'FORTNIGHTLY'
    end "Pay Frequency",
    E.iLocationID "Location ID",
    L.cLocation "Location",
    PP.cPayPoint "Pay Point",
    E.iEmploymentTypeID "Employment Type ID",
    ET.cEmploymentType "Employment Type",
    E.iDefaultCostAccount "Default Cost Account ID",
    CA.cCostCode "Default Cost Account Code",
    CA.cDescription "Default Cost Account Description",
    CA.cCostCode "Default Cost Account",
    PF.iFrequency "Tax Pay Frequency ID",
    case
        PF.iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-FORTNIGHTLY'
        when 5 then 'FORTNIGHTLY'
    end "Tax Pay Frequency",
    PM."Pay Method" "Payment Method",
    case
        E.iGenerateAutopay
        when 0 then 'Yes'
        when 1 then 'No'
        when 2 then 'Suspend'
        when 3 then 'Workplanner'
    end as "AutoPay",
    case
        when E.bIsAnnualisedSalary = TRUE then 'Yes'
        else 'No'
    end "Annualised Salary",
    E.dAnnualisedAnniversaryDate "Annualised Salary Anniversary Date",
    '' "Current Period Start Date",
    E.bTerminated as "Employee Terminated",
    case
        when E.dTerminationDate < '5' then ''
        else E.dTerminationDate
    end as "Termination Date",
    E.iTerminatedPeriodID "Terminated Period ID",
    TR.cTerminationReason as "Termination Reason",
    CH."Contract Hours Code",
    CH."Contract Hours Description",
    CH."Hours per Day",
    CH."Days per Week",
    CH."Hours per Day" * CH."Days per Week" "Contract Hours Per Week",
    E.iWorkmansCompID "Workers Compensation ID"
from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYEE E
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYFREQUENCIES PF ON E.iPayFrequencyID = PF.idPayFrequency
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYERGROUPS PG on E.iPayerGroupID = PG.idPayer
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLLOCATIONS L ON E.iLocationID = L.idLocation
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYPOINTS PP ON E.iPayPointID = PP.idPayPoint
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYMENTTYPES ET ON E.iEmploymentTypeID = ET.idEmploymentType
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLCOSTACCOUNTS CA ON CA.idCostAccount = E.iDefaultCostAccount
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLTERMINATIONREASON TR on TR.idTerminationReason = E.iTerminationReasonID
    left join _eivEmpContractHours_cte CH on E.idEmployee = CH."Employee ID"
    left join _eivPayMethods_cte PM ON PM."Pay Method ID" = E.iPayMethodID
),

_ipvRBEmpHeader_cte as (
select
E."Employee ID",
E."Employee Code",
E."Surname",
E."First Name",
E."Middle Name",
E."EmpPrefName" AS "Preferred Name",
E."Given Names",
E."Other Names",
E."Full Name",
E."Surname with Initials",
E."Initials",
E."Hired Date",
E."Years of Service",
E."Payroll Company ID",
E."Payroll Company Code",
E."Payroll Company Description",
E."Payroll Company",
E."Pay Frequency ID",
E."Pay Frequency",
E."Pay Frequency Code",
E."Location ID",
E."Location",
E."Pay Point",
E."Employment Type",
E."Default Cost Account Code",
E."Default Cost Account Description",
E."Default Cost Account Code" "Default Cost Account",
E."Tax Pay Frequency ID",
E."Tax Pay Frequency",
E."Payment Method",
E."AutoPay",
E."Current Period Start Date",
E."Employee Terminated",
E."Termination Date",
E."Termination Reason",
E."Hours per Day" "Contract Hours Per Day",
E."Days per Week" "Contract Days Per Week",
E."Contract Hours Per Week",
E."Contract Hours Per Week" "Contract Hours",
E."Contract Hours Code",
E."Contract Hours Description",
E."Annualised Salary",
E."Annualised Salary Anniversary Date",
from _eivEmpHeader_cte E
),

_ipvRBMEmpDetails_cte as (
SELECT
    EH.*,
    /* RS 04/11/2024 Add Employment Type and Pay Level columns */
    PC.cCode "Pay Class Code",
    PC.cDescription "Pay Class Description",
    PT.cCode "Payroll Tax Code"
FROM BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEMPLOYEE E
    left join _ipvRBEmpHeader_cte EH on EH."Employee ID" = E.idEmployee
    /* RS 04/11/2024 Add Employment Type and Pay Level columns */
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._iptblPayClasses PC on PC.idPayClass = E.iPayClassID
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLPAYROLLTAX PT on PT.idPayrollTax = E.iPayrollTaxID
),

_ipvRBEmpTransactions_cte as (
SELECT
	EH.*,
	ET."Period ID" "Pay Period ID",
	SL.cCode "SL Code",
	SL.cDescription "SL Description",
	AL.cCode "AL Code",
	AL.cDescription "AL Description",
	LSL.cCode "LSL Code",
	LSL.cDescription "LSL Description",
	UL.cCode "UL Code",
	UL.cDescription "UL Description",
	case UL.cCode
		when 'EL0001' then 'Annual'
		when 'PH0001' then 'Annual'
		else AD."Code"
	end "Pay Comp/Add Ded Code",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else AD."Description"
	end "Pay Comp/Add Ded Desc",
	AD."Shortcut Key" "Shortcut Key",
	ET."Other Leave ID",
	ET."Post Type",
	ET."Posted" "Period End Processed",
	ET."Effective Date" "Leave Start Date",
	ET."End Date" "Leave End Date",
	ET."Recommence Date" "Recommence Date",
	ET."Pay Period Pay Frequency",
	ET."Number of Periods" "Number of Periods",
	ET."Advice Number" "Pay Advice Number",
	ET."Generate Payment",
	EL.dDateProcessedByBank "EFT Payment Date",
	sum(ifnull(ET."Hours",0)) "Hours",
	sum(ifnull(ET."Hours" / EH."Contract Hours Per Day", 0)) "Days",
	ifnull(ET."Units", 0) "Unit",
	ifnull(ET."Rate", 0) "Rate",
	ifnull(ET."Percent", 0) "Percent",
	sum(ifnull(ET."Amount", 0)) "Amount",
	ifnull(ET."Loading Rate", 0) "Loading Rate",
	ifnull(ET."Loading Percent", 0) "Loading Percent",
	sum(ifnull(ET."Loading Amount", 0)) "Loading Amount",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else ET."Transaction Type"
	end "Transaction Type",
	case UL.cCode
		when 'EL0001' then 'Extra Leave'
		when 'PH0001' then 'Public Holiday Leave'
		else ET."Hours Worked"
	end "Hours Worked Type",
	TCA."Cost Account Code",
	TCA."Cost Account Description",
	LR."Code" "Leave Reason Code",
	LR."Description" "Leave Reason Description",
	RF."Code" "Rate Factor Code",
	RF."Description" "Rate Factor Description",
	ET."OT Rate Factor" "Rate Factor",
	PC."Code" "Pay Class Code",
	PC."Description" "Pay Class Description",
	ET."Addition/Deduction Type",
	SC."Code" "Super Contribution Code",
	SC."Description" "Super Contribution Description",
	SF."Code" "Super Fund Code",
	SF."Fund Name" "Super Fund Description",
	ET."Super Calculated On" "Super Calculated On",
	EH."Pay Frequency" "Employee Pay Frequency",
	ET."Term Tax" "Termination Tax",
	ET."Previous Earnings Date" "Pay End Date for Previous Earnings",
	ET."Advice Printed Date" "Pay Advice Print Date",
	ET."Qualification Value" "Qualification Value",
	ET."SGL Actually Paid" "SGL Actually Paid",
	ET."SGL hours Worked" "SGL Hours Worked",
	ET."Super Process Date" "Date Super Process Completed",
	ET."SGL Age" "SGL Age",
	L1."Location" "Transaction Location",
	PG."Payroll Company Name" "Transaction Payroll Company",
	ET."Job Code",
	ET."Transitional Terminiation Payment",
	ET."Transaction Payroll Company ID",
	PP."Pay Point" "Transaction Pay Point",
    ET."Pay Class Group ID"
FROM _ipvRBEmpHeader_cte EH
	left join _eivEmpTransCurrent_cte ET ON ET."Employee ID" = EH."Employee ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLSICKLEAVE SL ON SL.idLeave = ET."Sick Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLANNUALLEAVE AL ON AL.idLeave = ET."Annual Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLLONGSERVICELEAVE LSL ON LSL.idLeave = ET."Long Service Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLUSERDEFINEDLEAVE UL ON UL.idLeave = ET."User Defined Leave ID"
	left join _eivAdditionsDeductions_cte AD on AD."Add/Ded ID" = ET."Adds/Deds ID"
    left join _eivPayClasses_cte PC on PC."Pay Class ID" = ET."Pay Class ID"
	left join _eivCostAccounts_cte TCA ON TCA."Cost Account ID" = ET."Cost Account ID"
	left join _eivLeaveReasons_cte LR ON LR."Leave Reason ID" = ET."Leave Reason ID"
	left join _eivRateFactors_cte RF ON RF."Rate Factor ID" = ET."OT Rate Factor ID"
	left join _eivSuperContributions_cte SC ON SC."Super Contribution ID"= ET."Super Contribution ID"
	left join _eivSuperFunds_cte SF ON SF."Super Fund ID" = ET."Super Fund ID"
	left join _eivLocations_cte L1 ON L1."Location ID" = ET."Transaction Location ID"
	left join _eivPayrollCompanies_cte PG ON PG."Payroll Company ID" = ET."Transaction Payroll Company ID"
    left join _eivPayPoints_cte PP on PP."Pay Point ID" = ET."Pay Point ID"
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEFTEXPORTLOG EL on ET."EFT Export Log ID" = EL.idEFTExportLog
group by all
),

_ipvRBEmpTransactionsEOY_cte as (
SELECT
	EH.*,
	ET."Period ID" "Pay Period ID",
	SL.cCode "SL Code",
	SL.cDescription "SL Description",
	case UL.cCode
		when 'EL0001' then 'EL0001'
		when 'PH0001' then 'PH0001'
		else AL.cCode
	end "AL Code",
	case UL.cCode
		when 'EL0001' then UL.cDescription
		when 'PH0001' then UL.cDescription
		else AL.cDescription
	end "AL Description",
	LSL.cCode "LSL Code",
	LSL.cDescription "LSL Description",
	UL.cCode "UL Code",
	UL.cDescription "UL Description",
	case UL.cCode
		when 'EL0001' then 'Annual'
		when 'PH0001' then 'Annual'
		else AD."Code"
	end "Pay Comp/Add Ded Code",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else AD."Description"
	end "Pay Comp/Add Ded Desc",
	AD."Shortcut Key" "Shortcut Key",
	ET."Other Leave ID",
	ET."Post Type",
	ET."Posted" "Period End Processed",
	ET."Effective Date" "Leave Start Date",
	ET."End Date" "Leave End Date",
	ET."Recommence Date" "Recommence Date",
	ET."Pay Period Pay Frequency",
	ET."Number of Periods" "Number of Periods",
	ET."Advice Number" "Pay Advice Number",
	ET."Generate Payment",
	EL.dDateProcessedByBank "EFT Payment Date",
	sum(ifnull(ET."Hours",0)) "Hours",
	sum(ifnull(ET."Hours" / EH."Contract Hours Per Day", 0)) "Days",
	ifnull(ET."Units", 0) "Unit",
	ifnull(ET."Rate", 0) "Rate",
	ifnull(ET."Percent", 0) "Percent",
	sum(ifnull(ET."Amount", 0)) "Amount",
	ifnull(ET."Loading Rate", 0) "Loading Rate",
	ifnull(ET."Loading Percent", 0) "Loading Percent",
	sum(ifnull(ET."Loading Amount", 0)) "Loading Amount",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else ET."Transaction Type"
	end "Transaction Type",
	case UL.cCode
		when 'EL0001' then 'Extra Leave'
		when 'PH0001' then 'Public Holiday Leave'
		else ET."Hours Worked"
	end "Hours Worked Type",
	TCA."Cost Account Code",
	TCA."Cost Account Description",
	LR."Code" "Leave Reason Code",
	LR."Description" "Leave Reason Description",
	RF."Code" "Rate Factor Code",
	RF."Description" "Rate Factor Description",
	ET."OT Rate Factor" "Rate Factor",
	PC."Code" "Pay Class Code",
	PC."Description" "Pay Class Description",
	ET."Addition/Deduction Type",
	SC."Code" "Super Contribution Code",
	SC."Description" "Super Contribution Description",
	SF."Code" "Super Fund Code",
	SF."Fund Name" "Super Fund Description",
	ET."Super Calculated On" "Super Calculated On",
	EH."Pay Frequency" "Employee Pay Frequency",
	ET."Term Tax" "Termination Tax",
	ET."Previous Earnings Date" "Pay End Date for Previous Earnings",
	ET."Advice Printed Date" "Pay Advice Print Date",
	ET."Qualification Value" "Qualification Value",
	ET."SGL Actually Paid" "SGL Actually Paid",
	ET."SGL hours Worked" "SGL Hours Worked",
	ET."Super Process Date" "Date Super Process Completed",
	ET."SGL Age" "SGL Age",
	L1."Location" "Transaction Location",
	PG."Payroll Company Name" "Transaction Payroll Company",
	ET."Job Code",
	ET."Transitional Terminiation Payment",
	ET."Transaction Payroll Company ID",
	PP."Pay Point" "Transaction Pay Point",
    ET."Pay Class Group ID"
FROM _ipvRBEmpHeader_cte EH
	left join _eivEmpTransEOY_cte ET ON ET."Employee ID" = EH."Employee ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLSICKLEAVE SL ON SL.idLeave = ET."Sick Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLANNUALLEAVE AL ON AL.idLeave = ET."Annual Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLLONGSERVICELEAVE LSL ON LSL.idLeave = ET."Long Service Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLUSERDEFINEDLEAVE UL ON UL.idLeave = ET."User Defined Leave ID"
	left join _eivAdditionsDeductions_cte AD on AD."Add/Ded ID" = ET."Adds/Deds ID"
    left join _eivPayClasses_cte PC on PC."Pay Class ID" = ET."Pay Class ID"
    left join _eivCostAccounts_cte TCA ON TCA."Cost Account ID" = ET."Cost Account ID"
	left join _eivLeaveReasons_cte LR ON LR."Leave Reason ID" = ET."Leave Reason ID"
    left join _eivRateFactors_cte RF ON RF."Rate Factor ID" = ET."OT Rate Factor ID"
	left join _eivSuperContributions_cte SC ON SC."Super Contribution ID"= ET."Super Contribution ID"
	left join _eivSuperFunds_cte SF ON SF."Super Fund ID" = ET."Super Fund ID"
    left join _eivLocations_cte L1 ON L1."Location ID" = ET."Transaction Location ID"
	left join _eivPayrollCompanies_cte PG ON PG."Payroll Company ID" = ET."Transaction Payroll Company ID"
    left join _eivPayPoints_cte PP on PP."Pay Point ID" = ET."Pay Point ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_FORTNIGHTLY_DBO._IPTBLEFTEXPORTLOG EL on ET."EFT Export Log ID" = EL.idEFTExportLog
group by all
),

_ipvRBEmpTransactionsALL_cte as (
select * from _ipvRBEmpTransactions_cte
union 
select * from _ipvRBEmpTransactionsEOY_cte
)

select
    'Fortnightly' as PAYROLL_TYPE,
    TR."Pay Frequency" as PAY_FREQUENCY,
    /* RS 13/09/2024 Remove leading Z's from employee code */
    -- TR."Employee Code" as WORKER_CODE,
    case when substring(TR."Employee Code",1,1) in ('Z','z') then case when len(TR."Employee Code") < 8 then replace(replace(TR."Employee Code",'Z',''),'z','') else concat('1',substring(TR."Employee Code",2,len(TR."Employee Code")-1)) end else TR."Employee Code" end as WORKER_CODE,
    substr(ED."Payroll Tax Code", 3, 3) as PAYROLL_TAX_CODE,
    TR."Transaction Location" as TRANSACTION_LOCATION,
    substr(TR."Transaction Location", 1, 3) as LOCATION,
    /* RS 04/11/2024 Add Employment Type and Pay Level columns */
    ifnull(case PAYROLL_TYPE 
	when 'Fortnightly' then 
	    case substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2) 
            when 'CA' then 'CASF'
		    when 'CS' then 'CASF'
		    when 'FP' then 'FFP'
		    when 'FT' then 'FFT'
		    when 'PP' then 'FPT'
		    when 'PTFT' then 'FXPT'
		    when 'PT' then 'FPP'
		    when 'FPA' then 'FXFT'
		    when 'FTFT' then 'FXFT'
		    when 'PPA' then 'FXPT'
		    when 'CO' then 'CON'
		    when 'FTS' then 'FTSEC'
            else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
	    end
	when 'Monthly' then 
	    case substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2) 
		    when 'CA' then 'CA'
		    when 'CS' then 'CA'
		    when 'FTFT' then 'FPA'
		    when 'PPTS' then 'PPTSM'
		    when 'PTFT' then 'PPA'
		    when 'FTS' then 'FTSM'
		    when 'CO' then 'CON'
            else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
	    end
	when 'Weekly' then 
	    case substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2) 
		    when 'CA' then 'CASW'
		    when 'CS' then 'CASW'
		    when 'FP' then 'PFT'
		    when 'FT' then 'TFT'
		    when 'PP' then 'PPT'
		    when 'PT' then 'TPT'
		    when 'FPA' then 'XFT'
		    when 'PPA' then 'XPT'
		    when 'FTFT' then 'XFT'
		    when 'FTS' then 'FTS'
		    when 'FTST' then 'FTST'
		    when 'PPTS' then 'PPTS'
		    when 'CO' then 'CON'
            else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
        end
        else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
	end, 'Unlinked') as EMPLOYMENT_TYPE, 
    ifnull(ifnull(ED."Pay Class Code",TR."Pay Class Code"),'Unlinked') as PAY_LEVEL_CODE,
    TR."Pay Point" as PAY_POINT,
    case
        when substr(TR."Cost Account Code", 15, 7) between '0000000'
        and '9999999' then case
            when substr(TR."Cost Account Code", 15, 2) = '00' then substr(TR."Cost Account Code", 17, 5)
            else case
                when substr(TR."Cost Account Code", 15, 1) = '0' then substr(TR."Cost Account Code", 16, 6)
                else substr(TR."Cost Account Code", 15, 7)
            end
        end
        else substr(TR."Cost Account Code", 1, 5)
    end as COST_CENTRE,
    case 
        when TR."Pay Frequency" = 'FORTNIGHTLY' 
            then ifnull(TR."EFT Payment Date",TR."Pay End Date for Previous Earnings") 
        else TR."Pay End Date for Previous Earnings" 
    end as PAY_END_DATE_FOR_PREVIOUS_EARNINGS,
    TR."Pay End Date for Previous Earnings" as REFERENCE_DATE,
    TR."Transaction Type" as TRANSACTION_TYPE,
    TR."Pay Comp/Add Ded Code" as PAY_COMPONENT_ADD_DED_CODE,
    TR."Leave Reason Code" as LEAVE_REASON_CODE,
    TR."Leave Start Date" as LEAVE_START_DATE,
    TR."Leave End Date" as LEAVE_END_DATE,
    sum(TR."Hours") as TRANSACTION_HOURS,
    to_numeric(
        ifnull(
            sum(
                case
                    when (
                        right(TR."Post Type", 8) = 'Subtract'
                        or TR."Pay Comp/Add Ded Code" = 'RDODeduct'
                    ) then TR."Hours" * -1
                    else TR."Hours"
                end
            ),
            0
        ),
        20,
        2
    ) as HOURS,
    to_numeric(
        ifnull(
            sum(
                case
                    when (
                        right(TR."Post Type", 8) = 'Subtract'
                        or TR."Transaction Type" in (
                            'Standard Ded Before',
                            'Non Standard Ded Before',
                            'RDO Deduct'
                        )
                    ) then TR."Amount" * -1
                    else TR."Amount"
                end
            ),
            0
        ),
        20,
        2
    ) as AMOUNT
from
    _ipvRBEmpTransactionsALL_cte TR
    left join _ipvRBMEmpDetails_cte ED on TR."Employee ID" = ED."Employee ID"
    left join _eivCostAccounts_cte as CA on CA."Cost Account Code" = TR."Cost Account Code"
where
    (
        TR."Hours" <> 0
        or TR."Amount" <> 0
    )
    /* RS 20/11/2024 - Remove null print date entries to fix up duplications, e.g. Heidi Edmiston, etc. */
    and TR."Pay Advice Print Date" is not null
group by
    all
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION_MONTHLY(
	PAYROLL_TYPE,
	PAY_FREQUENCY,
	WORKER_CODE,
	PAYROLL_TAX_CODE,
	TRANSACTION_LOCATION,
	LOCATION,
	EMPLOYMENT_TYPE,
	PAY_LEVEL_CODE,
	PAY_POINT,
	COST_CENTRE,
	PAY_END_DATE_FOR_PREVIOUS_EARNINGS,
	REFERENCE_DATE,
	TRANSACTION_TYPE,
	PAY_COMPONENT_ADD_DED_CODE,
	LEAVE_REASON_CODE,
	LEAVE_START_DATE,
	LEAVE_END_DATE,
	TRANSACTION_HOURS,
	HOURS,
	AMOUNT
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with 

_ipvLeaveReasons_cte as (
select LR.idLeaveReason,
	LR.cCode,
	LR.cDescription,
	case LR.iLeaveTypeID
		when 0 then 'Sick Leave'
		when 1 then 'Annual Leave'
		when 2 then 'Long Service Leave'
		when 3 then 'Other'
		else concat(UL.cCode,' - ',UL.cDescription)
	end as sLeaveType
    from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLEAVEREASONS AS LR
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLUSERDEFINEDLEAVE AS UL on LR.iLeaveClassID = UL.idLeave and LR.iLeaveTypeID = 6
),

_eivAdditionsDeductions_cte as (
with _ipfnGetAddsDeds as (
    select
        ATD.iAddDeductID idAddDeductid,
        AD.cCode ADcCode,
        ATD.cDescription,
        ATD.cShortcutKey,
        ATD.idAdditionsDeductionsTD
    from
        BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLADDITIONSDEDUCTIONS AD
        left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLADDITIONSDEDUCTIONS_TD ATD on AD.idAddDeduct = ATD.iAddDeductID
)
select
    idAddDeductid "Add/Ded ID",
    idAdditionsDeductionsTD "Add/Ded TD ID",
    ADcCode "Code",
    cDescription "Description",
    cShortcutKey "Shortcut Key"
from
    _ipfnGetAddsDeds
),

_eivCostAccounts_cte as (
select
	idCostAccount "Cost Account ID",
	cCostCode "Cost Account Code",
	cDescription "Cost Account Description",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCOSTACCOUNTS
where
    bActive = 1 
    and iPosition = (
        select MAX(iPosition) 
        from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE
        )
),

_eivLeaveReasons_cte as (
select 
    idLeaveReason "Leave Reason ID",
    cCode "Code",
    cDescription "Description"
from
    _ipvLeaveReasons_cte
),

_eivLocations_cte as (
select 
    idLocation "Location ID", 
    cLocation "Location"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLOCATIONS
),

_eivEmpContractHours_cte as (
select
    E.idEmployee "Employee ID",
    E.iContractHoursID "Contract Hours ID",
    CH.cCode "Contract Hours Code",
    CH.cDescription "Contract Hours Description",
    CH.fHoursPerDay "Hours per Day",
    CH.fDaysPerWeek "Days per Week",
    CH.fDaysPerWeek * CH.fHoursPerDay "Hours Per Week"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEE E
left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCONTRACTHOURS CH on CH.idContractHours = E.iContractHoursID
),

_eivPayMethods_cte as (
select '0' as "Pay Method ID", 'Envelope' as "Pay Method"
union
select '1' as "Pay Method ID", 'Direct Deposit' as "Pay Method"
union
select '2' as "Pay Method ID", 'Transfer EFT' as "Pay Method"
union
select '3' as "Pay Method ID", 'Advice Only' as "Pay Method"
),

_eivPayClasses_cte as (
select
	idPayClass "Pay Class ID",
	cCode "Code",
    cDescription "Description"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYCLASSES 
),

_eivRateFactors_cte as (
select
	idRateFactor "Rate Factor ID",
	cCode "Code",
	cDescription "Description"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLRATEFACTORS
),

_eivSuperContributions_cte as (
select
    idSuperScheme "Super Contribution ID",
    cCode "Code",
    cDescription "Description"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLSUPERSCHEME
),

_eivSuperFunds_cte as (
select
	idSuperFund "Super Fund ID",
	cCode "Code",
	cFundName "Fund Name"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLSUPERFUND 
),

_eivPayrollCompanies_cte as (
select
	idPayer "Payroll Company ID",
	cCode "Code", cPayerName "Payroll Company Name"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYERGROUPS
),

_eivPayPoints_cte as (
select 
    idPayPoint "Pay Point ID", 
    cPayPoint "Pay Point"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYPOINTS
),

_ipvEmployeeTransCurrent_cte as (
select TR.idEmployeeTrans,1 bCurrentYear
,(select top 1 Year(EndTaxYear) from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO.DEFAULTS) as iYearEndingID, TR.iEmployeeID, TR.iPeriodID, TR.iSickLeaveID, TR.iAnnualLeaveID, TR.iLongServiceLeaveID, TR.iAddsDedsID, TR.iOtherLeaveID, TR.iPostType, TR.iCostAccountID
, TR.bPosted, TR.dEffectiveDate, TR.dEndDate, TR.dRecommenceDate, TR.iNoOfPayPeriod, TR.iPayAdvice, TR.bIncludeInPayslip, TR.bPayslipPrinted, TR.bEFT, TR.iEFTExportLogID, TR.fHours
, TR.fUnits, TR.fPercent, TR.fRate, TR.fAmount, TR.fLoadingRate, TR.fLoadingPercent, TR.fLoadingAmount, TR.iUDTransType, TR.iUDHoursWorked, TR.iLeaveReasonID
, TR.iOTRateFactorID, TR.fOTRateFactor, TR.iPayClassID, TR.iAddDedType, TR.iHoursThatApply, TR.iSuperSchemeID, TR.iSuperFundID, TR.fSuperCalcedOn, TR.bRDODeduct, TR.bIncludeRDOHours
, TR.fRDOAddDedBank, TR.iPayPointID, TR.fTermTax, TR.dPEPayDate, TR.iAdjustmentPeriod, TR.bSuperProcessed, TR.dPayAdvicePrinted, TR.fQualValue, TR.fSGLCalcedOn, TR.fSGLActuallyPaid
, TR.fSGLHoursWorked, TR.dSuperProcessedDate, TR.bTransModified, TR.fSGLEmpAge, TR.iPayClassGroup, TR.iUDLeaveType, TR.bCreditorProcessed, TR.iPayrollCompanyID, TR.iLocationID, TR.bALPaid
, TR.iALLink, TR.cJobCode, TR.iValidateID, TR.bTerminationTransition, TR.iEMSExportNZID, TR.bNZUsedLowerLumpSumRate, TR.cNZChildSupportCode, TR.iRateTypeID, TR.fNZLumpSumTaxRate, TR.iUDLeaveClassID
, TR.bSystemGenerated, TR.fSGLSalaryAndWagesAmount, TR.fSGLSalaryAndWagesHours, TR.iPayFrequencyID, TR.iPayrollTaxID, TR.iFrequency, TR.iTransFrequency, TR.iCreateAgentID, TR.iCreateSource, TR.dCreateDate
, TR.iCreateImportID, TR.iChangeAgentID, TR.iChangeSource, TR.dChangeDate, TR.iChangeImportID, TR.iAwardID, TR.iAwardCategoryID, TR.iETPPaymentCode
, TR.fLumpSumEAmount, TR.iStp2IncomeType, TR.iStp2CountryID, TR.iLumpSumEFY
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEETRANS  TR
),

_ipvEmployeeTransEOY_cte as (
select TR.idEmployeeTransEOY as idEmployeeTrans,0 bCurrentYear
, TR.iYearEndingID, TR.iEmployeeID, TR.iPeriodID, TR.iSickLeaveID, TR.iAnnualLeaveID, TR.iLongServiceLeaveID, TR.iAddsDedsID, TR.iOtherLeaveID, TR.iPostType, TR.iCostAccountID
, TR.bPosted, TR.dEffectiveDate, TR.dEndDate, TR.dRecommenceDate, TR.iNoOfPayPeriod, TR.iPayAdvice, TR.bIncludeInPayslip, TR.bPayslipPrinted, TR.bEFT, TR.iEFTExportLogID, TR.fHours
, TR.fUnits, TR.fPercent, TR.fRate, TR.fAmount, TR.fLoadingRate, TR.fLoadingPercent, TR.fLoadingAmount, TR.iUDTransType, TR.iUDHoursWorked, TR.iLeaveReasonID
, TR.iOTRateFactorID, TR.fOTRateFactor, TR.iPayClassID, TR.iAddDedType, TR.iHoursThatApply, TR.iSuperSchemeID, TR.iSuperFundID, TR.fSuperCalcedOn, TR.bRDODeduct, TR.bIncludeRDOHours
, TR.fRDOAddDedBank, TR.iPayPointID, TR.fTermTax, TR.dPEPayDate, TR.iAdjustmentPeriod, TR.bSuperProcessed, TR.dPayAdvicePrinted, TR.fQualValue, TR.fSGLCalcedOn, TR.fSGLActuallyPaid
, TR.fSGLHoursWorked, TR.dSuperProcessedDate, TR.bTransModified, TR.fSGLEmpAge, TR.iPayClassGroup, TR.iUDLeaveType, TR.bCreditorProcessed, TR.iPayrollCompanyID, TR.iLocationID, TR.bALPaid
, TR.iALLink, TR.cJobCode, TR.iValidateID, TR.bTerminationTransition, TR.iEMSExportNZID, TR.bNZUsedLowerLumpSumRate, TR.cNZChildSupportCode, TR.iRateTypeID, TR.fNZLumpSumTaxRate, TR.iUDLeaveClassID
, TR.bSystemGenerated, TR.fSGLSalaryAndWagesAmount, TR.fSGLSalaryAndWagesHours, TR.iPayFrequencyID, TR.iPayrollTaxID, TR.iFrequency, TR.iTransFrequency, TR.iCreateAgentID, TR.iCreateSource, TR.dCreateDate
, TR.iCreateImportID, TR.iChangeAgentID, TR.iChangeSource, TR.dChangeDate, TR.iChangeImportID, TR.iAwardID, TR.iAwardCategoryID, TR.iETPPaymentCode
, TR.fLumpSumEAmount, TR.iStp2IncomeType, TR.iStp2CountryID, TR.iLumpSumEFY
from BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEETRANSEOY  TR
),

_eivEmpTransCurrent_cte as (
select
    idEmployeeTrans "Transaction ID",
    AD.idAdditionsDeductionsTD "Add/Deds TD",
    RD.idratetypetd "Rate Type TD",
    PD.idpayclasstd "Pay Class TD",
    iEmployeeID "Employee ID",
    iPeriodID "Period ID",
    iSickLeaveID "Sick Leave ID",
    iAnnualLeaveID "Annual Leave ID",
    iLongServiceLeaveID "Long Service Leave ID",
    iAddsDedsID "Adds/Deds ID",
    iOtherLeaveID "Other Leave ID",
    iPostType,
    case
        iPostType
        when 0 then 'Timesheet'
        when 1 then 'Termination'
        when 2 then 'Manual Calculation Add'
        when 3 then 'Manual Calculation Subtract'
        when 4 then 'Previous Earnings'
        when 5 then 'Backpay'
        when 6 then 'Period End'
        when 7 then 'Year End'
        when 8 then 'Adjustment Add'
        when 9 then 'Adjustment Subtract'
        when 10 then 'Cost Adjustment Add'
        when 11 then 'Cost Adjustment Subtract'
        when 12 then 'Migration Previous Earnings'
        when 13 then 'Previous Year Adjustment'
    end "Post Type",
    ET.iCostAccountID "Cost Account ID",
    bPosted,
    case
        when bPosted = TRUE then 'Yes'
        else 'No'
    end "Posted",
    ET.dEffectiveDate "Effective Date",
    ET.dEndDate "End Date",
    ET.dRecommenceDate "Recommence Date",
    case
        iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Pay Period Pay Frequency",
    iNoOfPayPeriod "Number of Periods",
    iPayAdvice "Advice Number",
    case
        when bEFT = TRUE then 'Yes'
        else 'No'
    end "Generate Payment",
    iEFTExportLogID "EFT Export Log ID",
    fHours "Hours",
    fUnits "Units",
    ET.fPercent "Percent",
    ET.fRate "Rate",
    ET.fAmount "Amount",
    fLoadingRate "Loading Rate",
    fLoadingPercent "Loading Percent",
    fLoadingAmount "Loading Amount",
    case
        iUDTransType
        when 0 then 'Sick Leave'
        when 1 then 'Annual Leave'
        when 2 then 'Hours By Rate'
        when 3 then 'Non Standard Add Before'
        when 4 then 'Non Standard Add After'
        when 5 then 'Non Standard Ded Before'
        when 6 then 'Non Standard Ded After'
        when 7 then 'Standard Add Before'
        when 8 then 'Standard Add After'
        when 9 then 'Standard Ded Before'
        when 10 then 'Standard Ded After'
        when 11 then 'Long Service Leave'
        when 12 then 'Other Leave'
        when 13 then 'Auto Pay'
        when 14 then 'Tax'
        when 15 then 'Super'
        when 16 then 'Super Adjustment'
        when 17 then 'RDO Deduct'
        when 18 then 'RDO Pay'
        when 19 then 'Term Pre 78 LSL Comp B'
        when 20 then 'Term Pre 93 LSL Comp A'
        when 21 then 'Term Post 93 LSL Gross'
        when 22 then 'Term Post 93 LSL Comp A'
        when 23 then 'Term Pre 93 AL Comp A'
        when 24 then 'Term Post 93 AL Gross'
        when 25 then 'Term AL Comp A'
        when 26 then 'Term Pre 93 LL Comp A'
        when 27 then 'Term Post 93 LL Gross'
        when 28 then 'Term LL Comp A'
        when 29 then 'Term AL Death'
        when 30 then 'Term LL Death'
        when 31 then 'Term LSL Death'
        when 32 then 'Term Sick Leave'
        when 33 then 'Term RDO'
        when 34 then 'Term Lump Sum'
        when 35 then 'Term Lump Sum D'
        when 36 then concat(
            'Term ETP - Tax Free',
            case
                iETPPaymentCode
                when 0 then ''
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        )
        when 37 then concat(
            'Term ETP - Taxable',
            case
                iETPPaymentCode
                when 0 then ' '
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        ) --when 38 then 'Term Assessable Amount' Not used
        when 39 then 'Term ETP - Invalidity'
        when 40 then 'Net Pay'
        when 41 then 'Non Standard Tax Adj'
        when 42 then 'Standard Tax Adj'
        when 43 then 'STSL' --HECS
        when 44 then 'SFSS'
        when 45 then 'RDO Migration'
        when 46 then 'Student Loan'
        when 47 then 'Term PH Gross'
        when 48 then 'Term EL Gross'
        when 49 then 'Term SL Gross'
        when 50 then 'Term RDO Gross'
        when 51 then 'Term AL Prorata'
        when 53 then 'Term ETP (Superable) - Tax Free'
        when 54 then 'Term ETP (Superable) - Taxable'
        when 52 then 'Term Redundancy/Retirement'
        when 55 then 'User Defined Leave'
        when 57 then 'Term User Defined Leave'
        when 62 then 'Term Golden Handshake'
        when 63 then 'Term Gratuity'
        when 64 then 'Term Early Retirement Scheme'
        when 65 then 'Term Genuine Redundancy'
        when 66 then 'Term Invalidity'
        when 67 then 'Term Compensation'
        when 68 then 'Term Non Genuine Redundancy'
        when 69 then 'Term Death'
        when 70 then 'Term Severance'
    end "Transaction Type",
    case
        ET.iUDHoursWorked
        when 0 then 'Normal'
        when 1 then 'Time Half'
        when 2 then 'Double Time'
        when 3 then 'Award'
        when 4 then 'Extra Pay'
        when 5 then 'Penalty'
        when 6 then 'Other'
        when 7 then 'Other Leave'
        when 8 then 'Sick Leave'
        when 9 then 'Annual Leave'
        when 10 then 'Long Service Leave'
        when 11 then 'Public Holiday Leave'
        when 12 then 'Extra Leave'
        when 13 then 'Half Sick Leave'
        when 14 then 'User Defined Leave'
        when 15 then 'Overtime'
    end "Hours Worked",
    iLeaveReasonID "Leave Reason ID",
    iOTRateFactorID "OT Rate Factor ID",
    fOTRateFactor "OT Rate Factor",
    ET.iPayClassID "Pay Class ID",
    iAddDedType,
    case
        iAddDedType
        when 0 then 'Amount'
        when 1 then 'Rate'
        when 2 then 'Percent'
        when 3 then 'Unit'
    end "Addition/Deduction Type",
    iSuperSchemeID "Super Contribution ID",
    iSuperFundID "Super Fund ID",
    fSuperCalcedOn "Super Calculated On",
    ET.bRDODeduct,
    iPayPointID "Pay Point ID",
    fTermTax "Term Tax",
    dPEPayDate "Previous Earnings Date",
    iAdjustmentPeriod "Adjustment Period ID",
    bSuperProcessed,
    case
        when bSuperProcessed = TRUE then 'Yes'
        else 'No'
    end "Super Processed",
    dPayAdvicePrinted "Advice Printed Date",
    fQualValue "Qualification Value",
    fSGLCalcedOn "SGL Calculated On",
    fSGLActuallyPaid "SGL Actually Paid",
    fSGLHoursWorked "SGL hours Worked",
    dSuperProcessedDate "Super Process Date",
    fSGLEmpAge "SGL Age",
    iPayClassGroup "Pay Class Group ID",
    iPayrollCompanyID "Transaction Payroll Company ID",
    iLocationID "Transaction Location ID",
    cJobCode "Job Code",
    case
        when bTerminationTransition = TRUE then 'Yes'
        else 'No'
    end "Transitional Terminiation Payment",
    iUDLeaveClassID "User Defined Leave ID"
from
    _ipvEmployeeTransCurrent_cte ET
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLADDITIONSDEDUCTIONS_TD AD on AD.iAddDeductID = ET.iAddsDedsID and (((ET.dEffectiveDate >= AD.dEffectiveDate) and ((ET.dEffectiveDate <= AD.dEndDate) or (IfNull(AD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= AD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLRATETYPES_TD RD on RD.iratetypeid = ET.iratetypeid and (((ET.dEffectiveDate >= RD.dEffectiveDate) and ((ET.dEffectiveDate <= RD.dEndDate) or (IfNull(RD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= RD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYCLASSES_TD PD on PD.ipayclassid = ET.ipayclassid and (((ET.dEffectiveDate >= PD.dEffectiveDate) and ((ET.dEffectiveDate <= PD.dEndDate) or (IfNull(PD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= PD.dEffectiveDate))
),

_eivEmpTransEOY_cte as (
select
	idEmployeeTrans "Transaction ID",
	AD.idAdditionsDeductionsTD "Add/Deds TD",
	RD.idratetypetd "Rate Type TD",
	PD.idpayclasstd "Pay Class TD",
	iEmployeeID "Employee ID",
	iPeriodID "Period ID",
	iSickLeaveID "Sick Leave ID",
	iAnnualLeaveID "Annual Leave ID",
	iLongServiceLeaveID "Long Service Leave ID",
	iAddsDedsID "Adds/Deds ID",
	iOtherLeaveID "Other Leave ID",
	iPostType,
    case
        iPostType
        when 0 then 'Timesheet'
        when 1 then 'Termination'
        when 2 then 'Manual Calculation Add'
        when 3 then 'Manual Calculation Subtract'
        when 4 then 'Previous Earnings'
        when 5 then 'Backpay'
        when 6 then 'Period End'
        when 7 then 'Year End'
        when 8 then 'Adjustment Add'
        when 9 then 'Adjustment Subtract'
        when 10 then 'Cost Adjustment Add'
        when 11 then 'Cost Adjustment Subtract'
        when 12 then 'Migration Previous Earnings'
        when 13 then 'Previous Year Adjustment'
    end "Post Type",
	ET.iCostAccountID "Cost Account ID",
	bPosted,
    case
        when bPosted = TRUE then 'Yes'
        else 'No'
    end "Posted",
	ET.dEffectiveDate "Effective Date",
	ET.dEndDate "End Date",
	dRecommenceDate "Recommence Date",
    case
        iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Pay Period Pay Frequency",
	iNoOfPayPeriod "Number of Periods",
	iPayAdvice "Advice Number",
    case
        when bEFT = TRUE then 'Yes'
        else 'No'
    end "Generate Payment",
	iEFTExportLogID "EFT Export Log ID",
	fHours "Hours",
	fUnits "Units",
	ET.fPercent "Percent",
	ET.fRate "Rate",
	ET.fAmount "Amount",
	fLoadingRate "Loading Rate",
	fLoadingPercent "Loading Percent",
	fLoadingAmount "Loading Amount",
	iUDTransType,
    case
        iUDTransType
        when 0 then 'Sick Leave'
        when 1 then 'Annual Leave'
        when 2 then 'Hours By Rate'
        when 3 then 'Non Standard Add Before'
        when 4 then 'Non Standard Add After'
        when 5 then 'Non Standard Ded Before'
        when 6 then 'Non Standard Ded After'
        when 7 then 'Standard Add Before'
        when 8 then 'Standard Add After'
        when 9 then 'Standard Ded Before'
        when 10 then 'Standard Ded After'
        when 11 then 'Long Service Leave'
        when 12 then 'Other Leave'
        when 13 then 'Auto Pay'
        when 14 then 'Tax'
        when 15 then 'Super'
        when 16 then 'Super Adjustment'
        when 17 then 'RDO Deduct'
        when 18 then 'RDO Pay'
        when 19 then 'Term Pre 78 LSL Comp B'
        when 20 then 'Term Pre 93 LSL Comp A'
        when 21 then 'Term Post 93 LSL Gross'
        when 22 then 'Term Post 93 LSL Comp A'
        when 23 then 'Term Pre 93 AL Comp A'
        when 24 then 'Term Post 93 AL Gross'
        when 25 then 'Term AL Comp A'
        when 26 then 'Term Pre 93 LL Comp A'
        when 27 then 'Term Post 93 LL Gross'
        when 28 then 'Term LL Comp A'
        when 29 then 'Term AL Death'
        when 30 then 'Term LL Death'
        when 31 then 'Term LSL Death'
        when 32 then 'Term Sick Leave'
        when 33 then 'Term RDO'
        when 34 then 'Term Lump Sum'
        when 35 then 'Term Lump Sum D'
        when 36 then concat(
            'Term ETP - Tax Free',
            case
                iETPPaymentCode
                when 0 then ''
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        )
        when 37 then concat(
            'Term ETP - Taxable',
            case
                iETPPaymentCode
                when 0 then ' '
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        ) --when 38 then 'Term Assessable Amount' Not used
        when 39 then 'Term ETP - Invalidity'
        when 40 then 'Net Pay'
        when 41 then 'Non Standard Tax Adj'
        when 42 then 'Standard Tax Adj'
        when 43 then 'STSL' --HECS
        when 44 then 'SFSS'
        when 45 then 'RDO Migration'
        when 46 then 'Student Loan'
        when 47 then 'Term PH Gross'
        when 48 then 'Term EL Gross'
        when 49 then 'Term SL Gross'
        when 50 then 'Term RDO Gross'
        when 51 then 'Term AL Prorata'
        when 53 then 'Term ETP (Superable) - Tax Free'
        when 54 then 'Term ETP (Superable) - Taxable'
        when 52 then 'Term Redundancy/Retirement'
        when 55 then 'User Defined Leave'
        when 57 then 'Term User Defined Leave'
        when 62 then 'Term Golden Handshake'
        when 63 then 'Term Gratuity'
        when 64 then 'Term Early Retirement Scheme'
        when 65 then 'Term Genuine Redundancy'
        when 66 then 'Term Invalidity'
        when 67 then 'Term Compensation'
        when 68 then 'Term Non Genuine Redundancy'
        when 69 then 'Term Death'
        when 70 then 'Term Severance'
    end "Transaction Type",
	ET.iUDHoursWorked,
	case ET.iUDHoursWorked
		when 0 then 'Normal'
		when 1 then 'Time Half'
		when 2 then 'Double Time'
		when 3 then 'Award'
		when 4 then 'Extra Pay'
		when 5 then 'Penalty'
		when 6 then 'Other'
		when 7 then 'Other Leave'
		when 8 then 'Sick Leave'
		when 9 then 'Annual Leave'
		when 10 then 'Long Service Leave'
		when 11 then 'Public Holiday Leave'
		when 12 then 'Extra Leave'
		when 13 then 'Half Sick Leave'
		when 14 then 'User Defined Leave'
		when 15 then 'Overtime'
	end "Hours Worked",
	iLeaveReasonID "Leave Reason ID",
    iOTRateFactorID "OT Rate Factor ID",
	fOTRateFactor "OT Rate Factor",
    ET.iPayClassID "Pay Class ID",
    ET.iAddDedType,
	case ET.iAddDedType
		when 0 then 'Amount'
		when 1 then 'Rate'
		when 2 then 'Percent'
		when 3 then 'Unit'
	end "Addition/Deduction Type",
    iSuperSchemeID "Super Contribution ID",
    iSuperFundID "Super Fund ID",
	fSuperCalcedOn "Super Calculated On",
    iPayPointID "Pay Point ID",
	fTermTax "Term Tax",
	dPEPayDate "Previous Earnings Date",
	iAdjustmentPeriod "Adjustment Period ID",
	bSuperProcessed,
    case
        when bSuperProcessed = TRUE then 'Yes'
        else 'No'
    end "Super Processed",
	dPayAdvicePrinted "Advice Printed Date",
	fQualValue "Qualification Value",
	fSGLCalcedOn "SGL Calculated On",
	fSGLActuallyPaid "SGL Actually Paid",
	fSGLHoursWorked "SGL hours Worked",
	dSuperProcessedDate "Super Process Date",
	fSGLEmpAge "SGL Age",
	iPayClassGroup "Pay Class Group ID",
	iPayrollCompanyID "Transaction Payroll Company ID",
	iLocationID "Transaction Location ID",
	cJobCode "Job Code",
    case
        when bTerminationTransition = TRUE then 'Yes'
        else 'No'
    end "Transitional Terminiation Payment",
	iUDLeaveClassID "User Defined Leave ID"
from 
    _ipvEmployeeTransEOY_cte ET
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLADDITIONSDEDUCTIONS_TD AD on AD.iAddDeductID = ET.iAddsDedsID and (((ET.dEffectiveDate >= AD.dEffectiveDate) and ((ET.dEffectiveDate <= AD.dEndDate) or (IfNull(AD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= AD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLRATETYPES_TD RD on RD.iratetypeid= ET.iratetypeid and (((ET.dEffectiveDate >= RD.dEffectiveDate) and ((ET.dEffectiveDate <= RD.dEndDate) or (IfNull(RD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= RD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYCLASSES_TD PD on PD.ipayclassid = ET.ipayclassid and (((ET.dEffectiveDate >= PD.dEffectiveDate) and ((ET.dEffectiveDate <= PD.dEndDate) or (IfNull(PD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= PD.dEffectiveDate))
),

_eivEmpHeader_cte as (
select
    E.idEmployee "Employee ID",
    E.cEmpCode "Employee Code",
    E.cSurname "Surname",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then E.cFirstName
        else left(
            E.cFirstName,
            charindex(' ', E.cFirstName, 0) - 1
        )
    end as "First Name",
    E.cMiddleName "Middle Name",
    E.cPreferredName "EmpPrefName",
    E.cFirstName "Given Names",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then ''
        else substr(
            E.cFirstName,
            (charindex(' ', E.cFirstName, 0) + 1),
            len(E.cFirstName)
        )
    end as "Other Names",
    concat(E.cFirstName, ' ', E.cSurname) "Full Name",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then concat(E.cSurname, ' ', left(E.cFirstName, 1), '.')
        else concat(
            E.cSurname,
            ' ',
            left(E.cFirstName, 1),
            '. ',
            substr(
                E.cFirstName,
                (charindex(' ', E.cFirstName, 0) + 1),
                1
            ),
            '.'
        )
    end as "Surname with Initials",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then concat(left(E.cFirstName, 1), '.')
        else concat(
            left(E.cFirstName, 1),
            '. ',
            substr(
                E.cFirstName,
                (charindex(' ', E.cFirstName, 0) + 1),
                1
            ),
            '.'
        )
    end as "Initials",
    E.dHiredDate "Hired Date",
    case
        when E.bTerminated = TRUE then case
            when dateadd(
                year,
                datediff(year, E.dHiredDate, E.dTerminationDate),
                E.dHiredDate
            ) > E.dTerminationDate then datediff(year, E.dHiredDate, E.dTerminationDate) - 1
            else datediff(year, E.dHiredDate, E.dTerminationDate)
        end
        else case
            when dateadd(
                year,
                datediff(year, E.dHiredDate, GETDATE()),
                E.dHiredDate
            ) > GETDATE() then datediff(year, E.dHiredDate, GETDATE()) - 1
            else datediff(year, E.dHiredDate, GETDATE())
        end
    end "Years of Service",
    E.iPayerGroupID "Payroll Company ID",
    PG.cCode "Payroll Company Code",
    PG.cPayerName "Payroll Company Description",
    concat(PG.cCode, ' - ', PG.cPayerName) "Payroll Company",
    E.iPayFrequencyID "Pay Frequency ID",
    PF.cCode "Pay Frequency Code",
    PF.cDescription "Pay Frequency Description",
    case
        PF.iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Frequency",
    case
        PF.iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Pay Frequency",
    E.iLocationID "Location ID",
    L.cLocation "Location",
    PP.cPayPoint "Pay Point",
    E.iEmploymentTypeID "Employment Type ID",
    ET.cEmploymentType "Employment Type",
    E.iDefaultCostAccount "Default Cost Account ID",
    CA.cCostCode "Default Cost Account Code",
    CA.cDescription "Default Cost Account Description",
    CA.cCostCode "Default Cost Account",
    PF.iFrequency "Tax Pay Frequency ID",
    case
        PF.iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Tax Pay Frequency",
    PM."Pay Method" "Payment Method",
    case
        E.iGenerateAutopay
        when 0 then 'Yes'
        when 1 then 'No'
        when 2 then 'Suspend'
        when 3 then 'Workplanner'
    end as "AutoPay",
    case
        when E.bIsAnnualisedSalary = TRUE then 'Yes'
        else 'No'
    end "Annualised Salary",
    E.dAnnualisedAnniversaryDate "Annualised Salary Anniversary Date",
    '' "Current Period Start Date",
    E.bTerminated as "Employee Terminated",
    case
        when E.dTerminationDate < '5' then ''
        else E.dTerminationDate
    end as "Termination Date",
    E.iTerminatedPeriodID "Terminated Period ID",
    TR.cTerminationReason as "Termination Reason",
    CH."Contract Hours Code",
    CH."Contract Hours Description",
    CH."Hours per Day",
    CH."Days per Week",
    CH."Hours per Day" * CH."Days per Week" "Contract Hours Per Week",
    E.iWorkmansCompID "Workers Compensation ID"
from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEE E
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYFREQUENCIES PF ON E.iPayFrequencyID = PF.idPayFrequency
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYERGROUPS PG on E.iPayerGroupID = PG.idPayer
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLOCATIONS L ON E.iLocationID = L.idLocation
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYPOINTS PP ON E.iPayPointID = PP.idPayPoint
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYMENTTYPES ET ON E.iEmploymentTypeID = ET.idEmploymentType
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLCOSTACCOUNTS CA ON CA.idCostAccount = E.iDefaultCostAccount
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLTERMINATIONREASON TR on TR.idTerminationReason = E.iTerminationReasonID
    left join _eivEmpContractHours_cte CH on E.idEmployee = CH."Employee ID"
    left join _eivPayMethods_cte PM ON PM."Pay Method ID" = E.iPayMethodID
),

_ipvRBEmpHeader_cte as (
select
E."Employee ID",
E."Employee Code",
E."Surname",
E."First Name",
E."Middle Name",
E."EmpPrefName" AS "Preferred Name",
E."Given Names",
E."Other Names",
E."Full Name",
E."Surname with Initials",
E."Initials",
E."Hired Date",
E."Years of Service",
E."Payroll Company ID",
E."Payroll Company Code",
E."Payroll Company Description",
E."Payroll Company",
E."Pay Frequency ID",
E."Pay Frequency",
E."Pay Frequency Code",
E."Location ID",
E."Location",
E."Pay Point",
E."Employment Type",
E."Default Cost Account Code",
E."Default Cost Account Description",
E."Default Cost Account Code" "Default Cost Account",
E."Tax Pay Frequency ID",
E."Tax Pay Frequency",
E."Payment Method",
E."AutoPay",
E."Current Period Start Date",
E."Employee Terminated",
E."Termination Date",
E."Termination Reason",
E."Hours per Day" "Contract Hours Per Day",
E."Days per Week" "Contract Days Per Week",
E."Contract Hours Per Week",
E."Contract Hours Per Week" "Contract Hours",
E."Contract Hours Code",
E."Contract Hours Description",
E."Annualised Salary",
E."Annualised Salary Anniversary Date",
from _eivEmpHeader_cte E
),

_ipvRBMEmpDetails_cte as (
SELECT
    EH.*,
    /* RS 04/11/2024 Add Employment Type and Pay Level columns */
    PC.cCode "Pay Class Code",
    PC.cDescription "Pay Class Description",
    PT.cCode "Payroll Tax Code"
FROM BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEMPLOYEE E
    left join _ipvRBEmpHeader_cte EH on EH."Employee ID" = E.idEmployee
    /* RS 04/11/2024 Add Employment Type and Pay Level columns */
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._iptblPayClasses PC on PC.idPayClass = E.iPayClassID
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLPAYROLLTAX PT on PT.idPayrollTax = E.iPayrollTaxID
),

_ipvRBEmpTransactions_cte as (
SELECT
	EH.*,
	ET."Period ID" "Pay Period ID",
	SL.cCode "SL Code",
	SL.cDescription "SL Description",
	AL.cCode "AL Code",
	AL.cDescription "AL Description",
	LSL.cCode "LSL Code",
	LSL.cDescription "LSL Description",
	UL.cCode "UL Code",
	UL.cDescription "UL Description",
	case UL.cCode
		when 'EL0001' then 'Annual'
		when 'PH0001' then 'Annual'
		else AD."Code"
	end "Pay Comp/Add Ded Code",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else AD."Description"
	end "Pay Comp/Add Ded Desc",
	AD."Shortcut Key" "Shortcut Key",
	ET."Other Leave ID",
	ET."Post Type",
	ET."Posted" "Period End Processed",
	ET."Effective Date" "Leave Start Date",
	ET."End Date" "Leave End Date",
	ET."Recommence Date" "Recommence Date",
	ET."Pay Period Pay Frequency",
	ET."Number of Periods" "Number of Periods",
	ET."Advice Number" "Pay Advice Number",
	ET."Generate Payment",
	EL.dDateProcessedByBank "EFT Payment Date",
	sum(ifnull(ET."Hours",0)) "Hours",
	sum(ifnull(ET."Hours" / EH."Contract Hours Per Day", 0)) "Days",
	ifnull(ET."Units", 0) "Unit",
	ifnull(ET."Rate", 0) "Rate",
	ifnull(ET."Percent", 0) "Percent",
	sum(ifnull(ET."Amount", 0)) "Amount",
	ifnull(ET."Loading Rate", 0) "Loading Rate",
	ifnull(ET."Loading Percent", 0) "Loading Percent",
	sum(ifnull(ET."Loading Amount", 0)) "Loading Amount",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else ET."Transaction Type"
	end "Transaction Type",
	case UL.cCode
		when 'EL0001' then 'Extra Leave'
		when 'PH0001' then 'Public Holiday Leave'
		else ET."Hours Worked"
	end "Hours Worked Type",
	TCA."Cost Account Code",
	TCA."Cost Account Description",
	LR."Code" "Leave Reason Code",
	LR."Description" "Leave Reason Description",
	RF."Code" "Rate Factor Code",
	RF."Description" "Rate Factor Description",
	ET."OT Rate Factor" "Rate Factor",
	PC."Code" "Pay Class Code",
	PC."Description" "Pay Class Description",
	ET."Addition/Deduction Type",
	SC."Code" "Super Contribution Code",
	SC."Description" "Super Contribution Description",
	SF."Code" "Super Fund Code",
	SF."Fund Name" "Super Fund Description",
	ET."Super Calculated On" "Super Calculated On",
	EH."Pay Frequency" "Employee Pay Frequency",
	ET."Term Tax" "Termination Tax",
	ET."Previous Earnings Date" "Pay End Date for Previous Earnings",
	ET."Advice Printed Date" "Pay Advice Print Date",
	ET."Qualification Value" "Qualification Value",
	ET."SGL Actually Paid" "SGL Actually Paid",
	ET."SGL hours Worked" "SGL Hours Worked",
	ET."Super Process Date" "Date Super Process Completed",
	ET."SGL Age" "SGL Age",
	L1."Location" "Transaction Location",
	PG."Payroll Company Name" "Transaction Payroll Company",
	ET."Job Code",
	ET."Transitional Terminiation Payment",
	ET."Transaction Payroll Company ID",
	PP."Pay Point" "Transaction Pay Point",
    ET."Pay Class Group ID"
FROM _ipvRBEmpHeader_cte EH
	left join _eivEmpTransCurrent_cte ET ON ET."Employee ID" = EH."Employee ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLSICKLEAVE SL ON SL.idLeave = ET."Sick Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLANNUALLEAVE AL ON AL.idLeave = ET."Annual Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLONGSERVICELEAVE LSL ON LSL.idLeave = ET."Long Service Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLUSERDEFINEDLEAVE UL ON UL.idLeave = ET."User Defined Leave ID"
	left join _eivAdditionsDeductions_cte AD on AD."Add/Ded ID" = ET."Adds/Deds ID"
    left join _eivPayClasses_cte PC on PC."Pay Class ID" = ET."Pay Class ID"
	left join _eivCostAccounts_cte TCA ON TCA."Cost Account ID" = ET."Cost Account ID"
	left join _eivLeaveReasons_cte LR ON LR."Leave Reason ID" = ET."Leave Reason ID"
	left join _eivRateFactors_cte RF ON RF."Rate Factor ID" = ET."OT Rate Factor ID"
	left join _eivSuperContributions_cte SC ON SC."Super Contribution ID"= ET."Super Contribution ID"
	left join _eivSuperFunds_cte SF ON SF."Super Fund ID" = ET."Super Fund ID"
	left join _eivLocations_cte L1 ON L1."Location ID" = ET."Transaction Location ID"
	left join _eivPayrollCompanies_cte PG ON PG."Payroll Company ID" = ET."Transaction Payroll Company ID"
    left join _eivPayPoints_cte PP on PP."Pay Point ID" = ET."Pay Point ID"
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEFTEXPORTLOG EL on ET."EFT Export Log ID" = EL.idEFTExportLog
group by all
),

_ipvRBEmpTransactionsEOY_cte as (
SELECT
	EH.*,
	ET."Period ID" "Pay Period ID",
	SL.cCode "SL Code",
	SL.cDescription "SL Description",
	case UL.cCode
		when 'EL0001' then 'EL0001'
		when 'PH0001' then 'PH0001'
		else AL.cCode
	end "AL Code",
	case UL.cCode
		when 'EL0001' then UL.cDescription
		when 'PH0001' then UL.cDescription
		else AL.cDescription
	end "AL Description",
	LSL.cCode "LSL Code",
	LSL.cDescription "LSL Description",
	UL.cCode "UL Code",
	UL.cDescription "UL Description",
	case UL.cCode
		when 'EL0001' then 'Annual'
		when 'PH0001' then 'Annual'
		else AD."Code"
	end "Pay Comp/Add Ded Code",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else AD."Description"
	end "Pay Comp/Add Ded Desc",
	AD."Shortcut Key" "Shortcut Key",
	ET."Other Leave ID",
	ET."Post Type",
	ET."Posted" "Period End Processed",
	ET."Effective Date" "Leave Start Date",
	ET."End Date" "Leave End Date",
	ET."Recommence Date" "Recommence Date",
	ET."Pay Period Pay Frequency",
	ET."Number of Periods" "Number of Periods",
	ET."Advice Number" "Pay Advice Number",
	ET."Generate Payment",
	EL.dDateProcessedByBank "EFT Payment Date",
	sum(ifnull(ET."Hours",0)) "Hours",
	sum(ifnull(ET."Hours" / EH."Contract Hours Per Day", 0)) "Days",
	ifnull(ET."Units", 0) "Unit",
	ifnull(ET."Rate", 0) "Rate",
	ifnull(ET."Percent", 0) "Percent",
	sum(ifnull(ET."Amount", 0)) "Amount",
	ifnull(ET."Loading Rate", 0) "Loading Rate",
	ifnull(ET."Loading Percent", 0) "Loading Percent",
	sum(ifnull(ET."Loading Amount", 0)) "Loading Amount",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else ET."Transaction Type"
	end "Transaction Type",
	case UL.cCode
		when 'EL0001' then 'Extra Leave'
		when 'PH0001' then 'Public Holiday Leave'
		else ET."Hours Worked"
	end "Hours Worked Type",
	TCA."Cost Account Code",
	TCA."Cost Account Description",
	LR."Code" "Leave Reason Code",
	LR."Description" "Leave Reason Description",
	RF."Code" "Rate Factor Code",
	RF."Description" "Rate Factor Description",
	ET."OT Rate Factor" "Rate Factor",
	PC."Code" "Pay Class Code",
	PC."Description" "Pay Class Description",
	ET."Addition/Deduction Type",
	SC."Code" "Super Contribution Code",
	SC."Description" "Super Contribution Description",
	SF."Code" "Super Fund Code",
	SF."Fund Name" "Super Fund Description",
	ET."Super Calculated On" "Super Calculated On",
	EH."Pay Frequency" "Employee Pay Frequency",
	ET."Term Tax" "Termination Tax",
	ET."Previous Earnings Date" "Pay End Date for Previous Earnings",
	ET."Advice Printed Date" "Pay Advice Print Date",
	ET."Qualification Value" "Qualification Value",
	ET."SGL Actually Paid" "SGL Actually Paid",
	ET."SGL hours Worked" "SGL Hours Worked",
	ET."Super Process Date" "Date Super Process Completed",
	ET."SGL Age" "SGL Age",
	L1."Location" "Transaction Location",
	PG."Payroll Company Name" "Transaction Payroll Company",
	ET."Job Code",
	ET."Transitional Terminiation Payment",
	ET."Transaction Payroll Company ID",
	PP."Pay Point" "Transaction Pay Point",
    ET."Pay Class Group ID"
FROM _ipvRBEmpHeader_cte EH
	left join _eivEmpTransEOY_cte ET ON ET."Employee ID" = EH."Employee ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLSICKLEAVE SL ON SL.idLeave = ET."Sick Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLANNUALLEAVE AL ON AL.idLeave = ET."Annual Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLLONGSERVICELEAVE LSL ON LSL.idLeave = ET."Long Service Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLUSERDEFINEDLEAVE UL ON UL.idLeave = ET."User Defined Leave ID"
	left join _eivAdditionsDeductions_cte AD on AD."Add/Ded ID" = ET."Adds/Deds ID"
    left join _eivPayClasses_cte PC on PC."Pay Class ID" = ET."Pay Class ID"
    left join _eivCostAccounts_cte TCA ON TCA."Cost Account ID" = ET."Cost Account ID"
	left join _eivLeaveReasons_cte LR ON LR."Leave Reason ID" = ET."Leave Reason ID"
    left join _eivRateFactors_cte RF ON RF."Rate Factor ID" = ET."OT Rate Factor ID"
	left join _eivSuperContributions_cte SC ON SC."Super Contribution ID"= ET."Super Contribution ID"
	left join _eivSuperFunds_cte SF ON SF."Super Fund ID" = ET."Super Fund ID"
    left join _eivLocations_cte L1 ON L1."Location ID" = ET."Transaction Location ID"
	left join _eivPayrollCompanies_cte PG ON PG."Payroll Company ID" = ET."Transaction Payroll Company ID"
    left join _eivPayPoints_cte PP on PP."Pay Point ID" = ET."Pay Point ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_MONTHLY_DBO._IPTBLEFTEXPORTLOG EL on ET."EFT Export Log ID" = EL.idEFTExportLog
group by all
),

_ipvRBEmpTransactionsALL_cte as (
select * from _ipvRBEmpTransactions_cte
union 
select * from _ipvRBEmpTransactionsEOY_cte
)

select
    'Monthly' as PAYROLL_TYPE,
    TR."Pay Frequency" as PAY_FREQUENCY,
    /* RS 13/09/2024 Remove leading Z's from employee code */
    -- TR."Employee Code" as WORKER_CODE,
    case when substring(TR."Employee Code",1,1) in ('Z','z') then case when len(TR."Employee Code") < 8 then replace(replace(TR."Employee Code",'Z',''),'z','') else concat('1',substring(TR."Employee Code",2,len(TR."Employee Code")-1)) end else TR."Employee Code" end as WORKER_CODE,
    substr(ED."Payroll Tax Code", 3, 3) as PAYROLL_TAX_CODE,
    TR."Transaction Location" as TRANSACTION_LOCATION,
    substr(TR."Transaction Location", 1, 3) as LOCATION,
    /* RS 04/11/2024 Add Employment Type and Pay Level columns */
    ifnull(case TRANSACTION_LOCATION 
	when '900 Directors' then 'DIR'
    else
    case PAYROLL_TYPE 
	when 'Fortnightly' then 
	    case substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2) 
            when 'CA' then 'CASF'
		    when 'CS' then 'CASF'
		    when 'FP' then 'FFP'
		    when 'FT' then 'FFT'
		    when 'PP' then 'FPT'
		    when 'PTFT' then 'FXPT'
		    when 'PT' then 'FPP'
		    when 'FPA' then 'FXFT'
		    when 'FTFT' then 'FXFT'
		    when 'PPA' then 'FXPT'
		    when 'CO' then 'CON'
		    when 'FTS' then 'FTSEC'
            else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
	    end
	when 'Monthly' then 
	    case substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2) 
		    when 'CA' then 'CA'
		    when 'CS' then 'CA'
		    when 'FTFT' then 'FPA'
		    when 'PPTS' then 'PPTSM'
		    when 'PTFT' then 'PPA'
		    when 'FTS' then 'FTSM'
		    when 'CO' then 'CON'
            else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
	    end
	when 'Weekly' then 
	    case substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2) 
		    when 'CA' then 'CASW'
		    when 'CS' then 'CASW'
		    when 'FP' then 'PFT'
		    when 'FT' then 'TFT'
		    when 'PP' then 'PPT'
		    when 'PT' then 'TPT'
		    when 'FPA' then 'XFT'
		    when 'PPA' then 'XPT'
		    when 'FTFT' then 'XFT'
		    when 'FTS' then 'FTS'
		    when 'FTST' then 'FTST'
		    when 'PPTS' then 'PPTS'
		    when 'CO' then 'CON'
            else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
        end
        else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
	end end, 'Unlinked') as EMPLOYMENT_TYPE, 
    ifnull(ifnull(ED."Pay Class Code",TR."Pay Class Code"),'Unlinked') as PAY_LEVEL_CODE,
    TR."Pay Point" as PAY_POINT,
    case
        when substr(TR."Cost Account Code", 15, 7) between '0000000'
        and '9999999' then case
            when substr(TR."Cost Account Code", 15, 2) = '00' then substr(TR."Cost Account Code", 17, 5)
            else case
                when substr(TR."Cost Account Code", 15, 1) = '0' then substr(TR."Cost Account Code", 16, 6)
                else substr(TR."Cost Account Code", 15, 7)
            end
        end
        else substr(TR."Cost Account Code", 1, 5)
    end as COST_CENTRE,
    case 
        when TR."Pay Frequency" = 'Monthly' 
            then ifnull(TR."EFT Payment Date",TR."Pay End Date for Previous Earnings") 
        else TR."Pay End Date for Previous Earnings" 
    end as PAY_END_DATE_FOR_PREVIOUS_EARNINGS,
    TR."Pay End Date for Previous Earnings" as REFERENCE_DATE,
    TR."Transaction Type" as TRANSACTION_TYPE,
    TR."Pay Comp/Add Ded Code" as PAY_COMPONENT_ADD_DED_CODE,
    TR."Leave Reason Code" as LEAVE_REASON_CODE,
    TR."Leave Start Date" as LEAVE_START_DATE,
    TR."Leave End Date" as LEAVE_END_DATE,
    /* RS 06/11/2024 Directors are excluded from headcount, etc. as per TM1 */
    ifnull(sum(case when EMPLOYMENT_TYPE != 'DIR' then TR."Hours" end), 0) as TRANSACTION_HOURS,
    to_numeric(
        ifnull(
            sum(
                case
                    when (
                        right(TR."Post Type", 8) = 'Subtract'
                        or TR."Pay Comp/Add Ded Code" = 'RDODeduct'
                    ) then case when EMPLOYMENT_TYPE != 'DIR' then TR."Hours" end * -1
                    else case when EMPLOYMENT_TYPE != 'DIR' then TR."Hours" end
                end
            ),
            0
        ),
        20,
        2
    ) as HOURS,
    to_numeric(
        ifnull(
            sum(
                case
                    when (
                        right(TR."Post Type", 8) = 'Subtract'
                        or TR."Transaction Type" in (
                            'Standard Ded Before',
                            'Non Standard Ded Before',
                            'RDO Deduct'
                        )
                    ) then case when EMPLOYMENT_TYPE != 'DIR' then TR."Amount" end * -1
                    else case when EMPLOYMENT_TYPE != 'DIR' then TR."Amount" end
                end
            ),
            0
        ),
        20,
        2
    ) as AMOUNT
from
    _ipvRBEmpTransactionsALL_cte TR
    left join _ipvRBMEmpDetails_cte ED on TR."Employee ID" = ED."Employee ID"
    left join _eivCostAccounts_cte as CA on CA."Cost Account Code" = TR."Cost Account Code"
where
    (
        TR."Hours" <> 0
        or TR."Amount" <> 0
    )
    /* RS 20/11/2024 - Remove null print date entries to fix up duplications, e.g. Heidi Edmiston, etc. */
    and TR."Pay Advice Print Date" is not null
group by
    all
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION_WEEKLY(
	PAYROLL_TYPE,
	PAY_FREQUENCY,
	WORKER_CODE,
	PAYROLL_TAX_CODE,
	TRANSACTION_LOCATION,
	LOCATION,
	EMPLOYMENT_TYPE,
	PAY_LEVEL_CODE,
	PAY_POINT,
	COST_CENTRE,
	PAY_END_DATE_FOR_PREVIOUS_EARNINGS,
	REFERENCE_DATE,
	TRANSACTION_TYPE,
	PAY_COMPONENT_ADD_DED_CODE,
	LEAVE_REASON_CODE,
	LEAVE_START_DATE,
	LEAVE_END_DATE,
	TRANSACTION_HOURS,
	HOURS,
	AMOUNT
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with 

_ipvLeaveReasons_cte as (
select LR.idLeaveReason,
	LR.cCode,
	LR.cDescription,
	case LR.iLeaveTypeID
		when 0 then 'Sick Leave'
		when 1 then 'Annual Leave'
		when 2 then 'Long Service Leave'
		when 3 then 'Other'
		else concat(UL.cCode,' - ',UL.cDescription)
	end as sLeaveType
    from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLLEAVEREASONS AS LR
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLUSERDEFINEDLEAVE AS UL on LR.iLeaveClassID = UL.idLeave and LR.iLeaveTypeID = 6
),

_eivAdditionsDeductions_cte as (
with _ipfnGetAddsDeds as (
    select
        ATD.iAddDeductID idAddDeductid,
        AD.cCode ADcCode,
        ATD.cDescription,
        ATD.cShortcutKey,
        ATD.idAdditionsDeductionsTD
    from
        BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLADDITIONSDEDUCTIONS AD
        left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLADDITIONSDEDUCTIONS_TD ATD on AD.idAddDeduct = ATD.iAddDeductID
)
select
    idAddDeductid "Add/Ded ID",
    idAdditionsDeductionsTD "Add/Ded TD ID",
    ADcCode "Code",
    cDescription "Description",
    cShortcutKey "Shortcut Key"
from
    _ipfnGetAddsDeds
),

_eivCostAccounts_cte as (
select
	idCostAccount "Cost Account ID",
	cCostCode "Cost Account Code",
	cDescription "Cost Account Description",
    _FIVETRAN_SYNCED as VERSION_TIMESTAMP
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCOSTACCOUNTS
where
    bActive = 1 
    and iPosition = (
        select MAX(iPosition) 
        from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCOSTACCOUNTSTRUCTURE
        )
),

_eivLeaveReasons_cte as (
select 
    idLeaveReason "Leave Reason ID",
    cCode "Code",
    cDescription "Description"
from
    _ipvLeaveReasons_cte
),

_eivLocations_cte as (
select 
    idLocation "Location ID", 
    cLocation "Location"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLLOCATIONS
),

_eivEmpContractHours_cte as (
select
    E.idEmployee "Employee ID",
    E.iContractHoursID "Contract Hours ID",
    CH.cCode "Contract Hours Code",
    CH.cDescription "Contract Hours Description",
    CH.fHoursPerDay "Hours per Day",
    CH.fDaysPerWeek "Days per Week",
    CH.fDaysPerWeek * CH.fHoursPerDay "Hours Per Week"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYEE E
left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCONTRACTHOURS CH on CH.idContractHours = E.iContractHoursID
),

_eivPayMethods_cte as (
select '0' as "Pay Method ID", 'Envelope' as "Pay Method"
union
select '1' as "Pay Method ID", 'Direct Deposit' as "Pay Method"
union
select '2' as "Pay Method ID", 'Transfer EFT' as "Pay Method"
union
select '3' as "Pay Method ID", 'Advice Only' as "Pay Method"
),

_eivPayClasses_cte as (
select
	idPayClass "Pay Class ID",
	cCode "Code",
    cDescription "Description"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYCLASSES 
),

_eivRateFactors_cte as (
select
	idRateFactor "Rate Factor ID",
	cCode "Code",
	cDescription "Description"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLRATEFACTORS
),

_eivSuperContributions_cte as (
select
    idSuperScheme "Super Contribution ID",
    cCode "Code",
    cDescription "Description"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLSUPERSCHEME
),

_eivSuperFunds_cte as (
select
	idSuperFund "Super Fund ID",
	cCode "Code",
	cFundName "Fund Name"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLSUPERFUND 
),

_eivPayrollCompanies_cte as (
select
	idPayer "Payroll Company ID",
	cCode "Code", cPayerName "Payroll Company Name"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYERGROUPS
),

_eivPayPoints_cte as (
select 
    idPayPoint "Pay Point ID", 
    cPayPoint "Pay Point"
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYPOINTS
),

_ipvEmployeeTransCurrent_cte as (
select TR.idEmployeeTrans,1 bCurrentYear
,(select top 1 Year(EndTaxYear) from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO.DEFAULTS) as iYearEndingID, TR.iEmployeeID, TR.iPeriodID, TR.iSickLeaveID, TR.iAnnualLeaveID, TR.iLongServiceLeaveID, TR.iAddsDedsID, TR.iOtherLeaveID, TR.iPostType, TR.iCostAccountID
, TR.bPosted, TR.dEffectiveDate, TR.dEndDate, TR.dRecommenceDate, TR.iNoOfPayPeriod, TR.iPayAdvice, TR.bIncludeInPayslip, TR.bPayslipPrinted, TR.bEFT, TR.iEFTExportLogID, TR.fHours
, TR.fUnits, TR.fPercent, TR.fRate, TR.fAmount, TR.fLoadingRate, TR.fLoadingPercent, TR.fLoadingAmount, TR.iUDTransType, TR.iUDHoursWorked, TR.iLeaveReasonID
, TR.iOTRateFactorID, TR.fOTRateFactor, TR.iPayClassID, TR.iAddDedType, TR.iHoursThatApply, TR.iSuperSchemeID, TR.iSuperFundID, TR.fSuperCalcedOn, TR.bRDODeduct, TR.bIncludeRDOHours
, TR.fRDOAddDedBank, TR.iPayPointID, TR.fTermTax, TR.dPEPayDate, TR.iAdjustmentPeriod, TR.bSuperProcessed, TR.dPayAdvicePrinted, TR.fQualValue, TR.fSGLCalcedOn, TR.fSGLActuallyPaid
, TR.fSGLHoursWorked, TR.dSuperProcessedDate, TR.bTransModified, TR.fSGLEmpAge, TR.iPayClassGroup, TR.iUDLeaveType, TR.bCreditorProcessed, TR.iPayrollCompanyID, TR.iLocationID, TR.bALPaid
, TR.iALLink, TR.cJobCode, TR.iValidateID, TR.bTerminationTransition, TR.iEMSExportNZID, TR.bNZUsedLowerLumpSumRate, TR.cNZChildSupportCode, TR.iRateTypeID, TR.fNZLumpSumTaxRate, TR.iUDLeaveClassID
, TR.bSystemGenerated, TR.fSGLSalaryAndWagesAmount, TR.fSGLSalaryAndWagesHours, TR.iPayFrequencyID, TR.iPayrollTaxID, TR.iFrequency, TR.iTransFrequency, TR.iCreateAgentID, TR.iCreateSource, TR.dCreateDate
, TR.iCreateImportID, TR.iChangeAgentID, TR.iChangeSource, TR.dChangeDate, TR.iChangeImportID, TR.iAwardID, TR.iAwardCategoryID, TR.iETPPaymentCode
, TR.fLumpSumEAmount, TR.iStp2IncomeType, TR.iStp2CountryID, TR.iLumpSumEFY
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYEETRANS  TR
),

_ipvEmployeeTransEOY_cte as (
select TR.idEmployeeTransEOY as idEmployeeTrans,0 bCurrentYear
, TR.iYearEndingID, TR.iEmployeeID, TR.iPeriodID, TR.iSickLeaveID, TR.iAnnualLeaveID, TR.iLongServiceLeaveID, TR.iAddsDedsID, TR.iOtherLeaveID, TR.iPostType, TR.iCostAccountID
, TR.bPosted, TR.dEffectiveDate, TR.dEndDate, TR.dRecommenceDate, TR.iNoOfPayPeriod, TR.iPayAdvice, TR.bIncludeInPayslip, TR.bPayslipPrinted, TR.bEFT, TR.iEFTExportLogID, TR.fHours
, TR.fUnits, TR.fPercent, TR.fRate, TR.fAmount, TR.fLoadingRate, TR.fLoadingPercent, TR.fLoadingAmount, TR.iUDTransType, TR.iUDHoursWorked, TR.iLeaveReasonID
, TR.iOTRateFactorID, TR.fOTRateFactor, TR.iPayClassID, TR.iAddDedType, TR.iHoursThatApply, TR.iSuperSchemeID, TR.iSuperFundID, TR.fSuperCalcedOn, TR.bRDODeduct, TR.bIncludeRDOHours
, TR.fRDOAddDedBank, TR.iPayPointID, TR.fTermTax, TR.dPEPayDate, TR.iAdjustmentPeriod, TR.bSuperProcessed, TR.dPayAdvicePrinted, TR.fQualValue, TR.fSGLCalcedOn, TR.fSGLActuallyPaid
, TR.fSGLHoursWorked, TR.dSuperProcessedDate, TR.bTransModified, TR.fSGLEmpAge, TR.iPayClassGroup, TR.iUDLeaveType, TR.bCreditorProcessed, TR.iPayrollCompanyID, TR.iLocationID, TR.bALPaid
, TR.iALLink, TR.cJobCode, TR.iValidateID, TR.bTerminationTransition, TR.iEMSExportNZID, TR.bNZUsedLowerLumpSumRate, TR.cNZChildSupportCode, TR.iRateTypeID, TR.fNZLumpSumTaxRate, TR.iUDLeaveClassID
, TR.bSystemGenerated, TR.fSGLSalaryAndWagesAmount, TR.fSGLSalaryAndWagesHours, TR.iPayFrequencyID, TR.iPayrollTaxID, TR.iFrequency, TR.iTransFrequency, TR.iCreateAgentID, TR.iCreateSource, TR.dCreateDate
, TR.iCreateImportID, TR.iChangeAgentID, TR.iChangeSource, TR.dChangeDate, TR.iChangeImportID, TR.iAwardID, TR.iAwardCategoryID, TR.iETPPaymentCode
, TR.fLumpSumEAmount, TR.iStp2IncomeType, TR.iStp2CountryID, TR.iLumpSumEFY
from BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYEETRANSEOY  TR
),

_eivEmpTransCurrent_cte as (
select
    idEmployeeTrans "Transaction ID",
    AD.idAdditionsDeductionsTD "Add/Deds TD",
    RD.idratetypetd "Rate Type TD",
    PD.idpayclasstd "Pay Class TD",
    iEmployeeID "Employee ID",
    iPeriodID "Period ID",
    iSickLeaveID "Sick Leave ID",
    iAnnualLeaveID "Annual Leave ID",
    iLongServiceLeaveID "Long Service Leave ID",
    iAddsDedsID "Adds/Deds ID",
    iOtherLeaveID "Other Leave ID",
    iPostType,
    case
        iPostType
        when 0 then 'Timesheet'
        when 1 then 'Termination'
        when 2 then 'Manual Calculation Add'
        when 3 then 'Manual Calculation Subtract'
        when 4 then 'Previous Earnings'
        when 5 then 'Backpay'
        when 6 then 'Period End'
        when 7 then 'Year End'
        when 8 then 'Adjustment Add'
        when 9 then 'Adjustment Subtract'
        when 10 then 'Cost Adjustment Add'
        when 11 then 'Cost Adjustment Subtract'
        when 12 then 'Migration Previous Earnings'
        when 13 then 'Previous Year Adjustment'
    end "Post Type",
    ET.iCostAccountID "Cost Account ID",
    bPosted,
    case
        when bPosted = TRUE then 'Yes'
        else 'No'
    end "Posted",
    ET.dEffectiveDate "Effective Date",
    ET.dEndDate "End Date",
    ET.dRecommenceDate "Recommence Date",
    case
        iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Pay Period Pay Frequency",
    iNoOfPayPeriod "Number of Periods",
    iPayAdvice "Advice Number",
    case
        when bEFT = TRUE then 'Yes'
        else 'No'
    end "Generate Payment",
    iEFTExportLogID "EFT Export Log ID",
    fHours "Hours",
    fUnits "Units",
    ET.fPercent "Percent",
    ET.fRate "Rate",
    ET.fAmount "Amount",
    fLoadingRate "Loading Rate",
    fLoadingPercent "Loading Percent",
    fLoadingAmount "Loading Amount",
    case
        iUDTransType
        when 0 then 'Sick Leave'
        when 1 then 'Annual Leave'
        when 2 then 'Hours By Rate'
        when 3 then 'Non Standard Add Before'
        when 4 then 'Non Standard Add After'
        when 5 then 'Non Standard Ded Before'
        when 6 then 'Non Standard Ded After'
        when 7 then 'Standard Add Before'
        when 8 then 'Standard Add After'
        when 9 then 'Standard Ded Before'
        when 10 then 'Standard Ded After'
        when 11 then 'Long Service Leave'
        when 12 then 'Other Leave'
        when 13 then 'Auto Pay'
        when 14 then 'Tax'
        when 15 then 'Super'
        when 16 then 'Super Adjustment'
        when 17 then 'RDO Deduct'
        when 18 then 'RDO Pay'
        when 19 then 'Term Pre 78 LSL Comp B'
        when 20 then 'Term Pre 93 LSL Comp A'
        when 21 then 'Term Post 93 LSL Gross'
        when 22 then 'Term Post 93 LSL Comp A'
        when 23 then 'Term Pre 93 AL Comp A'
        when 24 then 'Term Post 93 AL Gross'
        when 25 then 'Term AL Comp A'
        when 26 then 'Term Pre 93 LL Comp A'
        when 27 then 'Term Post 93 LL Gross'
        when 28 then 'Term LL Comp A'
        when 29 then 'Term AL Death'
        when 30 then 'Term LL Death'
        when 31 then 'Term LSL Death'
        when 32 then 'Term Sick Leave'
        when 33 then 'Term RDO'
        when 34 then 'Term Lump Sum'
        when 35 then 'Term Lump Sum D'
        when 36 then concat(
            'Term ETP - Tax Free',
            case
                iETPPaymentCode
                when 0 then ''
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        )
        when 37 then concat(
            'Term ETP - Taxable',
            case
                iETPPaymentCode
                when 0 then ' '
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        ) --when 38 then 'Term Assessable Amount' Not used
        when 39 then 'Term ETP - Invalidity'
        when 40 then 'Net Pay'
        when 41 then 'Non Standard Tax Adj'
        when 42 then 'Standard Tax Adj'
        when 43 then 'STSL' --HECS
        when 44 then 'SFSS'
        when 45 then 'RDO Migration'
        when 46 then 'Student Loan'
        when 47 then 'Term PH Gross'
        when 48 then 'Term EL Gross'
        when 49 then 'Term SL Gross'
        when 50 then 'Term RDO Gross'
        when 51 then 'Term AL Prorata'
        when 53 then 'Term ETP (Superable) - Tax Free'
        when 54 then 'Term ETP (Superable) - Taxable'
        when 52 then 'Term Redundancy/Retirement'
        when 55 then 'User Defined Leave'
        when 57 then 'Term User Defined Leave'
        when 62 then 'Term Golden Handshake'
        when 63 then 'Term Gratuity'
        when 64 then 'Term Early Retirement Scheme'
        when 65 then 'Term Genuine Redundancy'
        when 66 then 'Term Invalidity'
        when 67 then 'Term Compensation'
        when 68 then 'Term Non Genuine Redundancy'
        when 69 then 'Term Death'
        when 70 then 'Term Severance'
    end "Transaction Type",
    case
        ET.iUDHoursWorked
        when 0 then 'Normal'
        when 1 then 'Time Half'
        when 2 then 'Double Time'
        when 3 then 'Award'
        when 4 then 'Extra Pay'
        when 5 then 'Penalty'
        when 6 then 'Other'
        when 7 then 'Other Leave'
        when 8 then 'Sick Leave'
        when 9 then 'Annual Leave'
        when 10 then 'Long Service Leave'
        when 11 then 'Public Holiday Leave'
        when 12 then 'Extra Leave'
        when 13 then 'Half Sick Leave'
        when 14 then 'User Defined Leave'
        when 15 then 'Overtime'
    end "Hours Worked",
    iLeaveReasonID "Leave Reason ID",
    iOTRateFactorID "OT Rate Factor ID",
    fOTRateFactor "OT Rate Factor",
    ET.iPayClassID "Pay Class ID",
    iAddDedType,
    case
        iAddDedType
        when 0 then 'Amount'
        when 1 then 'Rate'
        when 2 then 'Percent'
        when 3 then 'Unit'
    end "Addition/Deduction Type",
    iSuperSchemeID "Super Contribution ID",
    iSuperFundID "Super Fund ID",
    fSuperCalcedOn "Super Calculated On",
    ET.bRDODeduct,
    iPayPointID "Pay Point ID",
    fTermTax "Term Tax",
    dPEPayDate "Previous Earnings Date",
    iAdjustmentPeriod "Adjustment Period ID",
    bSuperProcessed,
    case
        when bSuperProcessed = TRUE then 'Yes'
        else 'No'
    end "Super Processed",
    dPayAdvicePrinted "Advice Printed Date",
    fQualValue "Qualification Value",
    fSGLCalcedOn "SGL Calculated On",
    fSGLActuallyPaid "SGL Actually Paid",
    fSGLHoursWorked "SGL hours Worked",
    dSuperProcessedDate "Super Process Date",
    fSGLEmpAge "SGL Age",
    iPayClassGroup "Pay Class Group ID",
    iPayrollCompanyID "Transaction Payroll Company ID",
    iLocationID "Transaction Location ID",
    cJobCode "Job Code",
    case
        when bTerminationTransition = TRUE then 'Yes'
        else 'No'
    end "Transitional Terminiation Payment",
    iUDLeaveClassID "User Defined Leave ID"
from
    _ipvEmployeeTransCurrent_cte ET
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLADDITIONSDEDUCTIONS_TD AD on AD.iAddDeductID = ET.iAddsDedsID and (((ET.dEffectiveDate >= AD.dEffectiveDate) and ((ET.dEffectiveDate <= AD.dEndDate) or (IfNull(AD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= AD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLRATETYPES_TD RD on RD.iratetypeid = ET.iratetypeid and (((ET.dEffectiveDate >= RD.dEffectiveDate) and ((ET.dEffectiveDate <= RD.dEndDate) or (IfNull(RD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= RD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYCLASSES_TD PD on PD.ipayclassid = ET.ipayclassid and (((ET.dEffectiveDate >= PD.dEffectiveDate) and ((ET.dEffectiveDate <= PD.dEndDate) or (IfNull(PD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= PD.dEffectiveDate))
),

_eivEmpTransEOY_cte as (
select
	idEmployeeTrans "Transaction ID",
	AD.idAdditionsDeductionsTD "Add/Deds TD",
	RD.idratetypetd "Rate Type TD",
	PD.idpayclasstd "Pay Class TD",
	iEmployeeID "Employee ID",
	iPeriodID "Period ID",
	iSickLeaveID "Sick Leave ID",
	iAnnualLeaveID "Annual Leave ID",
	iLongServiceLeaveID "Long Service Leave ID",
	iAddsDedsID "Adds/Deds ID",
	iOtherLeaveID "Other Leave ID",
	iPostType,
    case
        iPostType
        when 0 then 'Timesheet'
        when 1 then 'Termination'
        when 2 then 'Manual Calculation Add'
        when 3 then 'Manual Calculation Subtract'
        when 4 then 'Previous Earnings'
        when 5 then 'Backpay'
        when 6 then 'Period End'
        when 7 then 'Year End'
        when 8 then 'Adjustment Add'
        when 9 then 'Adjustment Subtract'
        when 10 then 'Cost Adjustment Add'
        when 11 then 'Cost Adjustment Subtract'
        when 12 then 'Migration Previous Earnings'
        when 13 then 'Previous Year Adjustment'
    end "Post Type",
	ET.iCostAccountID "Cost Account ID",
	bPosted,
    case
        when bPosted = TRUE then 'Yes'
        else 'No'
    end "Posted",
	ET.dEffectiveDate "Effective Date",
	ET.dEndDate "End Date",
	dRecommenceDate "Recommence Date",
    case
        iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Pay Period Pay Frequency",
	iNoOfPayPeriod "Number of Periods",
	iPayAdvice "Advice Number",
    case
        when bEFT = TRUE then 'Yes'
        else 'No'
    end "Generate Payment",
	iEFTExportLogID "EFT Export Log ID",
	fHours "Hours",
	fUnits "Units",
	ET.fPercent "Percent",
	ET.fRate "Rate",
	ET.fAmount "Amount",
	fLoadingRate "Loading Rate",
	fLoadingPercent "Loading Percent",
	fLoadingAmount "Loading Amount",
	iUDTransType,
    case
        iUDTransType
        when 0 then 'Sick Leave'
        when 1 then 'Annual Leave'
        when 2 then 'Hours By Rate'
        when 3 then 'Non Standard Add Before'
        when 4 then 'Non Standard Add After'
        when 5 then 'Non Standard Ded Before'
        when 6 then 'Non Standard Ded After'
        when 7 then 'Standard Add Before'
        when 8 then 'Standard Add After'
        when 9 then 'Standard Ded Before'
        when 10 then 'Standard Ded After'
        when 11 then 'Long Service Leave'
        when 12 then 'Other Leave'
        when 13 then 'Auto Pay'
        when 14 then 'Tax'
        when 15 then 'Super'
        when 16 then 'Super Adjustment'
        when 17 then 'RDO Deduct'
        when 18 then 'RDO Pay'
        when 19 then 'Term Pre 78 LSL Comp B'
        when 20 then 'Term Pre 93 LSL Comp A'
        when 21 then 'Term Post 93 LSL Gross'
        when 22 then 'Term Post 93 LSL Comp A'
        when 23 then 'Term Pre 93 AL Comp A'
        when 24 then 'Term Post 93 AL Gross'
        when 25 then 'Term AL Comp A'
        when 26 then 'Term Pre 93 LL Comp A'
        when 27 then 'Term Post 93 LL Gross'
        when 28 then 'Term LL Comp A'
        when 29 then 'Term AL Death'
        when 30 then 'Term LL Death'
        when 31 then 'Term LSL Death'
        when 32 then 'Term Sick Leave'
        when 33 then 'Term RDO'
        when 34 then 'Term Lump Sum'
        when 35 then 'Term Lump Sum D'
        when 36 then concat(
            'Term ETP - Tax Free',
            case
                iETPPaymentCode
                when 0 then ''
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        )
        when 37 then concat(
            'Term ETP - Taxable',
            case
                iETPPaymentCode
                when 0 then ' '
                when 1 then ' (Code: R)'
                when 2 then ' (Code: O)'
                when 3 then ' (Code: S)'
                when 4 then ' (Code: P)'
                when 5 then ' (Code: D)'
                when 6 then ' (Code: B)'
                when 7 then ' (Code: N)'
                when 8 then ' (Code: T)'
                when 9 then ' (Code: W)'
            end
        ) --when 38 then 'Term Assessable Amount' Not used
        when 39 then 'Term ETP - Invalidity'
        when 40 then 'Net Pay'
        when 41 then 'Non Standard Tax Adj'
        when 42 then 'Standard Tax Adj'
        when 43 then 'STSL' --HECS
        when 44 then 'SFSS'
        when 45 then 'RDO Migration'
        when 46 then 'Student Loan'
        when 47 then 'Term PH Gross'
        when 48 then 'Term EL Gross'
        when 49 then 'Term SL Gross'
        when 50 then 'Term RDO Gross'
        when 51 then 'Term AL Prorata'
        when 53 then 'Term ETP (Superable) - Tax Free'
        when 54 then 'Term ETP (Superable) - Taxable'
        when 52 then 'Term Redundancy/Retirement'
        when 55 then 'User Defined Leave'
        when 57 then 'Term User Defined Leave'
        when 62 then 'Term Golden Handshake'
        when 63 then 'Term Gratuity'
        when 64 then 'Term Early Retirement Scheme'
        when 65 then 'Term Genuine Redundancy'
        when 66 then 'Term Invalidity'
        when 67 then 'Term Compensation'
        when 68 then 'Term Non Genuine Redundancy'
        when 69 then 'Term Death'
        when 70 then 'Term Severance'
    end "Transaction Type",
	ET.iUDHoursWorked,
	case ET.iUDHoursWorked
		when 0 then 'Normal'
		when 1 then 'Time Half'
		when 2 then 'Double Time'
		when 3 then 'Award'
		when 4 then 'Extra Pay'
		when 5 then 'Penalty'
		when 6 then 'Other'
		when 7 then 'Other Leave'
		when 8 then 'Sick Leave'
		when 9 then 'Annual Leave'
		when 10 then 'Long Service Leave'
		when 11 then 'Public Holiday Leave'
		when 12 then 'Extra Leave'
		when 13 then 'Half Sick Leave'
		when 14 then 'User Defined Leave'
		when 15 then 'Overtime'
	end "Hours Worked",
	iLeaveReasonID "Leave Reason ID",
    iOTRateFactorID "OT Rate Factor ID",
	fOTRateFactor "OT Rate Factor",
    ET.iPayClassID "Pay Class ID",
    ET.iAddDedType,
	case ET.iAddDedType
		when 0 then 'Amount'
		when 1 then 'Rate'
		when 2 then 'Percent'
		when 3 then 'Unit'
	end "Addition/Deduction Type",
    iSuperSchemeID "Super Contribution ID",
    iSuperFundID "Super Fund ID",
	fSuperCalcedOn "Super Calculated On",
    iPayPointID "Pay Point ID",
	fTermTax "Term Tax",
	dPEPayDate "Previous Earnings Date",
	iAdjustmentPeriod "Adjustment Period ID",
	bSuperProcessed,
    case
        when bSuperProcessed = TRUE then 'Yes'
        else 'No'
    end "Super Processed",
	dPayAdvicePrinted "Advice Printed Date",
	fQualValue "Qualification Value",
	fSGLCalcedOn "SGL Calculated On",
	fSGLActuallyPaid "SGL Actually Paid",
	fSGLHoursWorked "SGL hours Worked",
	dSuperProcessedDate "Super Process Date",
	fSGLEmpAge "SGL Age",
	iPayClassGroup "Pay Class Group ID",
	iPayrollCompanyID "Transaction Payroll Company ID",
	iLocationID "Transaction Location ID",
	cJobCode "Job Code",
    case
        when bTerminationTransition = TRUE then 'Yes'
        else 'No'
    end "Transitional Terminiation Payment",
	iUDLeaveClassID "User Defined Leave ID"
from 
    _ipvEmployeeTransEOY_cte ET
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLADDITIONSDEDUCTIONS_TD AD on AD.iAddDeductID = ET.iAddsDedsID and (((ET.dEffectiveDate >= AD.dEffectiveDate) and ((ET.dEffectiveDate <= AD.dEndDate) or (IfNull(AD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= AD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLRATETYPES_TD RD on RD.iratetypeid= ET.iratetypeid and (((ET.dEffectiveDate >= RD.dEffectiveDate) and ((ET.dEffectiveDate <= RD.dEndDate) or (IfNull(RD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= RD.dEffectiveDate))
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYCLASSES_TD PD on PD.ipayclassid = ET.ipayclassid and (((ET.dEffectiveDate >= PD.dEffectiveDate) and ((ET.dEffectiveDate <= PD.dEndDate) or (IfNull(PD.dEndDate, '1900-01-01') <= '1900-01-01'))) OR (ET.dEffectiveDate <= PD.dEffectiveDate))
),

_eivEmpHeader_cte as (
select
    E.idEmployee "Employee ID",
    E.cEmpCode "Employee Code",
    E.cSurname "Surname",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then E.cFirstName
        else left(
            E.cFirstName,
            charindex(' ', E.cFirstName, 0) - 1
        )
    end as "First Name",
    E.cMiddleName "Middle Name",
    E.cPreferredName "EmpPrefName",
    E.cFirstName "Given Names",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then ''
        else substr(
            E.cFirstName,
            (charindex(' ', E.cFirstName, 0) + 1),
            len(E.cFirstName)
        )
    end as "Other Names",
    concat(E.cFirstName, ' ', E.cSurname) "Full Name",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then concat(E.cSurname, ' ', left(E.cFirstName, 1), '.')
        else concat(
            E.cSurname,
            ' ',
            left(E.cFirstName, 1),
            '. ',
            substr(
                E.cFirstName,
                (charindex(' ', E.cFirstName, 0) + 1),
                1
            ),
            '.'
        )
    end as "Surname with Initials",
    case
        charindex(' ', E.cFirstName, 0)
        when 0 then concat(left(E.cFirstName, 1), '.')
        else concat(
            left(E.cFirstName, 1),
            '. ',
            substr(
                E.cFirstName,
                (charindex(' ', E.cFirstName, 0) + 1),
                1
            ),
            '.'
        )
    end as "Initials",
    E.dHiredDate "Hired Date",
    case
        when E.bTerminated = TRUE then case
            when dateadd(
                year,
                datediff(year, E.dHiredDate, E.dTerminationDate),
                E.dHiredDate
            ) > E.dTerminationDate then datediff(year, E.dHiredDate, E.dTerminationDate) - 1
            else datediff(year, E.dHiredDate, E.dTerminationDate)
        end
        else case
            when dateadd(
                year,
                datediff(year, E.dHiredDate, GETDATE()),
                E.dHiredDate
            ) > GETDATE() then datediff(year, E.dHiredDate, GETDATE()) - 1
            else datediff(year, E.dHiredDate, GETDATE())
        end
    end "Years of Service",
    E.iPayerGroupID "Payroll Company ID",
    PG.cCode "Payroll Company Code",
    PG.cPayerName "Payroll Company Description",
    concat(PG.cCode, ' - ', PG.cPayerName) "Payroll Company",
    E.iPayFrequencyID "Pay Frequency ID",
    PF.cCode "Pay Frequency Code",
    PF.cDescription "Pay Frequency Description",
    case
        PF.iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Frequency",
    case
        PF.iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Pay Frequency",
    E.iLocationID "Location ID",
    L.cLocation "Location",
    PP.cPayPoint "Pay Point",
    E.iEmploymentTypeID "Employment Type ID",
    ET.cEmploymentType "Employment Type",
    E.iDefaultCostAccount "Default Cost Account ID",
    CA.cCostCode "Default Cost Account Code",
    CA.cDescription "Default Cost Account Description",
    CA.cCostCode "Default Cost Account",
    PF.iFrequency "Tax Pay Frequency ID",
    case
        PF.iFrequency
        when 0 then 'Weekly'
        when 1 then '2 Weekly'
        when 2 then '4 Weekly'
        when 3 then 'Fortnightly'
        when 4 then 'Bi-Monthly'
        when 5 then 'Monthly'
    end "Tax Pay Frequency",
    PM."Pay Method" "Payment Method",
    case
        E.iGenerateAutopay
        when 0 then 'Yes'
        when 1 then 'No'
        when 2 then 'Suspend'
        when 3 then 'Workplanner'
    end as "AutoPay",
    case
        when E.bIsAnnualisedSalary = TRUE then 'Yes'
        else 'No'
    end "Annualised Salary",
    E.dAnnualisedAnniversaryDate "Annualised Salary Anniversary Date",
    '' "Current Period Start Date",
    E.bTerminated as "Employee Terminated",
    case
        when E.dTerminationDate < '5' then ''
        else E.dTerminationDate
    end as "Termination Date",
    E.iTerminatedPeriodID "Terminated Period ID",
    TR.cTerminationReason as "Termination Reason",
    CH."Contract Hours Code",
    CH."Contract Hours Description",
    CH."Hours per Day",
    CH."Days per Week",
    CH."Hours per Day" * CH."Days per Week" "Contract Hours Per Week",
    E.iWorkmansCompID "Workers Compensation ID"
from
    BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYEE E
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYFREQUENCIES PF ON E.iPayFrequencyID = PF.idPayFrequency
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYERGROUPS PG on E.iPayerGroupID = PG.idPayer
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLLOCATIONS L ON E.iLocationID = L.idLocation
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYPOINTS PP ON E.iPayPointID = PP.idPayPoint
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYMENTTYPES ET ON E.iEmploymentTypeID = ET.idEmploymentType
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLCOSTACCOUNTS CA ON CA.idCostAccount = E.iDefaultCostAccount
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLTERMINATIONREASON TR on TR.idTerminationReason = E.iTerminationReasonID
    left join _eivEmpContractHours_cte CH on E.idEmployee = CH."Employee ID"
    left join _eivPayMethods_cte PM ON PM."Pay Method ID" = E.iPayMethodID
),

_ipvRBEmpHeader_cte as (
select
E."Employee ID",
E."Employee Code",
E."Surname",
E."First Name",
E."Middle Name",
E."EmpPrefName" AS "Preferred Name",
E."Given Names",
E."Other Names",
E."Full Name",
E."Surname with Initials",
E."Initials",
E."Hired Date",
E."Years of Service",
E."Payroll Company ID",
E."Payroll Company Code",
E."Payroll Company Description",
E."Payroll Company",
E."Pay Frequency ID",
E."Pay Frequency",
E."Pay Frequency Code",
E."Location ID",
E."Location",
E."Pay Point",
E."Employment Type",
E."Default Cost Account Code",
E."Default Cost Account Description",
E."Default Cost Account Code" "Default Cost Account",
E."Tax Pay Frequency ID",
E."Tax Pay Frequency",
E."Payment Method",
E."AutoPay",
E."Current Period Start Date",
E."Employee Terminated",
E."Termination Date",
E."Termination Reason",
E."Hours per Day" "Contract Hours Per Day",
E."Days per Week" "Contract Days Per Week",
E."Contract Hours Per Week",
E."Contract Hours Per Week" "Contract Hours",
E."Contract Hours Code",
E."Contract Hours Description",
E."Annualised Salary",
E."Annualised Salary Anniversary Date",
from _eivEmpHeader_cte E
),

_ipvRBMEmpDetails_cte as (
SELECT
    EH.*,
    /* RS 04/11/2024 Add Employment Type and Pay Level columns */
    PC.cCode "Pay Class Code",
    PC.cDescription "Pay Class Description",
    PT.cCode "Payroll Tax Code"
FROM BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEMPLOYEE E
    left join _ipvRBEmpHeader_cte EH on EH."Employee ID" = E.idEmployee
    /* RS 04/11/2024 Add Employment Type and Pay Level columns */
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._iptblPayClasses PC on PC.idPayClass = E.iPayClassID
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLPAYROLLTAX PT on PT.idPayrollTax = E.iPayrollTaxID
),

_ipvRBEmpTransactions_cte as (
SELECT
	EH.*,
	ET."Period ID" "Pay Period ID",
	SL.cCode "SL Code",
	SL.cDescription "SL Description",
	AL.cCode "AL Code",
	AL.cDescription "AL Description",
	LSL.cCode "LSL Code",
	LSL.cDescription "LSL Description",
	UL.cCode "UL Code",
	UL.cDescription "UL Description",
	case UL.cCode
		when 'EL0001' then 'Annual'
		when 'PH0001' then 'Annual'
		else AD."Code"
	end "Pay Comp/Add Ded Code",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else AD."Description"
	end "Pay Comp/Add Ded Desc",
	AD."Shortcut Key" "Shortcut Key",
	ET."Other Leave ID",
	ET."Post Type",
	ET."Posted" "Period End Processed",
	ET."Effective Date" "Leave Start Date",
	ET."End Date" "Leave End Date",
	ET."Recommence Date" "Recommence Date",
	ET."Pay Period Pay Frequency",
	ET."Number of Periods" "Number of Periods",
	ET."Advice Number" "Pay Advice Number",
	ET."Generate Payment",
	EL.dDateProcessedByBank "EFT Payment Date",
	sum(ifnull(ET."Hours",0)) "Hours",
	sum(ifnull(ET."Hours" / EH."Contract Hours Per Day", 0)) "Days",
	ifnull(ET."Units", 0) "Unit",
	ifnull(ET."Rate", 0) "Rate",
	ifnull(ET."Percent", 0) "Percent",
	sum(ifnull(ET."Amount", 0)) "Amount",
	ifnull(ET."Loading Rate", 0) "Loading Rate",
	ifnull(ET."Loading Percent", 0) "Loading Percent",
	sum(ifnull(ET."Loading Amount", 0)) "Loading Amount",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else ET."Transaction Type"
	end "Transaction Type",
	case UL.cCode
		when 'EL0001' then 'Extra Leave'
		when 'PH0001' then 'Public Holiday Leave'
		else ET."Hours Worked"
	end "Hours Worked Type",
	TCA."Cost Account Code",
	TCA."Cost Account Description",
	LR."Code" "Leave Reason Code",
	LR."Description" "Leave Reason Description",
	RF."Code" "Rate Factor Code",
	RF."Description" "Rate Factor Description",
	ET."OT Rate Factor" "Rate Factor",
	PC."Code" "Pay Class Code",
	PC."Description" "Pay Class Description",
	ET."Addition/Deduction Type",
	SC."Code" "Super Contribution Code",
	SC."Description" "Super Contribution Description",
	SF."Code" "Super Fund Code",
	SF."Fund Name" "Super Fund Description",
	ET."Super Calculated On" "Super Calculated On",
	EH."Pay Frequency" "Employee Pay Frequency",
	ET."Term Tax" "Termination Tax",
	ET."Previous Earnings Date" "Pay End Date for Previous Earnings",
	ET."Advice Printed Date" "Pay Advice Print Date",
	ET."Qualification Value" "Qualification Value",
	ET."SGL Actually Paid" "SGL Actually Paid",
	ET."SGL hours Worked" "SGL Hours Worked",
	ET."Super Process Date" "Date Super Process Completed",
	ET."SGL Age" "SGL Age",
	L1."Location" "Transaction Location",
	PG."Payroll Company Name" "Transaction Payroll Company",
	ET."Job Code",
	ET."Transitional Terminiation Payment",
	ET."Transaction Payroll Company ID",
	PP."Pay Point" "Transaction Pay Point",
    ET."Pay Class Group ID"
FROM _ipvRBEmpHeader_cte EH
	left join _eivEmpTransCurrent_cte ET ON ET."Employee ID" = EH."Employee ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLSICKLEAVE SL ON SL.idLeave = ET."Sick Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLANNUALLEAVE AL ON AL.idLeave = ET."Annual Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLLONGSERVICELEAVE LSL ON LSL.idLeave = ET."Long Service Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLUSERDEFINEDLEAVE UL ON UL.idLeave = ET."User Defined Leave ID"
	left join _eivAdditionsDeductions_cte AD on AD."Add/Ded ID" = ET."Adds/Deds ID"
    left join _eivPayClasses_cte PC on PC."Pay Class ID" = ET."Pay Class ID"
	left join _eivCostAccounts_cte TCA ON TCA."Cost Account ID" = ET."Cost Account ID"
	left join _eivLeaveReasons_cte LR ON LR."Leave Reason ID" = ET."Leave Reason ID"
	left join _eivRateFactors_cte RF ON RF."Rate Factor ID" = ET."OT Rate Factor ID"
	left join _eivSuperContributions_cte SC ON SC."Super Contribution ID"= ET."Super Contribution ID"
	left join _eivSuperFunds_cte SF ON SF."Super Fund ID" = ET."Super Fund ID"
	left join _eivLocations_cte L1 ON L1."Location ID" = ET."Transaction Location ID"
	left join _eivPayrollCompanies_cte PG ON PG."Payroll Company ID" = ET."Transaction Payroll Company ID"
    left join _eivPayPoints_cte PP on PP."Pay Point ID" = ET."Pay Point ID"
    left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEFTEXPORTLOG EL on ET."EFT Export Log ID" = EL.idEFTExportLog
group by all
),

_ipvRBEmpTransactionsEOY_cte as (
SELECT
	EH.*,
	ET."Period ID" "Pay Period ID",
	SL.cCode "SL Code",
	SL.cDescription "SL Description",
	case UL.cCode
		when 'EL0001' then 'EL0001'
		when 'PH0001' then 'PH0001'
		else AL.cCode
	end "AL Code",
	case UL.cCode
		when 'EL0001' then UL.cDescription
		when 'PH0001' then UL.cDescription
		else AL.cDescription
	end "AL Description",
	LSL.cCode "LSL Code",
	LSL.cDescription "LSL Description",
	UL.cCode "UL Code",
	UL.cDescription "UL Description",
	case UL.cCode
		when 'EL0001' then 'Annual'
		when 'PH0001' then 'Annual'
		else AD."Code"
	end "Pay Comp/Add Ded Code",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else AD."Description"
	end "Pay Comp/Add Ded Desc",
	AD."Shortcut Key" "Shortcut Key",
	ET."Other Leave ID",
	ET."Post Type",
	ET."Posted" "Period End Processed",
	ET."Effective Date" "Leave Start Date",
	ET."End Date" "Leave End Date",
	ET."Recommence Date" "Recommence Date",
	ET."Pay Period Pay Frequency",
	ET."Number of Periods" "Number of Periods",
	ET."Advice Number" "Pay Advice Number",
	ET."Generate Payment",
	EL.dDateProcessedByBank "EFT Payment Date",
	sum(ifnull(ET."Hours",0)) "Hours",
	sum(ifnull(ET."Hours" / EH."Contract Hours Per Day", 0)) "Days",
	ifnull(ET."Units", 0) "Unit",
	ifnull(ET."Rate", 0) "Rate",
	ifnull(ET."Percent", 0) "Percent",
	sum(ifnull(ET."Amount", 0)) "Amount",
	ifnull(ET."Loading Rate", 0) "Loading Rate",
	ifnull(ET."Loading Percent", 0) "Loading Percent",
	sum(ifnull(ET."Loading Amount", 0)) "Loading Amount",
	case UL.cCode
		when 'EL0001' then 'Annual Leave'
		when 'PH0001' then 'Annual Leave'
		else ET."Transaction Type"
	end "Transaction Type",
	case UL.cCode
		when 'EL0001' then 'Extra Leave'
		when 'PH0001' then 'Public Holiday Leave'
		else ET."Hours Worked"
	end "Hours Worked Type",
	TCA."Cost Account Code",
	TCA."Cost Account Description",
	LR."Code" "Leave Reason Code",
	LR."Description" "Leave Reason Description",
	RF."Code" "Rate Factor Code",
	RF."Description" "Rate Factor Description",
	ET."OT Rate Factor" "Rate Factor",
	PC."Code" "Pay Class Code",
	PC."Description" "Pay Class Description",
	ET."Addition/Deduction Type",
	SC."Code" "Super Contribution Code",
	SC."Description" "Super Contribution Description",
	SF."Code" "Super Fund Code",
	SF."Fund Name" "Super Fund Description",
	ET."Super Calculated On" "Super Calculated On",
	EH."Pay Frequency" "Employee Pay Frequency",
	ET."Term Tax" "Termination Tax",
	ET."Previous Earnings Date" "Pay End Date for Previous Earnings",
	ET."Advice Printed Date" "Pay Advice Print Date",
	ET."Qualification Value" "Qualification Value",
	ET."SGL Actually Paid" "SGL Actually Paid",
	ET."SGL hours Worked" "SGL Hours Worked",
	ET."Super Process Date" "Date Super Process Completed",
	ET."SGL Age" "SGL Age",
	L1."Location" "Transaction Location",
	PG."Payroll Company Name" "Transaction Payroll Company",
	ET."Job Code",
	ET."Transitional Terminiation Payment",
	ET."Transaction Payroll Company ID",
	PP."Pay Point" "Transaction Pay Point",
    ET."Pay Class Group ID"
FROM _ipvRBEmpHeader_cte EH
	left join _eivEmpTransEOY_cte ET ON ET."Employee ID" = EH."Employee ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLSICKLEAVE SL ON SL.idLeave = ET."Sick Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLANNUALLEAVE AL ON AL.idLeave = ET."Annual Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLLONGSERVICELEAVE LSL ON LSL.idLeave = ET."Long Service Leave ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLUSERDEFINEDLEAVE UL ON UL.idLeave = ET."User Defined Leave ID"
	left join _eivAdditionsDeductions_cte AD on AD."Add/Ded ID" = ET."Adds/Deds ID"
    left join _eivPayClasses_cte PC on PC."Pay Class ID" = ET."Pay Class ID"
    left join _eivCostAccounts_cte TCA ON TCA."Cost Account ID" = ET."Cost Account ID"
	left join _eivLeaveReasons_cte LR ON LR."Leave Reason ID" = ET."Leave Reason ID"
    left join _eivRateFactors_cte RF ON RF."Rate Factor ID" = ET."OT Rate Factor ID"
	left join _eivSuperContributions_cte SC ON SC."Super Contribution ID"= ET."Super Contribution ID"
	left join _eivSuperFunds_cte SF ON SF."Super Fund ID" = ET."Super Fund ID"
    left join _eivLocations_cte L1 ON L1."Location ID" = ET."Transaction Location ID"
	left join _eivPayrollCompanies_cte PG ON PG."Payroll Company ID" = ET."Transaction Payroll Company ID"
    left join _eivPayPoints_cte PP on PP."Pay Point ID" = ET."Pay Point ID"
	left join BEGA_HR_LANDING_{{ env }}.PAYROLL_WEEKLY_DBO._IPTBLEFTEXPORTLOG EL on ET."EFT Export Log ID" = EL.idEFTExportLog
group by all
),

_ipvRBEmpTransactionsALL_cte as (
select * from _ipvRBEmpTransactions_cte
union 
select * from _ipvRBEmpTransactionsEOY_cte
)

select
    'Weekly' as PAYROLL_TYPE,
    TR."Pay Frequency" as PAY_FREQUENCY,
    /* RS 13/09/2024 Remove leading Z's from employee code */
    -- TR."Employee Code" as WORKER_CODE,
    case when substring(TR."Employee Code",1,1) in ('Z','z') then case when len(TR."Employee Code") < 8 then replace(replace(TR."Employee Code",'Z',''),'z','') else concat('1',substring(TR."Employee Code",2,len(TR."Employee Code")-1)) end else TR."Employee Code" end as WORKER_CODE,
    substr(ED."Payroll Tax Code", 3, 3) as PAYROLL_TAX_CODE,
    TR."Transaction Location" as TRANSACTION_LOCATION,
    substr(TR."Transaction Location", 1, 3) as LOCATION,
    /* RS 04/11/2024 Add Employment Type and Pay Level columns */
    ifnull(case PAYROLL_TYPE 
	when 'Fortnightly' then 
	    case substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2) 
            when 'CA' then 'CASF'
		    when 'CS' then 'CASF'
		    when 'FP' then 'FFP'
		    when 'FT' then 'FFT'
		    when 'PP' then 'FPT'
		    when 'PTFT' then 'FXPT'
		    when 'PT' then 'FPP'
		    when 'FPA' then 'FXFT'
		    when 'FTFT' then 'FXFT'
		    when 'PPA' then 'FXPT'
		    when 'CO' then 'CON'
		    when 'FTS' then 'FTSEC'
            else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
	    end
	when 'Monthly' then 
	    case substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2) 
		    when 'CA' then 'CA'
		    when 'CS' then 'CA'
		    when 'FTFT' then 'FPA'
		    when 'PPTS' then 'PPTSM'
		    when 'PTFT' then 'PPA'
		    when 'FTS' then 'FTSM'
		    when 'CO' then 'CON'
            else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
	    end
	when 'Weekly' then 
	    case substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2) 
		    when 'CA' then 'CASW'
		    when 'CS' then 'CASW'
		    when 'FP' then 'PFT'
		    when 'FT' then 'TFT'
		    when 'PP' then 'PPT'
		    when 'PT' then 'TPT'
		    when 'FPA' then 'XFT'
		    when 'PPA' then 'XPT'
		    when 'FTFT' then 'XFT'
		    when 'FTS' then 'FTS'
		    when 'FTST' then 'FTST'
		    when 'PPTS' then 'PPTS'
		    when 'CO' then 'CON'
            else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
        end
        else substring(TR."Employment Type", 1, charindex('-', TR."Employment Type",1)-2)
	end, 'Unlinked') as EMPLOYMENT_TYPE, 
    ifnull(ifnull(ED."Pay Class Code",TR."Pay Class Code"),'Unlinked') as PAY_LEVEL_CODE,
    TR."Pay Point" as PAY_POINT,
    case
        when substr(TR."Cost Account Code", 15, 7) between '0000000'
        and '9999999' then case
            when substr(TR."Cost Account Code", 15, 2) = '00' then substr(TR."Cost Account Code", 17, 5)
            else case
                when substr(TR."Cost Account Code", 15, 1) = '0' then substr(TR."Cost Account Code", 16, 6)
                else substr(TR."Cost Account Code", 15, 7)
            end
        end
        else substr(TR."Cost Account Code", 1, 5)
    end as COST_CENTRE,
    case 
        when TR."Pay Frequency" = 'Monthly' 
            then ifnull(TR."EFT Payment Date",TR."Pay End Date for Previous Earnings") 
        else TR."Pay End Date for Previous Earnings" 
    end as PAY_END_DATE_FOR_PREVIOUS_EARNINGS,
    TR."Pay End Date for Previous Earnings" as REFERENCE_DATE,
    TR."Transaction Type" as TRANSACTION_TYPE,
    TR."Pay Comp/Add Ded Code" as PAY_COMPONENT_ADD_DED_CODE,
    TR."Leave Reason Code" as LEAVE_REASON_CODE,
    TR."Leave Start Date" as LEAVE_START_DATE,
    TR."Leave End Date" as LEAVE_END_DATE,
    sum(TR."Hours") as TRANSACTION_HOURS,
    to_numeric(
        ifnull(
            sum(
                case
                    when (
                        right(TR."Post Type", 8) = 'Subtract'
                        or TR."Pay Comp/Add Ded Code" = 'RDODeduct'
                    ) then TR."Hours" * -1
                    else TR."Hours"
                end
            ),
            0
        ),
        20,
        2
    ) as HOURS,
    to_numeric(
        ifnull(
            sum(
                case
                    when (
                        right(TR."Post Type", 8) = 'Subtract'
                        or TR."Transaction Type" in (
                            'Standard Ded Before',
                            'Non Standard Ded Before',
                            'RDO Deduct'
                        )
                    ) then TR."Amount" * -1
                    else TR."Amount"
                end
            ),
            0
        ),
        20,
        2
    ) as AMOUNT
from
    _ipvRBEmpTransactionsALL_cte TR
    left join _ipvRBMEmpDetails_cte ED on TR."Employee ID" = ED."Employee ID"
    left join _eivCostAccounts_cte as CA on CA."Cost Account Code" = TR."Cost Account Code"
where
    (
        TR."Hours" <> 0
        or TR."Amount" <> 0
    )
    /* RS 20/11/2024 - Remove null print date entries to fix up duplications, e.g. Heidi Edmiston, etc. */
    and TR."Pay Advice Print Date" is not null
group by
    all
;



create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION(
	WEEK_END_DATE,
	WORKER_CODE,
	COST_CENTRE_ID,
	PAYROLL_TYPE,
	PAY_FREQUENCY,
	FTE_HOURS,
	STANDARD_HOURS,
	PROPORTION
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with
    
    weeks_cte as (
        select
            PERIOD_TYPE_1 as FISCAL_MONTH,
            PERIOD_TYPE_4 as FISCAL_WEEK,
            MIN(DATE) AS WEEK_START_DATE,
            MAX(DATE) AS WEEK_END_DATE
        from
            BEGA_MASTER_DATA_{{ env }}.TRANSFORMED.CALENDAR
        group by all
        ),
        
    weeks_counts_cte as (
        select
            a.FISCAL_MONTH,
            a.FISCAL_WEEK,
            a.WEEK_START_DATE,
            a.WEEK_END_DATE,
            count(*) * 1.0 as COUNT_MONTH,
            2.0 as COUNT_FORTNIGHT,
            1.0 as COUNT_WEEK
        from
            weeks_cte as a
            inner join weeks_cte as b on 
                -- Use Fiscal Month not Calendar Month
                -- YEAR(a.WEEK_END_DATE) = YEAR(b.WEEK_END_DATE)
                -- and MONTH(a.WEEK_END_DATE) = MONTH(b.WEEK_END_DATE)
                a.FISCAL_MONTH = b.FISCAL_MONTH
        group by all
        ),

    payroll_trans_cte as (
        select *
        from BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION_WEEKLY
        --
        union all
        --
        select *
        from BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION_FORTNIGHTLY
        --
        union all
        --
        select *
        from BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION_MONTHLY
        ),

    fte_cte as (
        select
            tr.PAYROLL_TYPE,
            tr.PAY_FREQUENCY,
            wk.WEEK_END_DATE,
            tr.WORKER_CODE as WORKER_CODE,
            tr.COST_CENTRE,
            cc.COST_CENTRE_ID,
            --tr.LOCATION,
            case
                when tr.PAY_FREQUENCY = 'Monthly'       then 52/12 -- Do not use Fiscal Weeks per Fiscal Month -- COUNT_MONTH
                when tr.PAY_FREQUENCY = 'Fortnightly'   then COUNT_FORTNIGHT
                when tr.PAY_FREQUENCY = 'Weekly'        then COUNT_WEEK
                else 1.0
                end as WEEKS_COUNT,
            sum(
                case
                    when ifnull(lr.FTE_HOURS, false) = true and lr.KOROIT_ONLY = false then tr.TRANSACTION_HOURS / WEEKS_COUNT
                    --For Koroit Only check that location = 350 or KOR
                    when ifnull(lr.FTE_HOURS, false) = true and lr.KOROIT_ONLY = true and tr.LOCATION = '350' then tr.TRANSACTION_HOURS / WEEKS_COUNT
                    when ifnull(lr.FTE_HOURS, false) = true and lr.KOROIT_ONLY = true and tr.LOCATION = 'KOR' then tr.TRANSACTION_HOURS / WEEKS_COUNT
                    else 0.0
                    end
                ) as FTE_HOURS,
            max(LC.STANDARD_HOURS / WEEKS_COUNT) as STANDARD_HOURS
            
        from
            payroll_trans_cte as tr
            left join BEGA_HR_DATA_{{ env }}.CONTROL.PAYROLL_TRANSACTION_PARAMETERS as lr on 
                lr.TRANSACTION_TYPE_DESC = tr.TRANSACTION_TYPE
                and lr.PAY_COMPONENT = tr.PAY_COMPONENT_ADD_DED_CODE
                and ifnull(lr.LEAVE_REASON_CODE,'') = ifnull(tr.LEAVE_REASON_CODE,'')
            left join BEGA_HR_DATA_{{ env }}.CONTROL.PAYROLL_STANDARD_HOURS as lc on 
                lc.PAY_FREQUENCY = tr.PAY_FREQUENCY
                and lc.LOCATION = tr.TRANSACTION_LOCATION
            left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_COST_CENTRE as cc on 
                cc.COST_CENTRE_CODE = tr.COST_CENTRE
            inner join weeks_counts_cte as wk on 
                -- Weekly
                (
                    tr.PAY_FREQUENCY = 'Weekly'
                    and wk.WEEK_START_DATE <= tr.REFERENCE_DATE
                    and wk.WEEK_END_DATE >= tr.REFERENCE_DATE
                )
                -- Fortnightly
                or (
                    tr.PAY_FREQUENCY = 'Fortnightly'
                    and wk.WEEK_START_DATE <= dateadd(week, -1, tr.REFERENCE_DATE)  
                    and wk.WEEK_END_DATE >= dateadd(week, -1, tr.REFERENCE_DATE)  
                )
                 -- Fortnightly
                or (
                    tr.PAY_FREQUENCY = 'Fortnightly'
                    and wk.WEEK_START_DATE <= tr.REFERENCE_DATE 
                    and wk.WEEK_END_DATE >= tr.REFERENCE_DATE 
                )
                -- Monthly
                or (
                    tr.PAY_FREQUENCY = 'Monthly'
                    and year(wk.WEEK_END_DATE) = year(tr.REFERENCE_DATE)
                    and month(wk.WEEK_END_DATE) = month(tr.REFERENCE_DATE)
                )
                -- 23/07/24 RS: Removed hours filter to enable match for WK 11, 2023
                -- where tr.TRANSACTION_HOURS <> 0
        group by all
        ),

    total_hours_cte as (
        select
            WEEK_END_DATE,
            WORKER_CODE,
            SUM(FTE_HOURS) as TOTAL_FTE_HOURS
        from
            fte_cte
        group by all
        ),

    /* RS 20/11/2024 Aggregate on pay frequency since some employees have transitioned payrolls */
    pay_freq_fte_cte as (
        select
            max(PAY_FREQUENCY) as PAY_FREQUENCY,
            WEEK_END_DATE,
            WORKER_CODE
        from
            fte_cte
        group by all
        )
        
select
    tr.WEEK_END_DATE,
    tr.WORKER_CODE,
    tr.COST_CENTRE_ID,
    tr.PAYROLL_TYPE,
    tr.PAY_FREQUENCY,
    tr.FTE_HOURS,
    tr.STANDARD_HOURS,
    div0(tr.FTE_HOURS, tot.TOTAL_FTE_HOURS) as PROPORTION 
from
    fte_cte as tr
    inner join total_hours_cte as tot on 
        tot.WEEK_END_DATE = tr.WEEK_END_DATE
        and tot.WORKER_CODE = tr.WORKER_CODE
    /* RS 20/11/2024 Join added to select one pay frequency per week since some employees have transitioned payrolls */
    inner join pay_freq_fte_cte as pay on
        pay.PAY_FREQUENCY = tr.PAY_FREQUENCY
        and pay.WEEK_END_DATE = tr.WEEK_END_DATE
        and pay.WORKER_CODE = tr.WORKER_CODE  
;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_WORKER_CONTRACT_HOUR_HISTORY(
	PAY_FREQUENCY_KEY,
	IDCONTRACTHOURS,
	CCODE,
	FDAYSPERWEEK,
	FHOURSPERDAY,
	CDESCRIPTION,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5('Weekly') as PAY_FREQUENCY_KEY,
    IDCONTRACTHOURS,
    CCODE,
    FDAYSPERWEEK,
    FHOURSPERDAY,
    CDESCRIPTION,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_CONTRACT_HOUR_HISTORY
--
union
--
select
	md5('Fortnightly') as PAY_FREQUENCY_KEY,
    IDCONTRACTHOURS,
    CCODE,
    FDAYSPERWEEK,
    FHOURSPERDAY,
    CDESCRIPTION,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_CONTRACT_HOUR_HISTORY
--
union
--
select
	md5('Monthly') as PAY_FREQUENCY_KEY,
    IDCONTRACTHOURS,
    CCODE,
    FDAYSPERWEEK,
    FHOURSPERDAY,
    CDESCRIPTION,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_CONTRACT_HOUR_HISTORY

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_WORKER_HISTORY(
	PAY_FREQUENCY_KEY,
	IDEMPLOYEE,
	FOTHERINCOME,
	DVARIATIONDATE,
	DANNUALPOSTENTDATE,
	BHALFSICKGRANTSICK,
	DANNUALISEDANNIVERSARYDATE,
	ILONGSERVICELEAVECLASSID,
	IPAYERGROUPID,
	IPAYPOINTID,
	DEXTRALEAVETAKENDATE,
	IETPPAYSUMMARY,
	FDATESERVICEHOURS,
	CFIRSTNAME,
	FNORMALHOURS,
	BSUSPENDLSLENT,
	IHALFSICKLEAVECLASSID,
	CADDRESS1,
	DSUSPENDHALFSLFROM,
	IEMPLOYMENTTYPEID,
	IQUALIFYINGALLOWANCE,
	FNZSTUDENTLOANCIRTAXRATE,
	CSURNAME,
	ISTP2INCOMETYPE,
	FPUBLICHOLIDAYTAKENHOURS,
	BSUSPENDANNUALENT,
	FTERMPREJUL83,
	FEXEMPTFRINGEBENEFIT,
	CPOSTALADD1,
	BKIWISAVERNEWMEMBER,
	BSUSPENDSICKENT,
	DSUSPENDHALFSLTO,
	ISICKLEAVECLASSID,
	CPREFERREDNAME,
	FANNUALYEARTODATELOADING,
	DSUSPENDPUBLICFROM,
	BMEDICAREEXEMPTION,
	BKIWISAVERISNEWEMPLOYEE,
	IBASISOFPAYMENT,
	CTELEPHONE1,
	FPUBLICHOLIDAYENTHOURS,
	IAUTOPAYTYPE,
	FTERMLUMPSUMD,
	FNZSTUDENTLOANTAXRATE,
	FMINPAYLIMIT,
	FTERMPOSTJUN94,
	FAUTOPAYAMOUNT,
	IPUBLICHOLIDAYID,
	DSUSPENDLSLTO,
	IHIREDPERIODID,
	DKIWISAVEROPTOUTDATE,
	FNZTAXRATE,
	IPAYROLLTAXID,
	IJOBCLASSIFICATIONID,
	FHALFSICKTOTALENT,
	BSUPPRESSFROMSTP,
	DSICKPROENTDATE,
	UCEEPAYADVICEMESSAGE,
	FNORMALRATE,
	CABN,
	IGENERATEAUTOPAY,
	FTOTALREBATES,
	FSICKTOTALENT,
	BPUBLICHOLIDAYCREDIT,
	IPRINTPAYSUMMARY,
	ISTP2ATODEFINED,
	DHALFSICKACTUALENTDATE,
	DSUSPENDSLFROM,
	IANNUALNONENTPERIOD,
	FOTHERRATE,
	IANNUALLEAVECOSTACCID,
	FAWARDRATE,
	FSICKTAKENHOURS,
	FTIMEHALFRATE,
	DDATEPAYSUMMARY,
	IANNUALLEAVELOADINGCLASSID,
	DSUSPENDLSLFROM,
	DSUSPENDALTO,
	BNZSTUDENTLOAN,
	IMEDICARESURCHARGEPERCENT,
	CADDRESS2,
	DNZPAYDAYEDLASTEXPORTDATE,
	FLOADINGATDPENALTIESUNPAID,
	DSUSPENDALFROM,
	FANNUALLEAVETAKENHOURS,
	BDAILYTAXING,
	DLONGSERVICEPOSTPRODATE,
	CPOSTALADD2,
	DHALFSICKPROENTDATE,
	FREPORTFRINGEBENEFIT,
	ICLIMATICID,
	FSPECIFYTAXRATE,
	ISTP2COUNTRYID,
	FAWARDHOURS,
	DSUSPENDSLTO,
	IPAYMETHODID,
	IPOSTALCOUNTRYID,
	DHALFSICKLEAVETAKENDATE,
	BESPTIMESHEET,
	IMARITALSTATUSID,
	ISICKNONENTMONTHS,
	IDEFAULTCOSTACCOUNT,
	FANNUALPOSTPROHOURS,
	CTELEPHONE2,
	IHALFSICKCOSTACCID,
	CSTP2TAXTREATMENT,
	IHECSSFSSDEBT,
	IPOSTALSTATEID,
	BNOTAXFREE,
	DEXTRALEAVEENTDATE,
	BSICKNONENTMET,
	BNZSTUDENTLOANBOR,
	FLONGSERVICELEAVETAKENHOURS,
	FANNUALPREENTHOURS,
	FTERMPOSTJUN83TAX,
	DPUBLICHOLIDAYPRODATE,
	BAUSRESIDENT,
	FLOADINGYTD,
	ITAXSCALEID,
	BSTP2SEASONALWORKER,
	IRATEINCREASECODE,
	BGOTONEXTPAYCLASS,
	DKIWISAVEROPTOUTREPORTEDDATE,
	FTERMPOSTJUN83,
	BISANNUALISEDSALARY,
	DPUBLICHOLIDAYENTDATE,
	BTFN,
	FLOADINGATDUNPAID,
	BLONGSERVICEFIRSTENTPERIOD,
	ITFNFORSUPER,
	FHALFSICKPROENTHOURS,
	ICONTRACTHOURSID,
	CONTRACT_HOUR_FIVETRAN_SYNCED,
	IPAYCLASSID,
	FEXTRALEAVEPRO,
	FCUMULATIVEHOURS,
	CMIDDLENAME,
	FLOADINGATDPENALTIESPAID,
	FLONGSERVICEPREENTHOURS,
	FLONGSERVICEPOSTPROHOURS,
	FEXTRALEAVETAKEN,
	FMAXPAYLIMIT,
	IKIWISAVERENROLOPTID,
	DTERMRETIREDATE,
	DTERMINATIONDATE,
	IEARNINGSTYPEID,
	FANNUALPOSTENTHOURS,
	ICHANGEAGENTID,
	ISTATEID,
	BJOBMAKER,
	BOTHERREBATES,
	FSICKACTUALENTHOURS,
	DLONGSERVICELEAVETAKENDATE,
	FDOUBLERATE,
	DRECOMMENCEDATE,
	BHALFSICKNONENTMET,
	IWORKPLANNERID,
	CKIWISAVERELIGIBILITY,
	DPUBLICHOLIDAYTAKENDATE,
	BNZEXCLUDEFROMEMS,
	CTAXSCALECODE,
	BSUSPENDNEXTAUTOPAY,
	ITERMINATIONREASONID,
	IWORKMANSCOMPID,
	IANNUALLEAVECLASSID,
	IEXTRALEAVEID,
	ILONGSERVICECOSTACCID,
	FHALFSICKTAKENHOURS,
	CEMPCODE,
	CIRDEMPLOYEENAME,
	CPOSTALPOSTALCODE,
	ILOADINGCLASSID,
	DSTARTPAYSUMMARY,
	FLONGSERVICEPRE78ENTHOURS,
	DTFNDATESIGNED,
	BISCLOSELYHELDPAYEE,
	BISAWARDBASED,
	IADVICEDELIVERYMETHOD,
	INZSTUDENTLOANBORTYPE,
	FLONGSERVICEPOSTENTHOURS,
	BESPWORKGROUP,
	BFAMILYTAXBENEFIT,
	BWORKINGHOLIDAYMAKER,
	ILOCATIONID,
	DKIWISAVERNEWMEMBERREPORTEDDATE,
	CKIWISAVEROPTOUTFLAG,
	IKIWISAVERSTATUS,
	IDOUBLERATEFACTOR,
	FSICKPROENTHOURS,
	BTERMINATED,
	IDEFAULTEMAIL,
	BMEDICAREREDUCTION,
	CKIWISAVERLATEOPTOUTREASON,
	FYEARLYSALARY,
	ITIMEHALFRATEFACTOR,
	CKIWISAVERNEWEMPSTATUS,
	CKIWISAVERLATEOPTOUTOTHERREASON,
	DHIREDDATE,
	ISICKCOSTACCID,
	DSUSPENDPUBLICTO,
	FLOADINGATDPAID,
	FEXTRALEAVEENT,
	CTFN,
	IHALFSICKNONENTMONTHS,
	INUMBERCHILDREN,
	DANNUALLEAVETAKENDATE,
	BCIRRATE,
	BMEDICARESURCHARGE,
	FEXTRALEAVESHIFTS,
	IABORIGINALTORRESSTRAIT,
	BJOBKEEPER,
	ITERMINATEDPERIODID,
	DSICKACTUALENTDATE,
	ITIMESHEETOPTION,
	IDEATHTYPEID,
	CPOSTCODE,
	FNONCASHBENEFIT,
	CREFERENCENUMBER,
	IGENDERID,
	BSUSPENDHALFSICKENT,
	DLONGSERVICEPOSTENTDATE,
	DDATEOFBIRTH,
	DEXTRALEAVEPRODATE,
	IPAYMENTTYPEID,
	BNZWITHHOLDINGTAX,
	FNZSTUDENTLOANBORTAXRATE,
	BSTP2ISFEIEMPLOYEE,
	ICOUNTRYID,
	DSICKLEAVETAKENDATE,
	IPAYFREQUENCYID,
	BNZSTUDENTLOANCIR,
	BSICKGRANTSICK,
	FTERMAVGNORMALGROSS,
	DANNUALPOSTPRODATE,
	BSUSPENDPUBLICENT,
	ISTP2CESSATIONREASON,
	ITITLEID,
	BNZSPECIFYSLRATE,
	FHALFSICKACTUALENTHOURS,
	FPUBLICHOLIDAYPROHOURS,
	_FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5('Weekly') as PAY_FREQUENCY_KEY,
    IDEMPLOYEE,
    FOTHERINCOME,
    DVARIATIONDATE,
    DANNUALPOSTENTDATE,
    BHALFSICKGRANTSICK,
    DANNUALISEDANNIVERSARYDATE,
    ILONGSERVICELEAVECLASSID,
    IPAYERGROUPID,
    IPAYPOINTID,
    DEXTRALEAVETAKENDATE,
    IETPPAYSUMMARY,
    FDATESERVICEHOURS,
    CFIRSTNAME,
    FNORMALHOURS,
    BSUSPENDLSLENT,
    IHALFSICKLEAVECLASSID,
    CADDRESS1,
    DSUSPENDHALFSLFROM,
    IEMPLOYMENTTYPEID,
    IQUALIFYINGALLOWANCE,
    FNZSTUDENTLOANCIRTAXRATE,
    CSURNAME,
    ISTP2INCOMETYPE,
    FPUBLICHOLIDAYTAKENHOURS,
    BSUSPENDANNUALENT,
    FTERMPREJUL83,
    FEXEMPTFRINGEBENEFIT,
    CPOSTALADD1,
    BKIWISAVERNEWMEMBER,
    BSUSPENDSICKENT,
    DSUSPENDHALFSLTO,
    ISICKLEAVECLASSID,
    CPREFERREDNAME,
    FANNUALYEARTODATELOADING,
    DSUSPENDPUBLICFROM,
    BMEDICAREEXEMPTION,
    BKIWISAVERISNEWEMPLOYEE,
    IBASISOFPAYMENT,
    CTELEPHONE1,
    FPUBLICHOLIDAYENTHOURS,
    IAUTOPAYTYPE,
    FTERMLUMPSUMD,
    FNZSTUDENTLOANTAXRATE,
    FMINPAYLIMIT,
    FTERMPOSTJUN94,
    FAUTOPAYAMOUNT,
    IPUBLICHOLIDAYID,
    DSUSPENDLSLTO,
    IHIREDPERIODID,
    DKIWISAVEROPTOUTDATE,
    FNZTAXRATE,
    IPAYROLLTAXID,
    IJOBCLASSIFICATIONID,
    FHALFSICKTOTALENT,
    BSUPPRESSFROMSTP,
    DSICKPROENTDATE,
    UCEEPAYADVICEMESSAGE,
    FNORMALRATE,
    CABN,
    IGENERATEAUTOPAY,
    FTOTALREBATES,
    FSICKTOTALENT,
    BPUBLICHOLIDAYCREDIT,
    IPRINTPAYSUMMARY,
    ISTP2ATODEFINED,
    DHALFSICKACTUALENTDATE,
    DSUSPENDSLFROM,
    IANNUALNONENTPERIOD,
    FOTHERRATE,
    IANNUALLEAVECOSTACCID,
    FAWARDRATE,
    FSICKTAKENHOURS,
    FTIMEHALFRATE,
    DDATEPAYSUMMARY,
    IANNUALLEAVELOADINGCLASSID,
    DSUSPENDLSLFROM,
    DSUSPENDALTO,
    BNZSTUDENTLOAN,
    IMEDICARESURCHARGEPERCENT,
    CADDRESS2,
    DNZPAYDAYEDLASTEXPORTDATE,
    FLOADINGATDPENALTIESUNPAID,
    DSUSPENDALFROM,
    FANNUALLEAVETAKENHOURS,
    BDAILYTAXING,
    DLONGSERVICEPOSTPRODATE,
    CPOSTALADD2,
    DHALFSICKPROENTDATE,
    FREPORTFRINGEBENEFIT,
    ICLIMATICID,
    FSPECIFYTAXRATE,
    ISTP2COUNTRYID,
    FAWARDHOURS,
    DSUSPENDSLTO,
    IPAYMETHODID,
    IPOSTALCOUNTRYID,
    DHALFSICKLEAVETAKENDATE,
    BESPTIMESHEET,
    IMARITALSTATUSID,
    ISICKNONENTMONTHS,
    IDEFAULTCOSTACCOUNT,
    FANNUALPOSTPROHOURS,
    CTELEPHONE2,
    IHALFSICKCOSTACCID,
    CSTP2TAXTREATMENT,
    IHECSSFSSDEBT,
    IPOSTALSTATEID,
    BNOTAXFREE,
    DEXTRALEAVEENTDATE,
    BSICKNONENTMET,
    BNZSTUDENTLOANBOR,
    FLONGSERVICELEAVETAKENHOURS,
    FANNUALPREENTHOURS,
    FTERMPOSTJUN83TAX,
    DPUBLICHOLIDAYPRODATE,
    BAUSRESIDENT,
    FLOADINGYTD,
    ITAXSCALEID,
    BSTP2SEASONALWORKER,
    IRATEINCREASECODE,
    BGOTONEXTPAYCLASS,
    DKIWISAVEROPTOUTREPORTEDDATE,
    FTERMPOSTJUN83,
    BISANNUALISEDSALARY,
    DPUBLICHOLIDAYENTDATE,
    BTFN,
    FLOADINGATDUNPAID,
    BLONGSERVICEFIRSTENTPERIOD,
    ITFNFORSUPER,
    FHALFSICKPROENTHOURS,
    ICONTRACTHOURSID,
    CONTRACT_HOUR_FIVETRAN_SYNCED,
    IPAYCLASSID,
    FEXTRALEAVEPRO,
    FCUMULATIVEHOURS,
    CMIDDLENAME,
    FLOADINGATDPENALTIESPAID,
    FLONGSERVICEPREENTHOURS,
    FLONGSERVICEPOSTPROHOURS,
    FEXTRALEAVETAKEN,
    FMAXPAYLIMIT,
    IKIWISAVERENROLOPTID,
    DTERMRETIREDATE,
    DTERMINATIONDATE,
    IEARNINGSTYPEID,
    FANNUALPOSTENTHOURS,
    ICHANGEAGENTID,
    ISTATEID,
    BJOBMAKER,
    BOTHERREBATES,
    FSICKACTUALENTHOURS,
    DLONGSERVICELEAVETAKENDATE,
    FDOUBLERATE,
    DRECOMMENCEDATE,
    BHALFSICKNONENTMET,
    IWORKPLANNERID,
    CKIWISAVERELIGIBILITY,
    DPUBLICHOLIDAYTAKENDATE,
    BNZEXCLUDEFROMEMS,
    CTAXSCALECODE,
    BSUSPENDNEXTAUTOPAY,
    ITERMINATIONREASONID,
    IWORKMANSCOMPID,
    IANNUALLEAVECLASSID,
    IEXTRALEAVEID,
    ILONGSERVICECOSTACCID,
    FHALFSICKTAKENHOURS,
    CEMPCODE,
    CIRDEMPLOYEENAME,
    CPOSTALPOSTALCODE,
    ILOADINGCLASSID,
    DSTARTPAYSUMMARY,
    FLONGSERVICEPRE78ENTHOURS,
    DTFNDATESIGNED,
    BISCLOSELYHELDPAYEE,
    BISAWARDBASED,
    IADVICEDELIVERYMETHOD,
    INZSTUDENTLOANBORTYPE,
    FLONGSERVICEPOSTENTHOURS,
    BESPWORKGROUP,
    BFAMILYTAXBENEFIT,
    BWORKINGHOLIDAYMAKER,
    ILOCATIONID,
    DKIWISAVERNEWMEMBERREPORTEDDATE,
    CKIWISAVEROPTOUTFLAG,
    IKIWISAVERSTATUS,
    IDOUBLERATEFACTOR,
    FSICKPROENTHOURS,
    BTERMINATED,
    IDEFAULTEMAIL,
    BMEDICAREREDUCTION,
    CKIWISAVERLATEOPTOUTREASON,
    FYEARLYSALARY,
    ITIMEHALFRATEFACTOR,
    CKIWISAVERNEWEMPSTATUS,
    CKIWISAVERLATEOPTOUTOTHERREASON,
    DHIREDDATE,
    ISICKCOSTACCID,
    DSUSPENDPUBLICTO,
    FLOADINGATDPAID,
    FEXTRALEAVEENT,
    CTFN,
    IHALFSICKNONENTMONTHS,
    INUMBERCHILDREN,
    DANNUALLEAVETAKENDATE,
    BCIRRATE,
    BMEDICARESURCHARGE,
    FEXTRALEAVESHIFTS,
    IABORIGINALTORRESSTRAIT,
    BJOBKEEPER,
    ITERMINATEDPERIODID,
    DSICKACTUALENTDATE,
    ITIMESHEETOPTION,
    IDEATHTYPEID,
    CPOSTCODE,
    FNONCASHBENEFIT,
    CREFERENCENUMBER,
    IGENDERID,
    BSUSPENDHALFSICKENT,
    DLONGSERVICEPOSTENTDATE,
    DDATEOFBIRTH,
    DEXTRALEAVEPRODATE,
    IPAYMENTTYPEID,
    BNZWITHHOLDINGTAX,
    FNZSTUDENTLOANBORTAXRATE,
    BSTP2ISFEIEMPLOYEE,
    ICOUNTRYID,
    DSICKLEAVETAKENDATE,
    IPAYFREQUENCYID,
    BNZSTUDENTLOANCIR,
    BSICKGRANTSICK,
    FTERMAVGNORMALGROSS,
    DANNUALPOSTPRODATE,
    BSUSPENDPUBLICENT,
    ISTP2CESSATIONREASON,
    ITITLEID,
    BNZSPECIFYSLRATE,
    FHALFSICKACTUALENTHOURS,
    FPUBLICHOLIDAYPROHOURS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_WEEKLY_WORKER_HISTORY
--
union
--
select
	md5('Fortnightly') as PAY_FREQUENCY_KEY,
    IDEMPLOYEE,
    FOTHERINCOME,
    DVARIATIONDATE,
    DANNUALPOSTENTDATE,
    BHALFSICKGRANTSICK,
    DANNUALISEDANNIVERSARYDATE,
    ILONGSERVICELEAVECLASSID,
    IPAYERGROUPID,
    IPAYPOINTID,
    DEXTRALEAVETAKENDATE,
    IETPPAYSUMMARY,
    FDATESERVICEHOURS,
    CFIRSTNAME,
    FNORMALHOURS,
    BSUSPENDLSLENT,
    IHALFSICKLEAVECLASSID,
    CADDRESS1,
    DSUSPENDHALFSLFROM,
    IEMPLOYMENTTYPEID,
    IQUALIFYINGALLOWANCE,
    FNZSTUDENTLOANCIRTAXRATE,
    CSURNAME,
    ISTP2INCOMETYPE,
    FPUBLICHOLIDAYTAKENHOURS,
    BSUSPENDANNUALENT,
    FTERMPREJUL83,
    FEXEMPTFRINGEBENEFIT,
    CPOSTALADD1,
    BKIWISAVERNEWMEMBER,
    BSUSPENDSICKENT,
    DSUSPENDHALFSLTO,
    ISICKLEAVECLASSID,
    CPREFERREDNAME,
    FANNUALYEARTODATELOADING,
    DSUSPENDPUBLICFROM,
    BMEDICAREEXEMPTION,
    BKIWISAVERISNEWEMPLOYEE,
    IBASISOFPAYMENT,
    CTELEPHONE1,
    FPUBLICHOLIDAYENTHOURS,
    IAUTOPAYTYPE,
    FTERMLUMPSUMD,
    FNZSTUDENTLOANTAXRATE,
    FMINPAYLIMIT,
    FTERMPOSTJUN94,
    FAUTOPAYAMOUNT,
    IPUBLICHOLIDAYID,
    DSUSPENDLSLTO,
    IHIREDPERIODID,
    DKIWISAVEROPTOUTDATE,
    FNZTAXRATE,
    IPAYROLLTAXID,
    IJOBCLASSIFICATIONID,
    FHALFSICKTOTALENT,
    BSUPPRESSFROMSTP,
    DSICKPROENTDATE,
    UCEEPAYADVICEMESSAGE,
    FNORMALRATE,
    CABN,
    IGENERATEAUTOPAY,
    FTOTALREBATES,
    FSICKTOTALENT,
    BPUBLICHOLIDAYCREDIT,
    IPRINTPAYSUMMARY,
    ISTP2ATODEFINED,
    DHALFSICKACTUALENTDATE,
    DSUSPENDSLFROM,
    IANNUALNONENTPERIOD,
    FOTHERRATE,
    IANNUALLEAVECOSTACCID,
    FAWARDRATE,
    FSICKTAKENHOURS,
    FTIMEHALFRATE,
    DDATEPAYSUMMARY,
    IANNUALLEAVELOADINGCLASSID,
    DSUSPENDLSLFROM,
    DSUSPENDALTO,
    BNZSTUDENTLOAN,
    IMEDICARESURCHARGEPERCENT,
    CADDRESS2,
    DNZPAYDAYEDLASTEXPORTDATE,
    FLOADINGATDPENALTIESUNPAID,
    DSUSPENDALFROM,
    FANNUALLEAVETAKENHOURS,
    BDAILYTAXING,
    DLONGSERVICEPOSTPRODATE,
    CPOSTALADD2,
    DHALFSICKPROENTDATE,
    FREPORTFRINGEBENEFIT,
    ICLIMATICID,
    FSPECIFYTAXRATE,
    ISTP2COUNTRYID,
    FAWARDHOURS,
    DSUSPENDSLTO,
    IPAYMETHODID,
    IPOSTALCOUNTRYID,
    DHALFSICKLEAVETAKENDATE,
    BESPTIMESHEET,
    IMARITALSTATUSID,
    ISICKNONENTMONTHS,
    IDEFAULTCOSTACCOUNT,
    FANNUALPOSTPROHOURS,
    CTELEPHONE2,
    IHALFSICKCOSTACCID,
    CSTP2TAXTREATMENT,
    IHECSSFSSDEBT,
    IPOSTALSTATEID,
    BNOTAXFREE,
    DEXTRALEAVEENTDATE,
    BSICKNONENTMET,
    BNZSTUDENTLOANBOR,
    FLONGSERVICELEAVETAKENHOURS,
    FANNUALPREENTHOURS,
    FTERMPOSTJUN83TAX,
    DPUBLICHOLIDAYPRODATE,
    BAUSRESIDENT,
    FLOADINGYTD,
    ITAXSCALEID,
    BSTP2SEASONALWORKER,
    IRATEINCREASECODE,
    BGOTONEXTPAYCLASS,
    DKIWISAVEROPTOUTREPORTEDDATE,
    FTERMPOSTJUN83,
    BISANNUALISEDSALARY,
    DPUBLICHOLIDAYENTDATE,
    BTFN,
    FLOADINGATDUNPAID,
    BLONGSERVICEFIRSTENTPERIOD,
    ITFNFORSUPER,
    FHALFSICKPROENTHOURS,
    ICONTRACTHOURSID,
    CONTRACT_HOUR_FIVETRAN_SYNCED,
    IPAYCLASSID,
    FEXTRALEAVEPRO,
    FCUMULATIVEHOURS,
    CMIDDLENAME,
    FLOADINGATDPENALTIESPAID,
    FLONGSERVICEPREENTHOURS,
    FLONGSERVICEPOSTPROHOURS,
    FEXTRALEAVETAKEN,
    FMAXPAYLIMIT,
    IKIWISAVERENROLOPTID,
    DTERMRETIREDATE,
    DTERMINATIONDATE,
    IEARNINGSTYPEID,
    FANNUALPOSTENTHOURS,
    ICHANGEAGENTID,
    ISTATEID,
    BJOBMAKER,
    BOTHERREBATES,
    FSICKACTUALENTHOURS,
    DLONGSERVICELEAVETAKENDATE,
    FDOUBLERATE,
    DRECOMMENCEDATE,
    BHALFSICKNONENTMET,
    IWORKPLANNERID,
    CKIWISAVERELIGIBILITY,
    DPUBLICHOLIDAYTAKENDATE,
    BNZEXCLUDEFROMEMS,
    CTAXSCALECODE,
    BSUSPENDNEXTAUTOPAY,
    ITERMINATIONREASONID,
    IWORKMANSCOMPID,
    IANNUALLEAVECLASSID,
    IEXTRALEAVEID,
    ILONGSERVICECOSTACCID,
    FHALFSICKTAKENHOURS,
    CEMPCODE,
    CIRDEMPLOYEENAME,
    CPOSTALPOSTALCODE,
    ILOADINGCLASSID,
    DSTARTPAYSUMMARY,
    FLONGSERVICEPRE78ENTHOURS,
    DTFNDATESIGNED,
    BISCLOSELYHELDPAYEE,
    BISAWARDBASED,
    IADVICEDELIVERYMETHOD,
    INZSTUDENTLOANBORTYPE,
    FLONGSERVICEPOSTENTHOURS,
    BESPWORKGROUP,
    BFAMILYTAXBENEFIT,
    BWORKINGHOLIDAYMAKER,
    ILOCATIONID,
    DKIWISAVERNEWMEMBERREPORTEDDATE,
    CKIWISAVEROPTOUTFLAG,
    IKIWISAVERSTATUS,
    IDOUBLERATEFACTOR,
    FSICKPROENTHOURS,
    BTERMINATED,
    IDEFAULTEMAIL,
    BMEDICAREREDUCTION,
    CKIWISAVERLATEOPTOUTREASON,
    FYEARLYSALARY,
    ITIMEHALFRATEFACTOR,
    CKIWISAVERNEWEMPSTATUS,
    CKIWISAVERLATEOPTOUTOTHERREASON,
    DHIREDDATE,
    ISICKCOSTACCID,
    DSUSPENDPUBLICTO,
    FLOADINGATDPAID,
    FEXTRALEAVEENT,
    CTFN,
    IHALFSICKNONENTMONTHS,
    INUMBERCHILDREN,
    DANNUALLEAVETAKENDATE,
    BCIRRATE,
    BMEDICARESURCHARGE,
    FEXTRALEAVESHIFTS,
    IABORIGINALTORRESSTRAIT,
    BJOBKEEPER,
    ITERMINATEDPERIODID,
    DSICKACTUALENTDATE,
    ITIMESHEETOPTION,
    IDEATHTYPEID,
    CPOSTCODE,
    FNONCASHBENEFIT,
    CREFERENCENUMBER,
    IGENDERID,
    BSUSPENDHALFSICKENT,
    DLONGSERVICEPOSTENTDATE,
    DDATEOFBIRTH,
    DEXTRALEAVEPRODATE,
    IPAYMENTTYPEID,
    BNZWITHHOLDINGTAX,
    FNZSTUDENTLOANBORTAXRATE,
    BSTP2ISFEIEMPLOYEE,
    ICOUNTRYID,
    DSICKLEAVETAKENDATE,
    IPAYFREQUENCYID,
    BNZSTUDENTLOANCIR,
    BSICKGRANTSICK,
    FTERMAVGNORMALGROSS,
    DANNUALPOSTPRODATE,
    BSUSPENDPUBLICENT,
    ISTP2CESSATIONREASON,
    ITITLEID,
    BNZSPECIFYSLRATE,
    FHALFSICKACTUALENTHOURS,
    FPUBLICHOLIDAYPROHOURS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_FORTNIGHTLY_WORKER_HISTORY
--
union
--
select
	md5('Monthly') as PAY_FREQUENCY_KEY,
    IDEMPLOYEE,
    FOTHERINCOME,
    DVARIATIONDATE,
    DANNUALPOSTENTDATE,
    BHALFSICKGRANTSICK,
    DANNUALISEDANNIVERSARYDATE,
    ILONGSERVICELEAVECLASSID,
    IPAYERGROUPID,
    IPAYPOINTID,
    DEXTRALEAVETAKENDATE,
    IETPPAYSUMMARY,
    FDATESERVICEHOURS,
    CFIRSTNAME,
    FNORMALHOURS,
    BSUSPENDLSLENT,
    IHALFSICKLEAVECLASSID,
    CADDRESS1,
    DSUSPENDHALFSLFROM,
    IEMPLOYMENTTYPEID,
    IQUALIFYINGALLOWANCE,
    FNZSTUDENTLOANCIRTAXRATE,
    CSURNAME,
    ISTP2INCOMETYPE,
    FPUBLICHOLIDAYTAKENHOURS,
    BSUSPENDANNUALENT,
    FTERMPREJUL83,
    FEXEMPTFRINGEBENEFIT,
    CPOSTALADD1,
    BKIWISAVERNEWMEMBER,
    BSUSPENDSICKENT,
    DSUSPENDHALFSLTO,
    ISICKLEAVECLASSID,
    CPREFERREDNAME,
    FANNUALYEARTODATELOADING,
    DSUSPENDPUBLICFROM,
    BMEDICAREEXEMPTION,
    BKIWISAVERISNEWEMPLOYEE,
    IBASISOFPAYMENT,
    CTELEPHONE1,
    FPUBLICHOLIDAYENTHOURS,
    IAUTOPAYTYPE,
    FTERMLUMPSUMD,
    FNZSTUDENTLOANTAXRATE,
    FMINPAYLIMIT,
    FTERMPOSTJUN94,
    FAUTOPAYAMOUNT,
    IPUBLICHOLIDAYID,
    DSUSPENDLSLTO,
    IHIREDPERIODID,
    DKIWISAVEROPTOUTDATE,
    FNZTAXRATE,
    IPAYROLLTAXID,
    IJOBCLASSIFICATIONID,
    FHALFSICKTOTALENT,
    BSUPPRESSFROMSTP,
    DSICKPROENTDATE,
    UCEEPAYADVICEMESSAGE,
    FNORMALRATE,
    CABN,
    IGENERATEAUTOPAY,
    FTOTALREBATES,
    FSICKTOTALENT,
    BPUBLICHOLIDAYCREDIT,
    IPRINTPAYSUMMARY,
    ISTP2ATODEFINED,
    DHALFSICKACTUALENTDATE,
    DSUSPENDSLFROM,
    IANNUALNONENTPERIOD,
    FOTHERRATE,
    IANNUALLEAVECOSTACCID,
    FAWARDRATE,
    FSICKTAKENHOURS,
    FTIMEHALFRATE,
    DDATEPAYSUMMARY,
    IANNUALLEAVELOADINGCLASSID,
    DSUSPENDLSLFROM,
    DSUSPENDALTO,
    BNZSTUDENTLOAN,
    IMEDICARESURCHARGEPERCENT,
    CADDRESS2,
    DNZPAYDAYEDLASTEXPORTDATE,
    FLOADINGATDPENALTIESUNPAID,
    DSUSPENDALFROM,
    FANNUALLEAVETAKENHOURS,
    BDAILYTAXING,
    DLONGSERVICEPOSTPRODATE,
    CPOSTALADD2,
    DHALFSICKPROENTDATE,
    FREPORTFRINGEBENEFIT,
    ICLIMATICID,
    FSPECIFYTAXRATE,
    ISTP2COUNTRYID,
    FAWARDHOURS,
    DSUSPENDSLTO,
    IPAYMETHODID,
    IPOSTALCOUNTRYID,
    DHALFSICKLEAVETAKENDATE,
    BESPTIMESHEET,
    IMARITALSTATUSID,
    ISICKNONENTMONTHS,
    IDEFAULTCOSTACCOUNT,
    FANNUALPOSTPROHOURS,
    CTELEPHONE2,
    IHALFSICKCOSTACCID,
    CSTP2TAXTREATMENT,
    IHECSSFSSDEBT,
    IPOSTALSTATEID,
    BNOTAXFREE,
    DEXTRALEAVEENTDATE,
    BSICKNONENTMET,
    BNZSTUDENTLOANBOR,
    FLONGSERVICELEAVETAKENHOURS,
    FANNUALPREENTHOURS,
    FTERMPOSTJUN83TAX,
    DPUBLICHOLIDAYPRODATE,
    BAUSRESIDENT,
    FLOADINGYTD,
    ITAXSCALEID,
    BSTP2SEASONALWORKER,
    IRATEINCREASECODE,
    BGOTONEXTPAYCLASS,
    DKIWISAVEROPTOUTREPORTEDDATE,
    FTERMPOSTJUN83,
    BISANNUALISEDSALARY,
    DPUBLICHOLIDAYENTDATE,
    BTFN,
    FLOADINGATDUNPAID,
    BLONGSERVICEFIRSTENTPERIOD,
    ITFNFORSUPER,
    FHALFSICKPROENTHOURS,
    ICONTRACTHOURSID,
    CONTRACT_HOUR_FIVETRAN_SYNCED,
    IPAYCLASSID,
    FEXTRALEAVEPRO,
    FCUMULATIVEHOURS,
    CMIDDLENAME,
    FLOADINGATDPENALTIESPAID,
    FLONGSERVICEPREENTHOURS,
    FLONGSERVICEPOSTPROHOURS,
    FEXTRALEAVETAKEN,
    FMAXPAYLIMIT,
    IKIWISAVERENROLOPTID,
    DTERMRETIREDATE,
    DTERMINATIONDATE,
    IEARNINGSTYPEID,
    FANNUALPOSTENTHOURS,
    ICHANGEAGENTID,
    ISTATEID,
    BJOBMAKER,
    BOTHERREBATES,
    FSICKACTUALENTHOURS,
    DLONGSERVICELEAVETAKENDATE,
    FDOUBLERATE,
    DRECOMMENCEDATE,
    BHALFSICKNONENTMET,
    IWORKPLANNERID,
    CKIWISAVERELIGIBILITY,
    DPUBLICHOLIDAYTAKENDATE,
    BNZEXCLUDEFROMEMS,
    CTAXSCALECODE,
    BSUSPENDNEXTAUTOPAY,
    ITERMINATIONREASONID,
    IWORKMANSCOMPID,
    IANNUALLEAVECLASSID,
    IEXTRALEAVEID,
    ILONGSERVICECOSTACCID,
    FHALFSICKTAKENHOURS,
    CEMPCODE,
    CIRDEMPLOYEENAME,
    CPOSTALPOSTALCODE,
    ILOADINGCLASSID,
    DSTARTPAYSUMMARY,
    FLONGSERVICEPRE78ENTHOURS,
    DTFNDATESIGNED,
    BISCLOSELYHELDPAYEE,
    BISAWARDBASED,
    IADVICEDELIVERYMETHOD,
    INZSTUDENTLOANBORTYPE,
    FLONGSERVICEPOSTENTHOURS,
    BESPWORKGROUP,
    BFAMILYTAXBENEFIT,
    BWORKINGHOLIDAYMAKER,
    ILOCATIONID,
    DKIWISAVERNEWMEMBERREPORTEDDATE,
    CKIWISAVEROPTOUTFLAG,
    IKIWISAVERSTATUS,
    IDOUBLERATEFACTOR,
    FSICKPROENTHOURS,
    BTERMINATED,
    IDEFAULTEMAIL,
    BMEDICAREREDUCTION,
    CKIWISAVERLATEOPTOUTREASON,
    FYEARLYSALARY,
    ITIMEHALFRATEFACTOR,
    CKIWISAVERNEWEMPSTATUS,
    CKIWISAVERLATEOPTOUTOTHERREASON,
    DHIREDDATE,
    ISICKCOSTACCID,
    DSUSPENDPUBLICTO,
    FLOADINGATDPAID,
    FEXTRALEAVEENT,
    CTFN,
    IHALFSICKNONENTMONTHS,
    INUMBERCHILDREN,
    DANNUALLEAVETAKENDATE,
    BCIRRATE,
    BMEDICARESURCHARGE,
    FEXTRALEAVESHIFTS,
    IABORIGINALTORRESSTRAIT,
    BJOBKEEPER,
    ITERMINATEDPERIODID,
    DSICKACTUALENTDATE,
    ITIMESHEETOPTION,
    IDEATHTYPEID,
    CPOSTCODE,
    FNONCASHBENEFIT,
    CREFERENCENUMBER,
    IGENDERID,
    BSUSPENDHALFSICKENT,
    DLONGSERVICEPOSTENTDATE,
    DDATEOFBIRTH,
    DEXTRALEAVEPRODATE,
    IPAYMENTTYPEID,
    BNZWITHHOLDINGTAX,
    FNZSTUDENTLOANBORTAXRATE,
    BSTP2ISFEIEMPLOYEE,
    ICOUNTRYID,
    DSICKLEAVETAKENDATE,
    IPAYFREQUENCYID,
    BNZSTUDENTLOANCIR,
    BSICKGRANTSICK,
    FTERMAVGNORMALGROSS,
    DANNUALPOSTPRODATE,
    BSUSPENDPUBLICENT,
    ISTP2CESSATIONREASON,
    ITITLEID,
    BNZSPECIFYSLRATE,
    FHALFSICKACTUALENTHOURS,
    FPUBLICHOLIDAYPROHOURS,
    _FIVETRAN_DELETED,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.PAYROLL_MONTHLY_WORKER_HISTORY

;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_CALCULATION_HISTORY(
	PAY_FREQUENCY_KEY,
	WORKER_ID,
	WORKER_CODE,
	LOCATION_ID,
	LEAVE_TYPE_ID,
	LEAVE_TYPE_NAME,
	LEAVE_CODE,
	LEAVE_DESCRIPTION,
	LEAVE_ID,
	SICK_LEAVE_FIVETRAN_SYNCED,
	ANNUAL_LEAVE_FIVETRAN_SYNCED,
	LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
	USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
	LEAVE_LOADING_ID,
	LEAVE_LOADING_COD,
	LEAVE_LOADING_DESCRIPTION,
	LEAVE_LOADING_PERCENT,
	LEAVE_LOADING_RATE_TYPE_ID,
	LEAVE_LOADING_MAXIMUM_LOADING,
	LEAVE_LOADING_FIVETRAN_SYNCED,
	YTD_LOADING,
	FIRST_ENTITLEMENT_PERIOD,
	GRANT_ENTITLEMENT,
	NON_ENTITLEMENT_MONTHS,
	SUSPEND,
	SUSPEND_FROM,
	SUSPEND_TO,
	POST_ENTITLEMENT_DATE,
	POST_ENTITLEMENT_HOURS,
	POST_ENTITLEMENT_DAYS,
	ENTITLEMENT_LIABILITY_NORMAL_RATE,
	ENTITLEMENT_LIABILITY_AWARD_RATE,
	ENTITLEMENT_LIABILITY_OTHER_RATE,
	POST_PRORATA_DATE,
	POST_PRORATA_HOURS,
	POST_PRORATA_DAYS,
	PRORATA_LIABILITY_NORMAL_RATE,
	PRORATA_LIABILITY_AWARD_RATE,
	PRORATA_LIABILITY_OTHER_RATE,
	POST_ENTITLEMENT_HOURS_PRORATA_CURRENT_YEAR,
	POST_ENTITLEMENT_DAYS_PRORATA_CURRENT_YEAR,
	LEAVE_TAKEN_DATE,
	LEAVE_TAKEN_HOURS,
	LEAVE_TAKEN_DAYS,
	TAKEN_LIABILITY_NORMAL_RATE,
	TAKEN_LIABILITY_AWARD_RATE,
	TAKEN_LIABILITY_OTHER_RATE,
	PRE_ENTITLEMENT_HOURS,
	PRE_ENTITLEMENT_DAYS,
	PRE_ENTITLEMENT_LIABILITY_NORMAL_RATE,
	PRE_ENTITLEMENT_LIABILITY_AWARD_RATE,
	PRE_ENTITLEMENT_LIABILITY_OTHER_RATE,
	PRE_78_ENTITLEMENT_HOURS,
	PRE_78_ENTITLEMENT_DAYS,
	PRE_78_ENTITLEMENT_LIABILITY_NORMAL_RATE,
	PRE_78_ENTITLEMENT_LIABILITY_AWARD_RATE,
	PRE_78_ENTITLEMENT_LIABILITY_OTHER_RATE,
	TOTAL_ENTITLEMENT_HOURS,
	TOTAL_ENTITLEMENT_DAYS,
	TOTAL_ENTITLEMENT_LIABILITY_NORMAL_RATE,
	TOTAL_ENTITLEMENT_LIABILITY_AWARD_RATE,
	TOTAL_ENTITLEMENT_LIABILITY_OTHER_RATE,
	COST_ACCOUNT_ID,
	COST_ACCOUNT_FIVETRAN_SYNCED,
	LEAVE_SHIFTS,
	COST_ACCOUNT_CODE,
	COST_ACCOUNT_DESCRIPTION,
	_FIVETRAN_SYNCED,
	_FIVETRAN_START,
	_FIVETRAN_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

WITH
    cost_acc as (
        select
        	ca.PAY_FREQUENCY_KEY,
            ca.IDCOSTACCOUNT as COST_ACCOUNT_ID,
        	ca.CCOSTCODE as COST_ACCOUNT_CODE,
        	ca.CDESCRIPTION as COST_ACCOUNT_DESCRIPTION,
            ca._FIVETRAN_SYNCED
        from BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_COST_ACCOUNT_HISTORY as ca
        where
            ca.BACTIVE = 1 
            and ca.IPOSITION = ca.MAX_IPOSITION
        )

select
    el.PAY_FREQUENCY_KEY,
    el.iEmployeeID as WORKER_ID,
    e.CEMPCODE as WORKER_CODE,
    e.ilocationid as LOCATION_ID,   -- TODO: it doesn't always match with LOCATION from BEGA_HR_DATA_{{ env }}.CONTROL.PAYROLL_STANDARD_HOURS
    case when udl.ccode = lt.leave_reason_code then
           lt.leave_type_id
         else
           el.iLeaveType 
         end as LEAVE_TYPE_ID,
    case el.iLeaveType
        when 0 then 'Sick'
        when 1 then 'Annual'
        when 2 then 'Long Service'
        when 3 then 'Other'
        when 4 then 'Public Holiday'
        when 5 then 'Extra'
        -- when 6 then 'User Defined'
        when 6 then
            case when udl.ccode = lt.leave_reason_code then
                      -- lt.leave_reason_code
                      lt.pay_component_desc
                 else 
                      'User Defined' 
                 end
        end LEAVE_TYPE_NAME,
        
    case el.iLeaveType
        when 0 then sl.cCode
        when 1 then al.cCode
        when 2 then lsl.cCode
        when 6 then
            case when udl.ccode = lt.leave_reason_code then
                       lt.leave_reason_code
                 else 
                      'Undefined'  -- leave code not defined
                 end
                 
        -- original code
        -- when 6 then udl.cCode
        -- else udl.ccode  
        
        end as LEAVE_CODE,
    case el.iLeaveType
        when 0 then sl.cDescription
        when 1 then al.cDescription
        when 2 then lsl.cDescription
        when 6 then udl.cDescription
        else udl.cDescription
        end as LEAVE_DESCRIPTION,
    el.iLeaveClassID as LEAVE_ID,
    el.SICK_LEAVE_FIVETRAN_SYNCED,
    el.ANNUAL_LEAVE_FIVETRAN_SYNCED,
    el.LONG_SERVICE_LEAVE_FIVETRAN_SYNCED,
    el.USER_DEFINED_LEAVE_FIVETRAN_SYNCED,
    el.iLeaveLoadingClassID as LEAVE_LOADING_ID, 
	ll.cCode as LEAVE_LOADING_COD,
	ll.cLoadingName as LEAVE_LOADING_DESCRIPTION,
	ll.fLoadingPercent as LEAVE_LOADING_PERCENT,
	ll.iRateTypeID as LEAVE_LOADING_RATE_TYPE_ID,
	ll.fMaxLoading as LEAVE_LOADING_MAXIMUM_LOADING,
    el.LEAVE_LOADING_FIVETRAN_SYNCED,
    0 as YTD_LOADING,
    case when el.bFirstEntPeriod = TRUE 
        then 'Yes'
        else 'No'
        end as FIRST_ENTITLEMENT_PERIOD,
    case when el.bGrant = TRUE 
        then 'Yes'
        else 'No'
        end as GRANT_ENTITLEMENT,
    el.iNonEntMonths as NON_ENTITLEMENT_MONTHS,
    case when el.bSuspendEnt = TRUE 
        then 'Yes'
        else 'No'
        end as SUSPEND,
    el.dSuspendFrom as SUSPEND_FROM,
    el.dSuspendTo as SUSPEND_TO,
    el.dPostEntDate as POST_ENTITLEMENT_DATE,
    el.fPostEntHours as POST_ENTITLEMENT_HOURS,
    ifnull(el.fPostEntHours, 0) 
        / ifnull(ch.fHoursPerDay, 1)
        as POST_ENTITLEMENT_DAYS,
    0 as ENTITLEMENT_LIABILITY_NORMAL_RATE,
    0 as ENTITLEMENT_LIABILITY_AWARD_RATE,
    0 as ENTITLEMENT_LIABILITY_OTHER_RATE,
    el.dPostProDate as POST_PRORATA_DATE,
    el.fPostProHours as POST_PRORATA_HOURS,
    ifnull(el.fPostProHours, 0) 
        / ifnull(ch.fHoursPerDay, 1)
        as POST_PRORATA_DAYS,
    0 as PRORATA_LIABILITY_NORMAL_RATE,
    0 as PRORATA_LIABILITY_AWARD_RATE,
    0 as PRORATA_LIABILITY_OTHER_RATE,
    el.fCurrentAccrualHours as POST_ENTITLEMENT_HOURS_PRORATA_CURRENT_YEAR, 
    el.fCurrentAccrualHours 
        / ifnull(ch.fHoursPerDay, 1) 
        as POST_ENTITLEMENT_DAYS_PRORATA_CURRENT_YEAR,
    el.dTakenDate as LEAVE_TAKEN_DATE,
    el.fTakenHours as LEAVE_TAKEN_HOURS,
    ifnull(el.fTakenHours, 0) 
        / ifnull(ch.fHoursPerDay, 1) 
        as LEAVE_TAKEN_DAYS,
    0 as TAKEN_LIABILITY_NORMAL_RATE,
    0 as TAKEN_LIABILITY_AWARD_RATE,
    0 as TAKEN_LIABILITY_OTHER_RATE,
    el.fPreEntHours as PRE_ENTITLEMENT_HOURS,
    ifnull(el.fPreEntHours, 0) 
        / ifnull(ch.fHoursPerDay, 1) 
        as PRE_ENTITLEMENT_DAYS,
    0 as PRE_ENTITLEMENT_LIABILITY_NORMAL_RATE,
    0 as PRE_ENTITLEMENT_LIABILITY_AWARD_RATE,
    0 as PRE_ENTITLEMENT_LIABILITY_OTHER_RATE,
    el.fPre78EntHours as PRE_78_ENTITLEMENT_HOURS,
    ifnull(el.fPre78EntHours, 0) 
        / ifnull(ch.fHoursPerDay, 1) 
        as PRE_78_ENTITLEMENT_DAYS,
    0 as PRE_78_ENTITLEMENT_LIABILITY_NORMAL_RATE,
    0 as PRE_78_ENTITLEMENT_LIABILITY_AWARD_RATE,
    0 as PRE_78_ENTITLEMENT_LIABILITY_OTHER_RATE,
    (
        ifnull(el.fPostEntHours, 0) 
        + ifnull(el.fPostProHours, 0) 
        + ifnull(el.fPreEntHours, 0) 
        - ifnull(el.fTakenHours, 0)
        ) as TOTAL_ENTITLEMENT_HOURS,
    (
        ifnull(el.fPostEntHours, 0) 
        + ifnull(el.fPostProHours, 0) 
        + ifnull(el.fPreEntHours, 0) 
        - ifnull(el.fTakenHours, 0)
        ) 
        / ifnull(ch.fHoursPerDay, 1)
        as TOTAL_ENTITLEMENT_DAYS,
    0 as TOTAL_ENTITLEMENT_LIABILITY_NORMAL_RATE,
    0 as TOTAL_ENTITLEMENT_LIABILITY_AWARD_RATE,
    0 as TOTAL_ENTITLEMENT_LIABILITY_OTHER_RATE,	
    el.iCostAccountID as COST_ACCOUNT_ID,
    el.COST_ACCOUNT_FIVETRAN_SYNCED,
    el.fLeaveShifts as LEAVE_SHIFTS,
	ca.COST_ACCOUNT_CODE,
	ca.COST_ACCOUNT_DESCRIPTION,
    el._FIVETRAN_SYNCED,
    el._FIVETRAN_START,
    el._FIVETRAN_END

from
    BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_HISTORY as el
    
    -- related tables
    left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_WORKER_HISTORY as e on 
        el.PAY_FREQUENCY_KEY = e.PAY_FREQUENCY_KEY
        and el.IEMPLOYEEID = e.IDEMPLOYEE
        and el.EMPLOYEE_FIVETRAN_SYNCED = e._FIVETRAN_SYNCED
    left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_WORKER_CONTRACT_HOUR_HISTORY as ch on 
        e.PAY_FREQUENCY_KEY = ch.PAY_FREQUENCY_KEY
        and e.ICONTRACTHOURSID = ch.IDCONTRACTHOURS
        and e.CONTRACT_HOUR_FIVETRAN_SYNCED = ch._FIVETRAN_SYNCED
    left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_LOADING_HISTORY as ll on 
        ll.PAY_FREQUENCY_KEY = el.PAY_FREQUENCY_KEY
        and ll.IDLOADING = el.iLeaveLoadingClassID
        and ll._FIVETRAN_SYNCED = el.LEAVE_LOADING_FIVETRAN_SYNCED
    left join cost_acc as ca on 
        ca.PAY_FREQUENCY_KEY = el.PAY_FREQUENCY_KEY
        and ca.COST_ACCOUNT_ID = el.iCostAccountID
        and ca._FIVETRAN_SYNCED = el.COST_ACCOUNT_FIVETRAN_SYNCED
        
    -- leave types
    left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_SICK_HISTORY as sl on 
        sl.PAY_FREQUENCY_KEY = el.PAY_FREQUENCY_KEY
        and sl.IDLEAVE = el.iLeaveClassID
        and sl._FIVETRAN_SYNCED = el.SICK_LEAVE_FIVETRAN_SYNCED
        and el.iLeaveType = 0
    left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_ANNUAL_HISTORY as al on 
        al.PAY_FREQUENCY_KEY = el.PAY_FREQUENCY_KEY
        and al.IDLEAVE = el.iLeaveClassID
        and al._FIVETRAN_SYNCED = el.ANNUAL_LEAVE_FIVETRAN_SYNCED
        and el.iLeaveType = 1
    left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_LONG_SERVICE_HISTORY as lsl on 
        lsl.PAY_FREQUENCY_KEY = el.PAY_FREQUENCY_KEY
        and lsl.IDLEAVE = el.iLeaveClassID
        and lsl._FIVETRAN_SYNCED = el.LONG_SERVICE_LEAVE_FIVETRAN_SYNCED
        and el.iLeaveType = 2
    left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_USER_DEFINED_HISTORY as udl on 
        udl.PAY_FREQUENCY_KEY = el.PAY_FREQUENCY_KEY
        and udl.IDLEAVE = el.iLeaveClassID
        and udl._FIVETRAN_SYNCED = el.USER_DEFINED_LEAVE_FIVETRAN_SYNCED
        and el.iLeaveType = 6
     left join BEGA_HR_DATA_{{ env }}.control.user_defined_leave_type as lt
         on udl.ccode = lt.leave_reason_code
;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET_2025(
	FISCAL_YEAR,
	TERM_DATE,
	M_3_FINANCE_LOCATION,
	MANAGER_POSITION_F,
	FS_CC_BUILD,
	COUNT,
	JOB_FAMILY_C,
	JOB_REQ,
	CC_NAME,
	POSITION_CODE,
	EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,
	TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL,
	TFR,
	TERM_REPORT_30_01_2024,
	PROJECT_APPLE_CHERRY,
	TERMINATION_TYPE,
	SUB_STRUCTURE,
	LIVING_AWAY_FROM_HOME_ALLOWANCE_LAFHA_,
	M_3_DIVISION_CURRENT_,
	DELAYED_CLOSURES_MONTHS_,
	SALARY_PLAN_BASE_AMOUNT,
	FS_CC_CAT,
	SITE,
	REM_REPORT_POS_ID,
	BUSINESS_UNIT,
	SUPER_ON_STI_,
	POSITION_ID_PER_GO_LIVE_OBT_DATA,
	SICK_LEAVE_LIABILITY,
	SALARY_CONTINUANCE,
	FS_LOC,
	COMP_GRADE,
	EMPLOYEE_CODE_CALC_F,
	ON_CALL_ALLOWANCE,
	EMPLOYEE_IN_TERM_REPORT,
	FIRST_AID_ALLOWANCE,
	SUPERVISORY_ORG_F,
	TOTAL_ALLOWANCES,
	BUSINESS_TITLE_F,
	AL_LIABILITY,
	TFR_MIDPOINT,
	TERM_TYPE,
	MANAGER_NAME_CAL_F,
	WORKER_CODE,
	TFR_M,
	FS_CC,
	MONTHLY_SUPER,
	INCUMBENT_TFR,
	POSITION_EXISTS_IN_F_24_ORIGINAL_BUDGET,
	ERP_COST_CENTRE,
	LSL_LIABILITY,
	MONTHLY_BDD_CAR_ALLOWANCE,
	TERMINATION_DATE,
	TREATMENT_OD,
	TOTAL_SUPER_BASE_ALLOWANCE_LSL,
	SUPERANNUATION_IN_TFR,
	STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX,
	TARGET_BONUS_PERCENT,
	OBT_V_RR_CHECK,
	STATE,
	FS_BUSINESS_UNIT,
	FS_CC_ENTITY,
	BOARD_ALLOWANCE,
	SUP_ORG_REF_ID,
	EMPLOYEE_PER_GO_LIVE_OBT_DATA,
	BUSINESS_MOTOR_VEHICLE_ALLOWANCE,
	POSITION_CODE_EXISTS_IN_REM_REPORT,
	JOB_CLASSIFICATIONS_C,
	COMPANY_F,
	MANAGER_POSITION_ID_F,
	EMPLOYEE_GROUP,
	REM_REPORT_START_DATE,
	HIGHER_DUTIES_ALLOWANCE_,
	EFFECTIVE_DATE,
	RECONCILE_AGAINST_WEEKLY_REM_REPORT_ID_,
	DEPTH_LEVEL,
	FS_CC_STATE,
	SHIFT_ALLOWANCE_,
	EMPLOYEE_NAME_CALC_F,
	CHANGE_TYPE,
	NIL_TFR_Q_2_F_IMPACT,
	RECONCILE_AGAINST_WEEKLY_REM_REPORT_NAME_,
	_30_01_REM_REPORT,
	FS_CC_DIV,
	MONTHLY_BASE_SALARY,
	PAYROLL_TAX,
	EMPLOYEE_EXISTS_IN_REM_REPORT,
	BDD_CAR_ALLOWANCE,
	_FIVETRAN_SYNCED
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select
       cast('2025' as number(4)) as fiscal_year,
       null as TERM_DATE,    
       null as M_3_FINANCE_LOCATION,
       a.MANAGER_POSITION_F as MANAGER_POSITION_F,
       null as FS_CC_BUILD,
       0 as count,
       null as JOB_FAMILY_C,
       null as JOB_REQ,
       cc   as CC_NAME,
       a.position_id as POSITION_CODE,
       a.employee_id as EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,
       a.TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL:: number(9,3) as TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL,
       0 as TFR,
       null as TERM_REPORT_30_01_2024,
       null PROJECT_APPLE_CHERRY,
       a.TERMINATION_TYPE as TERMINATION_TYPE,
       0 as SUB_STRUCTURE,
       0 as LIVING_AWAY_FROM_HOME_ALLOWANCE_LAFHA_,
       0 as M_3_DIVISION_CURRENT_,
       null as DELAYED_CLOSURES_MONTHS_,
       a.FY_25_BASE_SALARY:: number(9,2) as SALARY_PLAN_BASE_AMOUNT,
       null as FS_CC_CAT,
       null as SITE,
       null as REM_REPORT_POS_ID,
       null as BUSINESS_UNIT,
       a.SUPER_ON_STI_:: number(9,3) as SUPER_ON_STI_,
       null as POSITION_ID_PER_GO_LIVE_OBT_DATA,
       a.SICK_LEAVE_LIABILITY:: number(3,2) as SICK_LEAVE_LIABILITY,
       a.SALARY_CONTINUANCE:: number(9,3) as SALARY_CONTINUANCE,
       null as FS_LOC,
       null as COMP_GRADE,
       null as EMPLOYEE_CODE_CALC_F,
       a.ON_CALL_ALLOWANCE:: number(9,2) as ON_CALL_ALLOWANCE,
       null as EMPLOYEE_IN_TERM_REPORT,
       0 as FIRST_AID_ALLOWANCE,
       null as SUPERVISORY_ORG_F,
       a.TOTAL_ALLOWANCES:: number(9,2) as TOTAL_ALLOWANCES,
       null as BUSINESS_TITLE_F,
       a.AL_LIABILITY:: number(9,3) as AL_LIABILITY,
       a.TFR_MIDPOINT:: number(9,2) as TFR_MIDPOINT,
       null TERM_TYPE,
       null MANAGER_NAME_CAL_F,
       a.employee_id as WORKER_CODE,
       0 as TFR_M,
       0 as FS_CC,
       a.FY_25_MONTHLY_SUPER_11_5_:: number(9,2) as MONTHLY_SUPER,
       null as INCUMBENT_TFR,
       null as POSITION_EXISTS_IN_F_24_ORIGINAL_BUDGET,
       null as ERP_COST_CENTRE,
       a.LSL_LIABILITY:: number(9,3) as LSL_LIABILITY,
       a.FY_25_MONTHLY_BDD_CAR_ALLOWANCE:: number(9,2) as MONTHLY_BDD_CAR_ALLOWANCE,
       null as TERMINATION_DATE,         
       null as TREATMENT_OD,
       a.TOTAL_SUPER_BASE_ALLOWANCE_LSL:: number(9,3) as TOTAL_SUPER_BASE_ALLOWANCE_LSL,
       0 as SUPERANNUATION_IN_TFR,
       a.STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX:: number(9,2) as STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX,
       0 as TARGET_BONUS_PERCENT, 
       0 as OBT_V_RR_CHECK,
       null as STATE,
       null as FS_BUSINESS_UNIT,
       null as FS_CC_ENTITY,
       a.BOARD_ALLOWANCE:: number(9,2) as BOARD_ALLOWANCE,
       null as SUP_ORG_REF_ID,
       null as EMPLOYEE_PER_GO_LIVE_OBT_DATA,
       a.BUSINESS_MOTOR_VEHICLE_ALLOWANCE:: number(9,2) BUSINESS_MOTOR_VEHICLE_ALLOWANCE,
       null as POSITION_CODE_EXISTS_IN_REM_REPORT,
       null as JOB_CLASSIFICATIONS_C,
       null as COMPANY_F,
       null as MANAGER_POSITION_ID_F,
       null as EMPLOYEE_GROUP,
       null as REM_REPORT_START_DATE,       
       a.HIGHER_DUTIES_ALLOWANCE_:: number(9,2) as HIGHER_DUTIES_ALLOWANCE_,
       null as EFFECTIVE_DATE,        
       null reconcile_against_weekly_rem_report_id_,
       0 as DEPTH_LEVEL,
       null as FS_CC_STATE,
       a.SHIFT_ALLOWANCE_:: number(9,2) as SHIFT_ALLOWANCE_,
       a.employee_name as EMPLOYEE_NAME_CALC_F,
       null as CHANGE_TYPE,
       null as NIL_TFR_Q_2_F_IMPACT,
       null as RECONCILE_AGAINST_WEEKLY_REM_REPORT_NAME_,
       null as _30_01_rem_report,
       null as FS_CC_DIV,
       replace(a.FY_25_MONTHLY_BASE_SALARY_WITH_REM_INCREASE,'TBC','0'):: number(9,2) as MONTHLY_BASE_SALARY,
       a.PAYROLL_TAX:: number(9,2) as PAYROLL_TAX,
       null EMPLOYEE_EXISTS_IN_REM_REPORT,
       a.FY_25_MONTHLY_BDD_CAR_ALLOWANCE:: number(9,2) BDD_CAR_ALLOWANCE,
       a._fivetran_synced as _FIVETRAN_SYNCED
       -- TODO-LATER: concerns around new objects regularly created
from BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_FINANCE.FY_25_BUDGET_24_04_2024_FY_25_BUDGET A
order by _LINE
limit 1000000000 offset 9 

 ;


create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET_2024(
	FISCAL_YEAR,
	TERM_DATE,
	M_3_FINANCE_LOCATION,
	MANAGER_POSITION_F,
	FS_CC_BUILD,
	COUNT,
	JOB_FAMILY_C,
	JOB_REQ,
	CC_NAME,
	POSITION_CODE,
	EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,
	TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL,
	TFR,
	TERM_REPORT_30_01_2024,
	PROJECT_APPLE_CHERRY,
	TERMINATION_TYPE,
	SUB_STRUCTURE,
	LIVING_AWAY_FROM_HOME_ALLOWANCE_LAFHA_,
	M_3_DIVISION_CURRENT_,
	DELAYED_CLOSURES_MONTHS_,
	SALARY_PLAN_BASE_AMOUNT,
	FS_CC_CAT,
	SITE,
	REM_REPORT_POS_ID,
	BUSINESS_UNIT,
	SUPER_ON_STI_,
	POSITION_ID_PER_GO_LIVE_OBT_DATA,
	SICK_LEAVE_LIABILITY,
	SALARY_CONTINUANCE,
	FS_LOC,
	COMP_GRADE,
	EMPLOYEE_CODE_CALC_F,
	ON_CALL_ALLOWANCE,
	EMPLOYEE_IN_TERM_REPORT,
	FIRST_AID_ALLOWANCE,
	SUPERVISORY_ORG_F,
	TOTAL_ALLOWANCES,
	BUSINESS_TITLE_F,
	AL_LIABILITY,
	TFR_MIDPOINT,
	TERM_TYPE,
	MANAGER_NAME_CAL_F,
	WORKER_CODE,
	TFR_M,
	FS_CC,
	MONTHLY_SUPER,
	INCUMBENT_TFR,
	POSITION_EXISTS_IN_F_24_ORIGINAL_BUDGET,
	ERP_COST_CENTRE,
	LSL_LIABILITY,
	MONTHLY_BDD_CAR_ALLOWANCE,
	TERMINATION_DATE,
	TREATMENT_OD,
	TOTAL_SUPER_BASE_ALLOWANCE_LSL,
	SUPERANNUATION_IN_TFR,
	STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX,
	TARGET_BONUS_PERCENT,
	OBT_V_RR_CHECK,
	STATE,
	FS_BUSINESS_UNIT,
	FS_CC_ENTITY,
	BOARD_ALLOWANCE,
	SUP_ORG_REF_ID,
	EMPLOYEE_PER_GO_LIVE_OBT_DATA,
	BUSINESS_MOTOR_VEHICLE_ALLOWANCE,
	POSITION_CODE_EXISTS_IN_REM_REPORT,
	JOB_CLASSIFICATIONS_C,
	COMPANY_F,
	MANAGER_POSITION_ID_F,
	EMPLOYEE_GROUP,
	REM_REPORT_START_DATE,
	HIGHER_DUTIES_ALLOWANCE_,
	EFFECTIVE_DATE,
	RECONCILE_AGAINST_WEEKLY_REM_REPORT_ID_,
	DEPTH_LEVEL,
	FS_CC_STATE,
	SHIFT_ALLOWANCE_,
	EMPLOYEE_NAME_CALC_F,
	CHANGE_TYPE,
	NIL_TFR_Q_2_F_IMPACT,
	RECONCILE_AGAINST_WEEKLY_REM_REPORT_NAME_,
	_30_01_REM_REPORT,
	FS_CC_DIV,
	MONTHLY_BASE_SALARY,
	PAYROLL_TAX,
	EMPLOYEE_EXISTS_IN_REM_REPORT,
	BDD_CAR_ALLOWANCE,
	_FIVETRAN_SYNCED
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select
       cast('2024' as number(4)) as fiscal_year,
       ifnull(
         try_to_date(
            replace(a.TERM_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
         try_to_date(
            a.TERM_DATE, 
            'dd/mm/yyyy')
        ) as TERM_DATE,    
       a.M_3_FINANCE_LOCATION,
       a.MANAGER_POSITION_F,
       --a.CHECK,
       a.FS_CC_BUILD,
       a.count:: number(5,1) as count,
       a.JOB_FAMILY_C,
       a.JOB_REQ,
       a.CC_NAME,
       a.POSITION_CODE,
       a.EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,
       a.TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL:: number(9,3) as TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL,
       a.TFR:: number(9,3) as TFR,
       a.TERM_REPORT_30_01_2024,
       a.PROJECT_APPLE_CHERRY,
       a.TERMINATION_TYPE,
       a.SUB_STRUCTURE,
       a.LIVING_AWAY_FROM_HOME_ALLOWANCE_LAFHA_:: number(9,3) as LIVING_AWAY_FROM_HOME_ALLOWANCE_LAFHA_,
       a.M_3_DIVISION_CURRENT_:: number(9,2) as M_3_DIVISION_CURRENT_,
       a.DELAYED_CLOSURES_MONTHS_,
       a.SALARY_PLAN_BASE_AMOUNT:: number(9,2) as SALARY_PLAN_BASE_AMOUNT,
       a.FS_CC_CAT,
       a.SITE,
       a.REM_REPORT_POS_ID,
       a.BUSINESS_UNIT,
       -- replace(a.FY_24_OBT_TFR:: number(9,2), '#REF!','') as FY_24_OBT_TFR,
       a.SUPER_ON_STI_:: number(9,3) as SUPER_ON_STI_,
       a.POSITION_ID_PER_GO_LIVE_OBT_DATA,
       a.SICK_LEAVE_LIABILITY:: number(3,2) as SICK_LEAVE_LIABILITY,
       a.SALARY_CONTINUANCE:: number(9,3) as SALARY_CONTINUANCE,
       a.FS_LOC,
       a.COMP_GRADE,
       a.EMPLOYEE_CODE_CALC_F,
       a.ON_CALL_ALLOWANCE:: number(9,2) as ON_CALL_ALLOWANCE,
       a.EMPLOYEE_IN_TERM_REPORT,
       a.FIRST_AID_ALLOWANCE:: number(9,2) as FIRST_AID_ALLOWANCE,
       a.SUPERVISORY_ORG_F,
       a.TOTAL_ALLOWANCES:: number(9,2) as TOTAL_ALLOWANCES,
       a.BUSINESS_TITLE_F,
       a.AL_LIABILITY:: number(9,3) as AL_LIABILITY,
       a.TFR_MIDPOINT:: number(9,2) as TFR_MIDPOINT,
       a.TERM_TYPE,
       a.MANAGER_NAME_CAL_F,
       a.MANAGER_EMPLOYEE_ID_CALC_F as WORKER_CODE,
       a.TFR_M:: number(9,2) as TFR_M,
       a.FS_CC:: number(9,2) as FS_CC,
       a.MONTHLY_SUPER:: number(9,2) as MONTHLY_SUPER,
       a.INCUMBENT_TFR,
       a.POSITION_EXISTS_IN_F_24_ORIGINAL_BUDGET,
       a.ERP_COST_CENTRE,
       a.LSL_LIABILITY:: number(9,3) as LSL_LIABILITY,
       a.MONTHLY_BDD_CAR_ALLOWANCE:: number(9,2) as MONTHLY_BDD_CAR_ALLOWANCE,
       ifnull(
        try_to_date(
            replace(a.TERMINATION_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.TERMINATION_DATE, 
            'dd/mm/yyyy')
        ) as TERMINATION_DATE,         
       a.TREATMENT_OD,
       a.TOTAL_SUPER_BASE_ALLOWANCE_LSL:: number(9,3) as TOTAL_SUPER_BASE_ALLOWANCE_LSL,
       a.SUPERANNUATION_IN_TFR:: number(9,2) as SUPERANNUATION_IN_TFR,
       a.STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX:: number(9,2) as STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX,
       a.TARGET_BONUS_PERCENT:: number(9,2) as TARGET_BONUS_PERCENT, 
       a.OBT_V_RR_CHECK:: float as OBT_V_RR_CHECK,
       a.STATE,
       a.FS_BUSINESS_UNIT,
       a.FS_CC_ENTITY,
       a.BOARD_ALLOWANCE:: number(9,2) as BOARD_ALLOWANCE,
       a.SUP_ORG_REF_ID,
       a.EMPLOYEE_PER_GO_LIVE_OBT_DATA,
       a.BUSINESS_MOTOR_VEHICLE_ALLOWANCE:: number(9,2) BUSINESS_MOTOR_VEHICLE_ALLOWANCE,
       a.POSITION_CODE_EXISTS_IN_REM_REPORT,
       a.JOB_CLASSIFICATIONS_C,
       a.COMPANY_F,
       a.MANAGER_POSITION_ID_F,
       a.EMPLOYEE_GROUP,
       ifnull(
        try_to_date(
            replace(a.REM_REPORT_START_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.REM_REPORT_START_DATE, 
            'dd/mm/yyyy')
        ) as REM_REPORT_START_DATE,       
       a.HIGHER_DUTIES_ALLOWANCE_:: number(9,2) as HIGHER_DUTIES_ALLOWANCE_,
       ifnull(
        try_to_date(
            replace(a.EFFECTIVE_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.EFFECTIVE_DATE, 
            'dd/mm/yyyy')
        ) as EFFECTIVE_DATE,        
       a.reconcile_against_weekly_rem_report_id_,
       a.DEPTH_LEVEL:: float as DEPTH_LEVEL,
       a.FS_CC_STATE,
       a.SHIFT_ALLOWANCE_:: number(9,2) as SHIFT_ALLOWANCE_,
       a.EMPLOYEE_NAME_CALC_F,
       a.CHANGE_TYPE,
       a.NIL_TFR_Q_2_F_IMPACT,
       a.RECONCILE_AGAINST_WEEKLY_REM_REPORT_NAME_,
       a._30_01_rem_report,
       a.FS_CC_DIV,
       replace(a.MONTHLY_BASE_SALARY,'TBC','0'):: number(9,2) as MONTHLY_BASE_SALARY,
       a.PAYROLL_TAX:: number(9,2) as PAYROLL_TAX,
       a.EMPLOYEE_EXISTS_IN_REM_REPORT,
       a.BDD_CAR_ALLOWANCE:: number(9,2) BDD_CAR_ALLOWANCE,
       a._fivetran_synced
       -- TODO-LATER: concerns around new objects regularly created
from BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_FINANCE.FY_24_OBT_BUDGET_V_6_Q_2_F_FY_24_OBT_BUDGET A
 order by _LINE
 limit 1000000000 offset 9       -- TODO-LATER: remove limitation
;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET(
	FISCAL_YEAR,
	MANAGER_POSITION_F,
	CC_NAME,
	POSITION_CODE,
	EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,
	TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL,
	TERMINATION_TYPE,
	SALARY_PLAN_BASE_AMOUNT,
	SUPER_ON_STI_,
	SICK_LEAVE_LIABILITY,
	SALARY_CONTINUANCE,
	ON_CALL_ALLOWANCE,
	TOTAL_ALLOWANCES,
	AL_LIABILITY,
	TFR_MIDPOINT,
	WORKER_CODE,
	MONTHLY_SUPER,
	LSL_LIABILITY,
	MONTHLY_BDD_CAR_ALLOWANCE,
	TOTAL_SUPER_BASE_ALLOWANCE_LSL,
	STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX,
	BOARD_ALLOWANCE,
	BUSINESS_MOTOR_VEHICLE_ALLOWANCE,
	HIGHER_DUTIES_ALLOWANCE_,
	SHIFT_ALLOWANCE_,
	EMPLOYEE_NAME_CALC_F,
	MONTHLY_BASE_SALARY,
	PAYROLL_TAX,
	BDD_CAR_ALLOWANCE,
	_FIVETRAN_SYNCED
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

-- RS: 09/08/2024 Deduplicated FY25 budget data as duplicated positions
with position_budget_2025_agg_cte as (
select 
       fiscal_year,
       POSITION_CODE as POSITION_CODE,
       MAX(ifnull(EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,'')) as EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,
       MAX(ifnull(WORKER_CODE,'')) as WORKER_CODE
from BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET_2025
group by all
),
position_budget_2025_dedup_cte as (
select 
       pb.fiscal_year,
       pb.MANAGER_POSITION_F,
       pb.CC_NAME,
       pb.POSITION_CODE,
       pb.EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,
       pb.TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL,
       pb.TERMINATION_TYPE,
       pb.SALARY_PLAN_BASE_AMOUNT,
       pb.SUPER_ON_STI_,
       pb.SICK_LEAVE_LIABILITY,
       pb.SALARY_CONTINUANCE,
       pb.ON_CALL_ALLOWANCE,
       pb.TOTAL_ALLOWANCES,
       pb.AL_LIABILITY,
       pb.TFR_MIDPOINT,
       pb.WORKER_CODE,
       pb.MONTHLY_SUPER,
       pb.LSL_LIABILITY,
       pb.MONTHLY_BDD_CAR_ALLOWANCE,
       pb.TOTAL_SUPER_BASE_ALLOWANCE_LSL,
       pb.STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX,
       pb.BOARD_ALLOWANCE,
       pb.BUSINESS_MOTOR_VEHICLE_ALLOWANCE,    
       pb.HIGHER_DUTIES_ALLOWANCE_,
       pb.SHIFT_ALLOWANCE_,
       pb.EMPLOYEE_NAME_CALC_F,
       pb.MONTHLY_BASE_SALARY,
       pb.PAYROLL_TAX,
       pb.BDD_CAR_ALLOWANCE,
       pb._fivetran_synced
from BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET_2025 as pb
inner join position_budget_2025_agg_cte as pba on
    pba.fiscal_year = pb.fiscal_year
    and pba.POSITION_CODE = pb.POSITION_CODE
    and pba.EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA = ifnull(pb.EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,'')
    and pba.WORKER_CODE = ifnull(pb.WORKER_CODE,'')
)

select 
       fiscal_year,
       MANAGER_POSITION_F,
       CC_NAME,
       POSITION_CODE,
       EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,
       TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL,
       TERMINATION_TYPE,
       SALARY_PLAN_BASE_AMOUNT,
       SUPER_ON_STI_,
       SICK_LEAVE_LIABILITY,
       SALARY_CONTINUANCE,
       ON_CALL_ALLOWANCE,
       TOTAL_ALLOWANCES,
       AL_LIABILITY,
       TFR_MIDPOINT,
       WORKER_CODE,
       MONTHLY_SUPER,
       LSL_LIABILITY,
       MONTHLY_BDD_CAR_ALLOWANCE,
       TOTAL_SUPER_BASE_ALLOWANCE_LSL,
       STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX,
       BOARD_ALLOWANCE,
       BUSINESS_MOTOR_VEHICLE_ALLOWANCE,    
       HIGHER_DUTIES_ALLOWANCE_,
       SHIFT_ALLOWANCE_,
       EMPLOYEE_NAME_CALC_F,
       MONTHLY_BASE_SALARY,
       PAYROLL_TAX,
       BDD_CAR_ALLOWANCE,
       _fivetran_synced
from BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET_2024

--
union all
--

select 
       fiscal_year,
       MANAGER_POSITION_F,
       CC_NAME,
       POSITION_CODE,
       EMPLOYEE_ID_PER_GO_LIVE_OBT_DATA,
       TOTAL_SUPER_BASE_STI_ALLOWANCE_LSL,
       TERMINATION_TYPE,
       SALARY_PLAN_BASE_AMOUNT,
       SUPER_ON_STI_,
       SICK_LEAVE_LIABILITY,
       SALARY_CONTINUANCE,
       ON_CALL_ALLOWANCE,
       TOTAL_ALLOWANCES,
       AL_LIABILITY,
       TFR_MIDPOINT,
       WORKER_CODE,
       MONTHLY_SUPER,
       LSL_LIABILITY,
       MONTHLY_BDD_CAR_ALLOWANCE,
       TOTAL_SUPER_BASE_ALLOWANCE_LSL,
       STI_OPPORTUNITY_BASE_SUPER_PAYROLL_TAX,
       BOARD_ALLOWANCE,
       BUSINESS_MOTOR_VEHICLE_ALLOWANCE,    
       HIGHER_DUTIES_ALLOWANCE_,
       SHIFT_ALLOWANCE_,
       EMPLOYEE_NAME_CALC_F,
       MONTHLY_BASE_SALARY,
       PAYROLL_TAX,
       BDD_CAR_ALLOWANCE,
       _fivetran_synced
from position_budget_2025_dedup_cte

;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_INVOICE_PROGRAMMED(
	BILLING_COMPANY_ADDRESS,
	BILL_NAME,
	BRANCH,
	WORKER_EXTERNAL_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	CLIENT_ID,
	CLIENT_NAME,
	POSITION_TITLE,
	CLIENT_STATUS,
	CLIENT_SUBURB,
	CORPORATE_IDENTITY_NUMBER,
	INVOICE_DATE,
	INVOICE_ID,
	INVOICE_RATE,
	INV_QUANTITY,
	ITEM_DATE,
	ITEM_SUB_TOTAL,
	JOB_END_DATE,
	JOB_ORDER_ID,
	JOB_POSITION,
	JOB_START_DATE,
	OFFICE_CODE,
	OFFICE_NAME,
	PARENT_COMPANY_NAME,
	PAY_NAME,
	PAY_QUANTITY,
	PAY_RATE,
	PAY_TOTAL,
	PAY_TYPE,
	PROJECT_CODE,
	PURCHASE_ORDER_NO,
	SKILL_GROUP,
	STATE,
	END_OF_WEEK_DATE,
	MANAGER_FULL_NAME,
	VERSION_TIMESTAMP
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 

-- TODO-LATER: concerns around new objects regularly created

with
    pr_bdd as (
        select *
        from
            BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_PROGRAMMED.CASUAL_SPEND_DATA_REPORT_BDD_03_JULY_30_JULY_2023_PAGE_1
        --
        union all
        --
        select *
        from 
            BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_PROGRAMMED.CASUAL_SPEND_DATA_REPORT_BDD_04_SEPTEMBER_01_OCTOBER_2023_PAGE_1
        --
        union all
        --
        select 
         _LINE, 
         _FIVETRAN_SYNCED, 
         PURCHASE_ORDER_NO, 
         INVOICE_DATE, 
         CLIENT_NAME, 
         CLIENT_POSITION, 
         FIRST_NAME, 
         CANDIDATE_ID, 
         JOB_ORDER_ID, 
         CLIENT_STATUS, 
         INVOICE_ID, 
         JOB_START_DATE, 
         PAY_TYPE, 
         INV_QUANTITY, 
         BILL_NAME, 
         DEPARTMENT, 
         ORDER_BY_CONTACT, 
         BRANCH, 
         ITEM_SUB_TOTAL, 
         ITEM_DATE, 
         JOB_END_DATE, 
         CLIENT_ID, 
         TEMPLATE_PAY_CLASS, 
         PAY_RATE, 
         CLIENT_SUBURB, 
         INVOICE_RATE, 
         OFFICE_CODE,
         INV_PROJECT_CODE as PROJECT_CODE,
         SUR_NAME, 
         OFFICE_NAME, 
         PAY_QUANTITY, 
         SKILL_GROUP, 
         STATE, 
         TIMESHEET_CODE, 
         CORPORATE_IDENTITY_NUMBER, 
         JOB_POSITION, 
         BILLING_COMPANY_ADDRESS, 
         PARENT_COMPANY_NAME, 
         PAY_TOTAL, 
         --INV_PROJECT_CODE, 
         TIMESHEET_END_DATE, 
         PAY_NAME
        from 
           BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_PROGRAMMED.CASUAL_SPEND_DATA_REPORT_BDD_4_MAR_31_MAR_2024_PAGE_1
        ),

    pr_bega as (
        select * 
        from 
            BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_PROGRAMMED.CASUAL_SPEND_DATA_REPORT_BEGA_03_JULY_30_JULY_2023_PAGE_1 
        --
        union all
        --
        select 
            *
        from 
            BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_PROGRAMMED.CASUAL_SPEND_DATA_REPORT_BEGA_04_SEPTEMBER_01_OCTOBER_2023_PAGE_1 
        --
        union all
        --
        select 
            *
        from 
            BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_PROGRAMMED.CASUAL_SPEND_DATA_REPORT_BEGA_29_MAY_02_JULY_2023_PAGE_1
        --
        union all
        --
        select 
         _LINE, 
         _FIVETRAN_SYNCED, 
         PURCHASE_ORDER_NO, 
         INVOICE_DATE, 
         CLIENT_NAME, 
         CLIENT_POSITION, 
         FIRST_NAME, 
         CANDIDATE_ID, 
         JOB_ORDER_ID, 
         CLIENT_STATUS, 
         INVOICE_ID, 
         JOB_START_DATE, 
         PAY_TYPE, 
         INV_QUANTITY, 
         BILL_NAME, 
         DEPARTMENT, 
         ORDER_BY_CONTACT, 
         BRANCH, 
         ITEM_SUB_TOTAL, 
         ITEM_DATE, 
         JOB_END_DATE, 
         CLIENT_ID, 
         TEMPLATE_PAY_CLASS, 
         PAY_RATE, 
         CLIENT_SUBURB, 
         INVOICE_RATE, 
         OFFICE_CODE, 
         INV_PROJECT_CODE as PROJECT_CODE,
         SUR_NAME, 
         OFFICE_NAME, 
         PAY_QUANTITY, 
         SKILL_GROUP, 
         STATE, 
         CORPORATE_IDENTITY_NUMBER, 
         JOB_POSITION, 
         BILLING_COMPANY_ADDRESS, 
         PARENT_COMPANY_NAME, 
         PAY_TOTAL, 
         --INV_PROJECT_CODE, 
         TIMESHEET_END_DATE, 
         PAY_NAME
        from
            BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_PROGRAMMED.CASUAL_SPEND_DATA_REPORT_BEGA_4_MAR_31_MAR_2024_PAGE_1            
        )

select 
    a.BILLING_COMPANY_ADDRESS,
    a.BILL_NAME,
    a.BRANCH,
    cast(a.CANDIDATE_ID as varchar(38)) as WORKER_EXTERNAL_CODE,
    a.FIRST_NAME,
    a.SUR_NAME as LAST_NAME,       
    concat(a.FIRST_NAME, ' ', a.SUR_NAME) as FULL_NAME,
    a.CLIENT_ID,
    a.CLIENT_NAME,
    a.CLIENT_POSITION AS POSITION_TITLE,
    a.CLIENT_STATUS,
    a.CLIENT_SUBURB,
    a.CORPORATE_IDENTITY_NUMBER,
    a.INVOICE_DATE,
    a.INVOICE_ID,
    a.INVOICE_RATE,
    a.INV_QUANTITY,
    a.ITEM_DATE,
    a.ITEM_SUB_TOTAL,
    a.JOB_END_DATE,
    a.JOB_ORDER_ID,
    a.JOB_POSITION,
    a.JOB_START_DATE,
    a.OFFICE_CODE,
    a.OFFICE_NAME,
    a.PARENT_COMPANY_NAME,
    a.PAY_NAME,
    a.PAY_QUANTITY,
    a.PAY_RATE,
    a.PAY_TOTAL,
    a.PAY_TYPE,
    a.PROJECT_CODE,
    a.PURCHASE_ORDER_NO,
    a.SKILL_GROUP,
    a.STATE,

    last_day(try_to_date(a.INVOICE_DATE, 'dd/mm/yyyy'), 'week') as END_OF_WEEK_DATE,
    a.ORDER_BY_CONTACT as MANAGER_FULL_NAME,

    a._FIVETRAN_SYNCED as VERSION_TIMESTAMP       

from pr_bdd as a

union

select 
    a.billing_company_address,
    a.bill_name,
    a.branch,
    cast(a.candidate_id as varchar(38)) as WORKER_EXTERNAL_CODE,
    a.first_name,
    a.sur_name as LAST_NAME,       
    concat(a.first_name, ' ', a.sur_name) as full_name,
    a.client_id,
    a.client_name,
    a.client_position as position_title,
    a.client_status,
    a.client_suburb,
    a.corporate_identity_number,
    a.invoice_date,
    a.invoice_id,
    a.invoice_rate,
    a.inv_quantity,
    a.item_date,
    a.item_sub_total,
    a.job_end_date,
    a.job_order_id,
    a.job_position,
    a.job_start_date,
    a.office_code,
    a.office_name,
    a.parent_company_name,
    a.pay_name,
    a.pay_quantity,
    a.pay_rate,
    a.pay_total,
    a.pay_type,
    a.project_code,
    a.purchase_order_no,
    a.skill_group,
    a.state,

    last_day(try_to_date(a.invoice_date, 'dd/mm/yyyy'), 'week') as end_of_week_date,       
    a.order_by_contact as manager_full_name,
    
    a._fivetran_synced as VERSION_TIMESTAMP
from pr_bega as a

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_INVOICE_RANDSTAD(
	WORKER_EXTERNAL_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	MANAGER_FULL_NAME,
	SITE_ADDRESS_STATE,
	CHARGES_INCL_GST,
	PLACEMENT_START_DATE,
	SITE_ADDRESS_TITLE,
	WEEK_ENDING_DATE_CONVERTED,
	END_OF_WEEK_DATE,
	CHARGE_RATE,
	PAY_RATE,
	PRODUCT_NAME,
	GST,
	JOB_CATEGORY,
	PLACEMENT_END_DATE,
	SERVICE_TYPE_DESC,
	BILLING_ITEM_COST_CENTER,
	POSITION_TITLE,
	INVOICE_NUMBER,
	CHARGES_EXCL_GST,
	CONSULTANT,
	CLIENT,
	CHARGE_QUANTITY,
	VERSION_TIMESTAMP
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 

-- TODO-LATER: concerns around new objects regularly created

SELECT 
    cast(a.BOOKING_NO as varchar(38)) as WORKER_EXTERNAL_CODE,          
    split_part(a.CANDIDATE_FULL_NAME, ' ', 1) AS FIRST_NAME,
    split_part(a.CANDIDATE_FULL_NAME, ' ', 2) AS LAST_NAME,
    a.CANDIDATE_FULL_NAME as FULL_NAME,
    a.CLIENT_CONTACT as MANAGER_FULL_NAME,      
    a.SITEADDRESS_STATE as SITE_ADDRESS_STATE, 
    a.CHARGES_INCL_GST, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_STARTDATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_STARTDATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_START_DATE,
    a.SITEADDRESS_TITLE as SITE_ADDRESS_TITLE, 
    ifnull(
        try_to_date(
            replace(a.WEEK_ENDING_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.WEEK_ENDING_DATE, 
            'dd/mm/yyyy')
        ) as WEEK_ENDING_DATE_CONVERTED,
    last_day(WEEK_ENDING_DATE_CONVERTED, 'week') as END_OF_WEEK_DATE,
    to_double(nullif(replace(replace(a.CHARGE_RATE, ',', ''), '$', ''), '')) as CHARGE_RATE, 
    to_double(nullif(replace(replace(a.PAY_RATE, ',', ''), '$', ''), '')) as PAY_RATE, 
    a.PRODUCT_NAME, 
    a.GST,
    to_varchar(a.JOB_CATEGORY) as JOB_CATEGORY, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_ENDDATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_ENDDATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_END_DATE,
    a.SERVICE_TYPE_DESC, 
    a.BILLING_ITEM_COST_CENTER, 
    a.BOOKING_JOB_TITLE as POSITION_TITLE, 
    a.INVOICE_NUMBER, 
    a.CHARGES_EXCL_GST, 
    a.CONSULTANT, 
    a.CLIENT, 
    a.CHARGEQUANTITY as CHARGE_QUANTITY,
    
    a._FIVETRAN_SYNCED as VERSION_TIMESTAMP
    
FROM 
    BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_RANSTAD.BEGA_AUGUST_23_SHEET_1 as a 
WHERE 
    WORKER_EXTERNAL_CODE <> 'Total'  -- eliminates the total rows

--
UNION ALL
--

SELECT 
    cast(a.BOOKING_NO as varchar(38)) as WORKER_EXTERNAL_CODE,  
    split_part(a.CANDIDATE_FULL_NAME, ' ', 1) AS FIRST_NAME,
    split_part(a.CANDIDATE_FULL_NAME, ' ', 2) AS LAST_NAME,
    a.CANDIDATE_FULL_NAME as FULL_NAME,
    a.CLIENT_CONTACT as MANAGER_FULL_NAME,      
    a.SITEADDRESS_STATE as SITE_ADDRESS_STATE, 
    a.CHARGES_INCL_GST, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_STARTDATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_STARTDATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_STARTDATE,
    a.SITEADDRESS_TITLE, 
    ifnull(
        try_to_date(
            replace(a.WEEK_ENDING_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.WEEK_ENDING_DATE, 
            'dd/mm/yyyy')
        ) as WEEK_ENDING_DATE_CONVERTED,
    last_day(WEEK_ENDING_DATE_CONVERTED, 'week') as END_OF_WEEK_DATE,
    to_double(nullif(replace(replace(a.CHARGE_RATE, ',', ''), '$', ''), '')) as CHARGE_RATE, 
    to_double(nullif(replace(replace(a.PAY_RATE, ',', ''), '$', ''), '')) as PAY_RATE, 
    a.PRODUCT_NAME,
    a.GST, 
    to_varchar(a.JOB_CATEGORY) as JOB_CATEGORY, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_ENDDATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_ENDDATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_END_DATE,
    a.SERVICE_TYPE_DESC, 
    a.BILLING_ITEM_COST_CENTER, 
    a.BOOKING_JOB_TITLE as POSITION_TITLE, 
    a.INVOICE_NUMBER, 
    a.CHARGES_EXCL_GST, 
    a.CONSULTANT, 
    a.CLIENT, 
    a.CHARGEQUANTITY,

    a._FIVETRAN_SYNCED as VERSION_TIMESTAMP
    
FROM 
    BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_RANSTAD.BEGA_JULY_23_SHEET_1 as a 
WHERE 
    WORKER_EXTERNAL_CODE <> 'Total'

--
UNION ALL
--

SELECT 
    cast(a.PLACEMENT_CODE as varchar(38)) as WORKER_EXTERNAL_CODE,  
    split_part(a.CANDIDATE_FULL_NAME, ' ', 1) AS FIRST_NAME,
    split_part(a.CANDIDATE_FULL_NAME, ' ', 2) AS LAST_NAME,
    a.CANDIDATE_FULL_NAME as FULL_NAME,
    a.CLIENT_CONTACT as MANAGER_FULL_NAME,      
    a.SITE_ADDRESS_STATE,
    a.CHARGES_INCL_GST, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_START_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_START_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_START_DATE,
    a.SITE_ADDRESS_TITLE, 
    ifnull(
        try_to_date(
            replace(a.billing_item_supply_date, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.billing_item_supply_date, 
            'dd/mm/yyyy')
        ) as WEEK_ENDING_DATE_CONVERTED,
    last_day(WEEK_ENDING_DATE_CONVERTED, 'week') as END_OF_WEEK_DATE,         
    to_double(nullif(replace(replace(a.CHARGE_RATE, ',', ''), '$', ''), '')) as CHARGE_RATE, 
    to_double(nullif(replace(replace(a.PAY_RATE, ',', ''), '$', ''), '')) as PAY_RATE, 
    a.PRODUCT_NAME,
    a.GST, 
    to_varchar(a.JOB_CATEGORY) as JOB_CATEGORY, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_END_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_END_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_END_DATE,
    a.SERVICE_TYPE_DESC, 
    a.BILLING_ITEM_COST_CENTER, 
    a.BOOKING_JOB_TITLE as POSITION_TITLE, 
    a.INVOICE_NUMBER, 
    a.CHARGES_EXCL_GST, 
    a.CONSULTANT, 
    a.CLIENT, 
    a.CHARGE_QUANTITY,

    a._FIVETRAN_SYNCED as VERSION_TIMESTAMP
    
FROM 
    BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_RANSTAD._2023_11_BEGA_NOVEMBER_23_SHEET_1 as a 
WHERE 
    WORKER_EXTERNAL_CODE <> 'Total'  

--
UNION ALL
--

SELECT 
    cast(a.PLACEMENT_CODE as varchar(38)) as WORKER_EXTERNAL_CODE,  
    split_part(a.CANDIDATE_FULL_NAME, ' ', 1) AS FIRST_NAME,
    split_part(a.CANDIDATE_FULL_NAME, ' ', 2) AS LAST_NAME,
    a.CANDIDATE_FULL_NAME as FULL_NAME,
    a.CLIENT_CONTACT as MANAGER_FULL_NAME,      
    a.SITE_ADDRESS_STATE,
    a.CHARGES_INCL_GST, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_START_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_START_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_START_DATE,
    a.SITE_ADDRESS_TITLE, 
    ifnull(
        try_to_date(
            replace(a.billing_item_supply_date, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.billing_item_supply_date, 
            'dd/mm/yyyy')
        ) as WEEK_ENDING_DATE,
    last_day(WEEK_ENDING_DATE, 'week') as END_OF_WEEK_DATE,         
    to_double(nullif(replace(replace(a.CHARGE_RATE, ',', ''), '$', ''), '')) as CHARGE_RATE, 
    to_double(nullif(replace(replace(a.PAY_RATE, ',', ''), '$', ''), '')) as PAY_RATE, 
    a.PRODUCT_NAME, 
    a.GST, 
    to_varchar(a.JOB_CATEGORY) as JOB_CATEGORY, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_END_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_END_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_END_DATE,
    a.SERVICE_TYPE_DESC, 
    a.BILLING_ITEM_COST_CENTER, 
    a.BOOKING_JOB_TITLE as POSITION_TITLE, 
    a.INVOICE_NUMBER, 
    a.CHARGES_EXCL_GST, 
    a.CONSULTANT, 
    a.CLIENT, 
    a.CHARGE_QUANTITY,

    a._FIVETRAN_SYNCED as VERSION_TIMESTAMP
    
FROM 
    BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_RANSTAD._2023_12_BEGA_DECEMBER_23_SHEET_1 as a 
WHERE 
    WORKER_EXTERNAL_CODE <> 'Total'  

-- 
UNION ALL
--

SELECT 
    cast(a.PLACEMENT_CODE as varchar(38)) as WORKER_EXTERNAL_CODE,  
    split_part(a.CANDIDATE_FULL_NAME, ' ', 1) AS FIRST_NAME,
    split_part(a.CANDIDATE_FULL_NAME, ' ', 2) AS LAST_NAME,
    a.CANDIDATE_FULL_NAME as FULL_NAME,
    a.CLIENT_CONTACT as MANAGER_FULL_NAME,      
    a.SITE_ADDRESS_STATE,
    a.CHARGES_INCL_GST, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_START_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_START_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_START_DATE,
    a.SITE_ADDRESS_TITLE, 
    ifnull(
        try_to_date(
            replace(a.billing_item_supply_date, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.billing_item_supply_date, 
            'dd/mm/yyyy')
        ) as WEEK_ENDING_DATE,
    last_day(WEEK_ENDING_DATE, 'week') as END_OF_WEEK_DATE,         
    to_double(nullif(replace(replace(a.CHARGE_RATE, ',', ''), '$', ''), '')) as CHARGE_RATE, 
    to_double(nullif(replace(replace(a.PAY_RATE, ',', ''), '$', ''), '')) as PAY_RATE, 
    a.PRODUCT_NAME, 
    a.GST, 
    to_varchar(a.JOB_CATEGORY) as JOB_CATEGORY,
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_END_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_END_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_END_DATE,
    a.SERVICE_TYPE_DESC, 
    a.BILLING_ITEM_COST_CENTER, 
    a.BOOKING_JOB_TITLE as POSITION_TITLE, 
    a.INVOICE_NUMBER, 
    a.CHARGES_EXCL_GST, 
    a.CONSULTANT, 
    a.CLIENT, 
    a.CHARGE_QUANTITY,

    a._FIVETRAN_SYNCED as VERSION_TIMESTAMP

FROM 
    BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_RANSTAD._2024_01_BEGA_JANUARY_2024_SHEET_1 as a 
WHERE 
    WORKER_EXTERNAL_CODE <> 'Total'  

-- 
UNION ALL
--

SELECT 
    cast(a.PLACEMENT_CODE as varchar(38)) as WORKER_EXTERNAL_CODE,  
    split_part(a.CANDIDATE_FULL_NAME, ' ', 1) AS FIRST_NAME,
    split_part(a.CANDIDATE_FULL_NAME, ' ', 2) AS LAST_NAME,
    a.CANDIDATE_FULL_NAME as FULL_NAME,
    a.CLIENT_CONTACT as MANAGER_FULL_NAME,      
    a.SITE_ADDRESS_STATE,
    a.CHARGES_INCL_GST, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_START_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_START_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_START_DATE,
    a.SITE_ADDRESS_TITLE, 
    ifnull(
        try_to_date(
            replace(a.billing_item_supply_date, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.billing_item_supply_date, 
            'dd/mm/yyyy')
        ) as WEEK_ENDING_DATE,
    last_day(WEEK_ENDING_DATE, 'week') as END_OF_WEEK_DATE,         
    to_double(nullif(replace(replace(a.CHARGE_RATE, ',', ''), '$', ''), '')) as CHARGE_RATE, 
    to_double(nullif(replace(replace(a.PAY_RATE, ',', ''), '$', ''), '')) as PAY_RATE, 
    a.PRODUCT_NAME, 
    a.GST, 
    to_varchar(a.JOB_CATEGORY) as JOB_CATEGORY,
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_END_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_END_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_END_DATE,
    a.SERVICE_TYPE_DESC, 
    a.BILLING_ITEM_COST_CENTER, 
    a.BOOKING_JOB_TITLE as POSITION_TITLE, 
    a.INVOICE_NUMBER, 
    a.CHARGES_EXCL_GST, 
    a.CONSULTANT, 
    a.CLIENT, 
    a.CHARGE_QUANTITY,

    a._FIVETRAN_SYNCED as VERSION_TIMESTAMP
    
FROM 
    BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_RANSTAD._2024_02_BEGA_FEBRUARY_2024_FEB_2024 as a 
WHERE 
    WORKER_EXTERNAL_CODE <> 'Total'  

-- 
UNION ALL
--

SELECT 
    cast(a.PLACEMENT_CODE as varchar(38)) as WORKER_EXTERNAL_CODE,  
    split_part(a.CANDIDATE_FULL_NAME, ' ', 1) AS FIRST_NAME,
    split_part(a.CANDIDATE_FULL_NAME, ' ', 2) AS LAST_NAME,
    a.CANDIDATE_FULL_NAME as FULL_NAME,
    a.CLIENT_CONTACT as MANAGER_FULL_NAME,      
    a.SITE_ADDRESS_STATE,
    a.CHARGES_INCL_GST, 
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_START_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_START_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_START_DATE,
    a.SITE_ADDRESS_TITLE, 
    ifnull(
        try_to_date(
            replace(a.billing_item_supply_date, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.billing_item_supply_date, 
            'dd/mm/yyyy')
        ) as WEEK_ENDING_DATE,
    last_day(WEEK_ENDING_DATE, 'week') as END_OF_WEEK_DATE,         
    to_double(nullif(replace(replace(a.CHARGE_RATE, ',', ''), '$', ''), '')) as CHARGE_RATE, 
    to_double(nullif(replace(replace(a.PAY_RATE, ',', ''), '$', ''), '')) as PAY_RATE, 
    a.PRODUCT_NAME, 
    a.GST, 
    to_varchar(a.JOB_CATEGORY) as JOB_CATEGORY,
    ifnull(
        try_to_date(
            replace(a.PLACEMENT_END_DATE, 'T00:00:00Z', ''),
            'yyyy-mm-dd'),
        try_to_date(
            a.PLACEMENT_END_DATE, 
            'dd/mm/yyyy')
        ) as PLACEMENT_END_DATE,
    a.SERVICE_TYPE_DESC, 
    a.BILLING_ITEM_COST_CENTER, 
    a.BOOKING_JOB_TITLE as POSITION_TITLE, 
    a.INVOICE_NUMBER, 
    a.CHARGES_EXCL_GST, 
    a.CONSULTANT, 
    a.CLIENT, 
    a.CHARGE_QUANTITY,

    a._FIVETRAN_SYNCED as VERSION_TIMESTAMP
    
FROM 
    BEGA_HR_LANDING_{{ env }}.{{ env }}_SPO_SNOWFLAKE_LABOUR_RANSTAD._2024_04_BEGA_APRIL_2024_APRIL_2024 as a 
WHERE 
    WORKER_EXTERNAL_CODE <> 'Total'  

;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_COMPENSATION_HISTORY(
	WORKER_ID,
	EMPLOYEE_COMPENSATION_TOTAL_BASE_PAY,
	WORKER_START,
	WORKER_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

-- ###################################################################################################
-- Use/Test Cases
-- ###################################################################################################
-- Rehire                           1563ba98e6b20141c030793fd01108ac    Dan
-- Rehire and Changes Position      1563ba98e6b20102e3e37b2ad011a85d    Alex
-- Termination                      d3676cb5398d01015dd40f9c80cc0000    Jean
-- Changes Pos and Terminated       32ee4e8455bc1000e0053904f8be0000    Jesse
-- Contingent                       6fe5180354cb0172224726366e011b47    Ian
-- ###################################################################################################

select 
    ID as WORKER_ID,
    EMPLOYEE_COMPENSATION_TOTAL_BASE_PAY,
    min(_FIVETRAN_START) as WORKER_START,
    max(
        case 
            when year(_FIVETRAN_END) = 9999 then null 
            else _FIVETRAN_END 
        end
        ) as WORKER_END
from BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_HISTORY
group by all

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_POSITION_HISTORY(
	WORKER_ID,
	POSITION_ID,
	WORKER_CODE,
	CONTRACT_ASSIGNMENT_DETAILS,
	EMAIL_ADDRESS,
	BUSINESS_SITE_SUMMARY_NAME,
	BUSINESS_TITLE,
	PAY_RATE_TYPE,
	TEAM_ID,
	TEAM_FIVETRAN_SYNCED,
	COST_CENTRE_ID,
	COST_CENTRE_FIVETRAN_SYNCED,
	DEPARTMENT_ID,
	DEPARTMENT_FIVETRAN_SYNCED,
	WORKER_POSITION_FIVETRAN_SYNCED,
	WORKER_POSITION_START,
	WORKER_POSITION_END
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

-- ###################################################################################################
-- Use/Test Cases
-- ###################################################################################################
-- Rehire                           1563ba98e6b20141c030793fd01108ac    Dan
-- Rehire and Changes Position      1563ba98e6b20102e3e37b2ad011a85d    Alex
-- Termination                      d3676cb5398d01015dd40f9c80cc0000    Jean
-- Changes Pos and Terminated       32ee4e8455bc1000e0053904f8be0000    Jesse
-- Contingent                       6fe5180354cb0172224726366e011b47    Ian
-- ###################################################################################################

with 

    /* RS 18/07/2024 Added org_history_max and org_history_dedup to allow for overlapping history rows */
    /* RS 06/08/2024 Added change to use _FIVETRAN_END date from WORKER_POSITION_HISTORY to get accurate position end date TEMP REVERSED OUT */
    org_history_max as (
        select
            wpo.WORKER_ID,
            wpo.POSITION_ID,
            par.PARAMETER_TYPE,
            wpo._FIVETRAN_START,
            MAX(wpo._FIVETRAN_END) as _FIVETRAN_END
            -- MAX(wph._FIVETRAN_END) as _FIVETRAN_END
            from
            BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_POSITION_ORGANIZATION_HISTORY as wpo
            -- inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_POSITION_HISTORY as wph on
            --     wph.WORKER_ID = wpo.WORKER_ID
            --     and wph.POSITION_ID = wpo.POSITION_ID
            inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as org on
                org.ID = wpo.ORGANIZATION_ID
            inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
                org.TYPE = par.PARAMETER_VALUE
                and par.PARAMETER_TYPE LIKE 'EMPLOYEE_ORGANIZATION_TYPE_%'
        group by all
        ),
        
    org_history_dedup as (
        select
            wpo.WORKER_ID,
            wpo.POSITION_ID,
            par.PARAMETER_TYPE,
            wpo.ORGANIZATION_ID,
            wpo._FIVETRAN_START,
            MAX(wpo._FIVETRAN_END) as _FIVETRAN_END
        from
            org_history_max as ohm
            inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_POSITION_ORGANIZATION_HISTORY as wpo on
                wpo.WORKER_ID = ohm.WORKER_ID
                and wpo.POSITION_ID = ohm.POSITION_ID
                and wpo._FIVETRAN_START = ohm._FIVETRAN_START
                and wpo._FIVETRAN_END = ohm._FIVETRAN_END
            inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as org on
                org.ID = wpo.ORGANIZATION_ID
            inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
                org.TYPE = par.PARAMETER_VALUE
                and par.PARAMETER_TYPE LIKE 'EMPLOYEE_ORGANIZATION_TYPE_%'
        group by all
        ),        

    org_filtered as (
        select
            wpo.WORKER_ID,
            wpo.POSITION_ID,
            par.PARAMETER_TYPE,
            wpo._FIVETRAN_START,
            MAX(org.ID) as ORGANISATION_ID,
            MAX_BY(org._FIVETRAN_SYNCED, org.ID) as _FIVETRAN_SYNCED
        from
        /* RS 18/07/2024 Replace with org_history_dedup */
        -- BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_POSITION_ORGANIZATION_HISTORY as wpo
        org_history_dedup as wpo
            inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as org on
                org.ID = wpo.ORGANIZATION_ID
            inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
                org.TYPE = par.PARAMETER_VALUE
                and par.PARAMETER_TYPE LIKE 'EMPLOYEE_ORGANIZATION_TYPE_%'
        group by all
    ),
    
    wph as (
        select
            wp.WORKER_ID,                                                           -- group by
            wp.POSITION_ID,                                                         -- group by
            
            max_by(w.HIRE_DATE, w._FIVETRAN_START) as WORKER_HIRE_DATE,
            max_by(w.TERMINATION_DATE, w._FIVETRAN_START) as WORKER_TERMINATION_DATE,
            max_by(w.WORKER_CODE, w._FIVETRAN_START) as WORKER_CODE,
            max_by(w.CONTRACT_ASSIGNMENT_DETAILS, w._FIVETRAN_START) as CONTRACT_ASSIGNMENT_DETAILS,
            max_by(lower(w.USER_ID), w._FIVETRAN_START) as EMAIL_ADDRESS,

            wp._FIVETRAN_END as WORKER_POSITION_FIVETRAN_END,                       -- group by
            max_by(wp.BUSINESS_SITE_SUMMARY_NAME, wp._FIVETRAN_START) as BUSINESS_SITE_SUMMARY_NAME,
            max_by(wp.BUSINESS_TITLE, wp._FIVETRAN_START) as BUSINESS_TITLE,
            max_by(wp.PAY_RATE_TYPE, wp._FIVETRAN_START) as PAY_RATE_TYPE,
            max_by(wp._FIVETRAN_SYNCED, wp._FIVETRAN_START) as WORKER_POSITION_FIVETRAN_SYNCED,

            max_by(team.ORGANISATION_ID, team._FIVETRAN_START) as TEAM_ID,
            max_by(team._FIVETRAN_SYNCED, team._FIVETRAN_START) as TEAM_FIVETRAN_SYNCED,
            max_by(cost_centre.ORGANISATION_ID, cost_centre._FIVETRAN_START) as COST_CENTRE_ID,
            max_by(cost_centre._FIVETRAN_SYNCED, cost_centre._FIVETRAN_START) as COST_CENTRE_FIVETRAN_SYNCED,
            max_by(department.ORGANISATION_ID, department._FIVETRAN_START) as DEPARTMENT_ID,
            max_by(department._FIVETRAN_SYNCED, department._FIVETRAN_START) as DEPARTMENT_FIVETRAN_SYNCED,
        
            wp._FIVETRAN_START as WORKER_POSITION_START,                            -- group by
            case 
                when WORKER_HIRE_DATE < WORKER_TERMINATION_DATE then WORKER_TERMINATION_DATE 
                when year(WORKER_POSITION_FIVETRAN_END) = 9999 then last_day(current_date, 'week') 
                else WORKER_POSITION_FIVETRAN_END 
                end as WORKER_POSITION_END
        from 
            BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_POSITION_HISTORY as wp
            left join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_HISTORY as w on
                w.ID = wp.WORKER_ID
                and w._FIVETRAN_START <= wp._FIVETRAN_END

            left join org_filtered as team on
                team.WORKER_ID = wp.WORKER_ID
                and team.POSITION_ID = wp.POSITION_ID
                and team.PARAMETER_TYPE = 'EMPLOYEE_ORGANIZATION_TYPE_TEAM'
                and team._FIVETRAN_START <= wp._FIVETRAN_END
            left join org_filtered as cost_centre on
                cost_centre.WORKER_ID = wp.WORKER_ID
                and cost_centre.POSITION_ID = wp.POSITION_ID
                and cost_centre.PARAMETER_TYPE = 'EMPLOYEE_ORGANIZATION_TYPE_COST_CENTRE'
                and cost_centre._FIVETRAN_START <= wp._FIVETRAN_END
            left join org_filtered as department on
                department.WORKER_ID = wp.WORKER_ID
                and department.POSITION_ID = wp.POSITION_ID
                and department.PARAMETER_TYPE = 'EMPLOYEE_ORGANIZATION_TYPE_DEPARTMENT'
                and department._FIVETRAN_START <= wp._FIVETRAN_END
        
        group by all
    )

select
    WORKER_ID,
    POSITION_ID,
    WORKER_CODE,
    CONTRACT_ASSIGNMENT_DETAILS,
    EMAIL_ADDRESS,
    BUSINESS_SITE_SUMMARY_NAME,
    BUSINESS_TITLE,
    PAY_RATE_TYPE,
    TEAM_ID,
    TEAM_FIVETRAN_SYNCED,
    COST_CENTRE_ID,
    COST_CENTRE_FIVETRAN_SYNCED,
    DEPARTMENT_ID,
    DEPARTMENT_FIVETRAN_SYNCED,
    WORKER_POSITION_FIVETRAN_SYNCED,
    WORKER_POSITION_START,
    WORKER_POSITION_END
from wph

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE(
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	WORKER_ID,
	WORKER_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	LOCATION_SKEY,
	LOCATION_ID,
	LOCATION_NAME,
	LOCATION_FIVETRAN_SYNCED,
	TEAM_SKEY,
	TEAM_ID,
	TEAM_FIVETRAN_SYNCED,
	COST_CENTRE_SKEY,
	COST_CENTRE_ID,
	COST_CENTRE_FIVETRAN_SYNCED,
	DEPARTMENT_SKEY,
	DEPARTMENT_ID,
	DEPARTMENT_FIVETRAN_SYNCED,
	WORKER_POSITION_START,
	WORKER_POSITION_START_KEY,
	WORKER_POSITION_END,
	WORKER_POSITION_END_KEY,
	CONTRACT_ASSIGNMENT_DETAILS,
	POSITION_SKEY,
	POSITION_ID,
	POSITION_CODE,
	POSITION_DESCRIPTION,
	POSITION_FIVETRAN_SYNCED,
	SUPERVISORY_ORGANIZATION_ID,
	WORKER_FOR_FILLED_POSITION_ID,
	CLOSED,
	PRIMARY_COMPENSATION_BASIS,
	WORKER_TYPE_CODE,
	BUSINESS_TITLE,
	PAY_RATE_TYPE,
	PAY_RATE_TYPE_KEY,
	EMAIL_ADDRESS,
	PAY_PLAN_CODE,
	WORKER_MANAGER_ID,
	WORKER_POSITION_MANAGER_FIVETRAN_SYNCED,
	WORKER_MANAGER_SKEY,
	WORKER_SOURCE_KEY,
	WORKER_SOURCE_NAME,
	LABOUR_PROVIDER_KEY,
	LABOUR_PROVIDER_NAME,
	CONTINUOUS_SERVICE_DATE,
	HIRE_DATE,
	ORIGINAL_HIRE_DATE,
	VERSION_TIMESTAMP,
	IS_CURRENT
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with
    worker_position_hist as (
        select 
            WORKER_ID,
            POSITION_ID,
            max_by(WORKER_CODE, WORKER_POSITION_START) as WORKER_CODE,
            max_by(CONTRACT_ASSIGNMENT_DETAILS, WORKER_POSITION_START) as CONTRACT_ASSIGNMENT_DETAILS,
            max_by(EMAIL_ADDRESS, WORKER_POSITION_START) as EMAIL_ADDRESS,
            max_by(BUSINESS_SITE_SUMMARY_NAME, WORKER_POSITION_START) as BUSINESS_SITE_SUMMARY_NAME,
            max_by(BUSINESS_TITLE, WORKER_POSITION_START) as BUSINESS_TITLE,
            max_by(PAY_RATE_TYPE, WORKER_POSITION_START) as PAY_RATE_TYPE,
            max_by(WORKER_POSITION_FIVETRAN_SYNCED, WORKER_POSITION_START) as WORKER_POSITION_FIVETRAN_SYNCED,
            
            max_by(TEAM_ID, WORKER_POSITION_START) as TEAM_ID,
            max_by(TEAM_FIVETRAN_SYNCED, WORKER_POSITION_START) as TEAM_FIVETRAN_SYNCED,
            max_by(COST_CENTRE_ID, WORKER_POSITION_START) as COST_CENTRE_ID,
            max_by(COST_CENTRE_FIVETRAN_SYNCED, WORKER_POSITION_START) as COST_CENTRE_FIVETRAN_SYNCED,
            max_by(DEPARTMENT_ID, WORKER_POSITION_START) as DEPARTMENT_ID,
            max_by(DEPARTMENT_FIVETRAN_SYNCED, WORKER_POSITION_START) as DEPARTMENT_FIVETRAN_SYNCED,
            
            min(WORKER_POSITION_START) as WORKER_POSITION_START,
            max(WORKER_POSITION_END) as WORKER_POSITION_END
        from BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_POSITION_HISTORY
        group by all
        ),

    -- TODO: How can we manage this? select one of them, or do we need to consider multiple managers?
    manager_deduplicated as (
        select
            POSITION_ID, 
            WORKER_ID, 
            MAX_BY(MANAGER_ID, _FIVETRAN_SYNCED) as MANAGER_ID,
            MAX(_FIVETRAN_SYNCED) as WORKER_POSITION_MANAGER_FIVETRAN_SYNCED
        from BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_POSITION_MANAGER
        group by all
        ),

    -- TODO: How can we manage this? select one of them, or do we need to consider pay plans?
    pos_pay_plan_deduplicated as (
        select
            g.POSITION_ID,
            MAX(g.PAY_PLAN_CODE) as PAY_PLAN_CODE
        from BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.POSITION_PAY_PLAN as g
        group by all
        )

select
    MD5(CONCAT(
        wph.WORKER_ID,
        '|', 
        wph.POSITION_ID
        )) as WORKER_POSITION_SKEY,
    MD5(wph.WORKER_ID) as WORKER_SKEY,
    wph.WORKER_ID,
    wph.WORKER_CODE,
    nm.FIRST_NAME,
    nm.LAST_NAME,
    concat(nm.FIRST_NAME, ' ', nm.LAST_NAME) as FULL_NAME,
    MD5(wph.BUSINESS_SITE_SUMMARY_NAME) as LOCATION_SKEY,
    MD5(wph.BUSINESS_SITE_SUMMARY_NAME) as LOCATION_ID,
    wph.BUSINESS_SITE_SUMMARY_NAME as LOCATION_NAME,
    wph.WORKER_POSITION_FIVETRAN_SYNCED as LOCATION_FIVETRAN_SYNCED,
    MD5(wph.TEAM_ID) as TEAM_SKEY,
    wph.TEAM_ID,
    wph.TEAM_FIVETRAN_SYNCED,
    MD5(wph.COST_CENTRE_ID) as COST_CENTRE_SKEY,
    wph.COST_CENTRE_ID,
    wph.COST_CENTRE_FIVETRAN_SYNCED,
    MD5(wph.DEPARTMENT_ID) as DEPARTMENT_SKEY,
    wph.DEPARTMENT_ID,
    wph.DEPARTMENT_FIVETRAN_SYNCED,
    wph.WORKER_POSITION_START,
	to_char(wph.WORKER_POSITION_START, 'YYYYMMDD') as WORKER_POSITION_START_KEY,
    wph.WORKER_POSITION_END,
	to_char(wph.WORKER_POSITION_END, 'YYYYMMDD') as WORKER_POSITION_END_KEY,
    wph.CONTRACT_ASSIGNMENT_DETAILS,
    MD5(wph.POSITION_ID) as POSITION_SKEY,
    wph.POSITION_ID,
    pos.POSITION_CODE,
    pos.JOB_POSTING_TITLE as POSITION_DESCRIPTION,
    pos._FIVETRAN_SYNCED as POSITION_FIVETRAN_SYNCED,
    pos.SUPERVISORY_ORGANIZATION_ID,
    pos.WORKER_FOR_FILLED_POSITION_ID,  
    pos.CLOSED,              
    pos.PRIMARY_COMPENSATION_BASIS,
    pos.WORKER_TYPE_CODE,
    wph.BUSINESS_TITLE,
	ifnull(
        wph.PAY_RATE_TYPE, 
        par_cont.PARAMETER_VALUE
        ) as PAY_RATE_TYPE,
    MD5(PAY_RATE_TYPE) AS PAY_RATE_TYPE_KEY,
    wph.EMAIL_ADDRESS,
    pos_pay_plan_deduplicated.PAY_PLAN_CODE,
    
    manager_deduplicated.MANAGER_ID as WORKER_MANAGER_ID,
    manager_deduplicated.WORKER_POSITION_MANAGER_FIVETRAN_SYNCED,
    MD5(
        ifnull(
            manager_deduplicated.MANAGER_ID,
            par_key.PARAMETER_VALUE
            )
        ) as WORKER_MANAGER_SKEY,

    MD5(par_int.PARAMETER_VALUE) as WORKER_SOURCE_KEY,
    par_int.PARAMETER_VALUE as WORKER_SOURCE_NAME,
    MD5(par_int.PARAMETER_VALUE) as LABOUR_PROVIDER_KEY,
    par_int.PARAMETER_VALUE as LABOUR_PROVIDER_NAME,

    wo.CONTINUOUS_SERVICE_DATE, 
    wo.HIRE_DATE, 
    wo.ORIGINAL_HIRE_DATE,
    
    wph.WORKER_POSITION_FIVETRAN_SYNCED as VERSION_TIMESTAMP,
    true as IS_CURRENT

from            -- TODO: Check (provided by Sue): 3716 active internals + 200 ish open positions
    worker_position_hist as wph
        
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
        par.PARAMETER_TYPE = 'PERSON_NAME_TYPE_LEGAL'
    inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.PERSON_NAME as nm on
        nm.PERSONAL_INFO_SYSTEM_ID = wph.WORKER_ID 
        and nm.TYPE = par.PARAMETER_VALUE
    inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER as wo on
        wo.ID = wph.WORKER_ID         

    left join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.POSITION as pos
        on pos.id = wph.POSITION_ID

    left join pos_pay_plan_deduplicated
        on pos.id = pos_pay_plan_deduplicated.POSITION_ID

    left join manager_deduplicated
        on  wph.WORKER_ID = manager_deduplicated.WORKER_ID
            and wph.POSITION_ID = manager_deduplicated.POSITION_ID

    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_key on
        par_key.PARAMETER_TYPE = 'UNLINKED_KEY'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_cont on
        par_cont.PARAMETER_TYPE = 'WORKER_PAY_RATE_TYPE_CONTINGENT'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_int on
        par_int.PARAMETER_TYPE = 'INTERNAL_WORKER_PROVIDER_SOURCE'
        
;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_WIDE(
	END_OF_WEEK_DATE,
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	WORKER_ID,
	WORKER_EXTERNAL_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	EMAIL_ADDRESS,
	WORKER_SOURCE_KEY,
	WORKER_SOURCE_NAME,
	LABOUR_PROVIDER_KEY,
	LABOUR_PROVIDER_NAME,
	WORKER_MANAGER_SKEY,
	WORKER_MANAGER_ID,
	MANAGER_FULL_NAME,
	POSITION_TITLE,
	PAY_RATE_TYPE,
	PAY_RATE_TYPE_KEY,
	LOCATION_ID,
	LOCATION_SKEY,
	TEAM_ID,
	TEAM_SKEY,
	DEPARTMENT_ID,
	DEPARTMENT_SKEY,
	COST_CENTRE_ID,
	COST_CENTRE_SKEY,
	HEADCOUNT_ACTUAL,
	HEADCOUNT_HOURS_ACTUAL,
	HEADCOUNT_FTE_ACTUAL,
	IS_CURRENT,
	VERSION_TIMESTAMP
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with
    weekly_external as (
        select
            i.END_OF_WEEK_DATE,
            i.WORKER_EXTERNAL_CODE,
            'External' as WORKER_SOURCE_NAME,
            'Programmed' AS LABOUR_PROVIDER_NAME,
            MAX_BY(i.FIRST_NAME, i.FULL_NAME) AS FIRST_NAME,
            MAX_BY(i.LAST_NAME, i.FULL_NAME) AS LAST_NAME,
            MAX(i.FULL_NAME) AS FULL_NAME,
            MAX_BY(i.MANAGER_FULL_NAME, i.FULL_NAME) as MANAGER_FULL_NAME,
            MAX_BY(i.POSITION_TITLE, i.FULL_NAME) as POSITION_TITLE,
            SUM(
                i.PAY_QUANTITY
                    * par.MULTIPLIER
                ) AS HEADCOUNT_HOURS_ACTUAL,
            SUM(
                i.PAY_QUANTITY
                    * par.MULTIPLIER
                    / par.DIVISOR
                ) AS HEADCOUNT_FTE_ACTUAL,
            MAX(i.VERSION_TIMESTAMP) as VERSION_TIMESTAMP
        from
            BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_INVOICE_PROGRAMMED as i
            inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER_WORKER_EXTERNAL_CALCULATION as par on
                par.LABOUR_PROVIDER = LABOUR_PROVIDER_NAME
                and par.ITEM_TYPE = i.PAY_TYPE
                and par.IS_CONSIDERED
        group by all

        --
        union all
        --
        
        select
            i.END_OF_WEEK_DATE,
            i.WORKER_EXTERNAL_CODE,
            'External' as WORKER_SOURCE_NAME,
            'Randstad' AS LABOUR_PROVIDER_NAME,
            MAX(i.FIRST_NAME) AS FIRST_NAME,
            MAX_BY(i.LAST_NAME, i.FIRST_NAME) AS LAST_NAME,
            MAX_BY(i.FULL_NAME, i.FIRST_NAME) AS FULL_NAME,
            MAX_BY(i.MANAGER_FULL_NAME, i.FIRST_NAME) as MANAGER_FULL_NAME,
            MAX_BY(i.POSITION_TITLE, i.FIRST_NAME) as POSITION_TITLE,
            SUM(
                i.CHARGE_QUANTITY
                    * par.MULTIPLIER
                ) AS HEADCOUNT_HOURS_ACTUAL,
            SUM(
                i.CHARGE_QUANTITY
                    * par.MULTIPLIER
                    / par.DIVISOR
                ) AS HEADCOUNT_FTE_ACTUAL,
            MAX(i.VERSION_TIMESTAMP) as VERSION_TIMESTAMP
        from
            BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_INVOICE_RANDSTAD as i
            inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER_WORKER_EXTERNAL_CALCULATION as par on
                par.LABOUR_PROVIDER = LABOUR_PROVIDER_NAME
                and par.ITEM_TYPE = i.PRODUCT_NAME
                and par.IS_CONSIDERED
        group by all
        ),

    manager_by_name_dedupl as (
        select
            FULL_NAME,

            MAX(WORKER_ID) as WORKER_ID,
            MAX_BY(WORKER_SKEY, WORKER_ID) as WORKER_SKEY,
            MAX_BY(LOCATION_ID, WORKER_ID) as LOCATION_ID,
            MAX_BY(LOCATION_SKEY, WORKER_ID) as LOCATION_SKEY,
            MAX_BY(TEAM_ID, WORKER_ID) as TEAM_ID,
            MAX_BY(TEAM_SKEY, WORKER_ID) as TEAM_SKEY,
            MAX_BY(DEPARTMENT_ID, WORKER_ID) as DEPARTMENT_ID,
            MAX_BY(DEPARTMENT_SKEY, WORKER_ID) as DEPARTMENT_SKEY,
            MAX_BY(COST_CENTRE_ID, WORKER_ID) as COST_CENTRE_ID,
            MAX_BY(COST_CENTRE_SKEY, WORKER_ID) as COST_CENTRE_SKEY
        from
            BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as wpi
        group by all
    )

select
    w.END_OF_WEEK_DATE,
    MD5(CONCAT(
        w.WORKER_SOURCE_NAME, 
        '|', 
        w.WORKER_EXTERNAL_CODE,
        '|',
        w.END_OF_WEEK_DATE      -- position
        )) as WORKER_POSITION_SKEY,
    MD5(CONCAT(w.WORKER_SOURCE_NAME, '|', w.WORKER_EXTERNAL_CODE)) as WORKER_SKEY,
    MD5(CONCAT(w.WORKER_SOURCE_NAME, '|', w.WORKER_EXTERNAL_CODE)) AS WORKER_ID,
    w.WORKER_EXTERNAL_CODE,
    w.FIRST_NAME,
    w.LAST_NAME,
    w.FULL_NAME,
    NULL as EMAIL_ADDRESS,

    MD5(w.WORKER_SOURCE_NAME) as WORKER_SOURCE_KEY,
    w.WORKER_SOURCE_NAME,
    MD5(w.LABOUR_PROVIDER_NAME) as LABOUR_PROVIDER_KEY,
    w.LABOUR_PROVIDER_NAME,
    
    COALESCE(man.WORKER_SKEY, MD5(k.PARAMETER_VALUE)) as WORKER_MANAGER_SKEY,
    man.WORKER_ID as WORKER_MANAGER_ID,
    w.MANAGER_FULL_NAME,

    w.POSITION_TITLE,

    par_cont.PARAMETER_VALUE as PAY_RATE_TYPE,
    MD5(PAY_RATE_TYPE) AS PAY_RATE_TYPE_KEY,

    man.LOCATION_ID,
    COALESCE(man.LOCATION_SKEY, MD5(k.PARAMETER_VALUE)) as LOCATION_SKEY,
    man.TEAM_ID,
    COALESCE(man.TEAM_SKEY, MD5(k.PARAMETER_VALUE)) as TEAM_SKEY,
    man.DEPARTMENT_ID,
    COALESCE(man.DEPARTMENT_SKEY, MD5(k.PARAMETER_VALUE)) as DEPARTMENT_SKEY,
    man.COST_CENTRE_ID,
    COALESCE(man.COST_CENTRE_SKEY, MD5(k.PARAMETER_VALUE)) as COST_CENTRE_SKEY,
    
    1 as HEADCOUNT_ACTUAL,
    w.HEADCOUNT_HOURS_ACTUAL,
    w.HEADCOUNT_FTE_ACTUAL,
    
    TRUE AS IS_CURRENT,
    w.VERSION_TIMESTAMP
from
    weekly_external as w
    
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k on
        k.PARAMETER_TYPE = 'UNLINKED_KEY'
        
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_cont on
        par_cont.PARAMETER_TYPE = 'WORKER_PAY_RATE_TYPE_CONTINGENT'
        
    left join manager_by_name_dedupl as man
        on w.manager_full_name = man.full_name    

;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_ACTUALS(
	PAYROLL_TYPE,
	PAY_FREQUENCY_KEY,
	WORKER_CODE,
	POSITION_CODE,
	POSITION_ID,
	POSITION_SKEY,
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	WORKER_ID,
	LOCATION_ID,
	LOCATION_SKEY,
	TEAM_ID,
	TEAM_SKEY,
	DEPARTMENT_SKEY,
	DEPARTMENT_ID,
	COST_CENTRE_SKEY,
	COST_CENTRE_ID,
	PAY_RATE_TYPE,
	PAY_RATE_TYPE_KEY,
	WORKER_POSITION_END,
	END_OF_WEEK_DATE,
	WEEK_END_DATE_KEY,
	SALARY_ACTUALS,
	ALLOWANCE_ACTUALS,
	ON_COSTS_ACTUALS,
	NORMAL_HOURS_ACTUALS,
	OVERTIME_HOURS_ACTUALS,
	OVERTIME_COSTS_ACTUALS,
	PAYROLL_TAX_ACTUALS,
	PAYROLL_TAX_PERCENT,
	ON_COSTS_AL_ACTUALS,
	ON_COSTS_LSL_ACTUALS,
	ON_COSTS_SUPER_ACTUALS
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with employee_trans as (
    select
        *
    from
        BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION_WEEKLY
    UNION ALL
    select
        *
    from
        BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION_FORTNIGHTLY
    UNION ALL
    select
        *
    from
        BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION_MONTHLY
),

payroll_actuals as (
    select
        --A few employees had transactions in multiple payrolls in the same week
        max(TR.PAYROLL_TYPE) as PAYROLL_TYPE,
        max(TR.PAY_FREQUENCY) as PAY_FREQUENCY,
        TR.WORKER_CODE as WORKER_CODE,
        -- TR.TRANSACTION_TYPE,        
        -- case when TR.PAY_FREQUENCY in ('Weekly', 'Fortnightly') then
        --           last_day(TR.PAY_END_DATE_FOR_PREVIOUS_EARNINGS, 'week') 
        --      else
        --           last_day(TR.PAY_END_DATE_FOR_PREVIOUS_EARNINGS, 'month') 
        --      end as END_OF_WEEK_DATE,
        last_day(TR.PAY_END_DATE_FOR_PREVIOUS_EARNINGS, 'week') as END_OF_WEEK_DATE,
        --sum fhours where iudtranstype is 55, 12, 11, 1, 0 OR paycomponents = Normal Pay, Government Paid Parental Leave, Govt Paid Parental, Backpay Paid Parental Leave
        sum(
            case
                when TPC.SALARY = true then TR.AMOUNT
                else 0
            end
        ) as SALARY_ACTUALS,
        --sum famount where iudtranstype is 7,4 or 3 EXCEPT paycomponents = GGOVPPARLV, GPPL, GBPAYPPLV and Overtime Allowances
        sum(
            case
                when TPC.ALLOWANCES = true then TR.AMOUNT
                else 0
            end
        ) as ALLOWANCE_ACTUALS,
        --sum fhours where iudtranstype is 55, 12, 11, 1, 0 OR paycomponents = Normal Pay, Government Paid Parental Leave, Govt Paid Parental, Backpay Paid Parental Leave
        sum(
            case
                when TPC.NORMAL_HOURS = true then TR.HOURS
                else 0
            end
        ) as NORMAL_HOURS_ACTUALS,
        --sum fhours where paycomponents = overtime reference table
        sum(
            case
                when TPC.OVERTIME = true and TPC.KOROIT_ONLY = false then TR.HOURS
                --For Koroit Only check that location = 350 or KOR
                when TPC.OVERTIME = true and TPC.KOROIT_ONLY = true and TR.LOCATION = '350' then TR.HOURS
                when TPC.OVERTIME = true and TPC.KOROIT_ONLY = true and TR.LOCATION = 'KOR' then TR.HOURS
                else 0
            end
        ) as OVERTIME_HOURS_ACTUALS,
        --sum fhours where paycomponents = overtime reference table
        sum(
            case
                when TPC.OVERTIME = true and TPC.KOROIT_ONLY = false then TR.AMOUNT
                --For Koroit Only check that location = 350 or KOR
                when TPC.OVERTIME = true and TPC.KOROIT_ONLY = true and TR.LOCATION = '350' then TR.AMOUNT
                when TPC.OVERTIME = true and TPC.KOROIT_ONLY = true and TR.LOCATION = 'KOR' then TR.AMOUNT
                else 0
            end
        ) as OVERTIME_COSTS_ACTUALS,
        --[Payroll Tax %] x SUM OF Components as per Taxable reference table
        sum(
            case
                when TPC.PAYROLL_TAX = true then to_number(
                    TR.AMOUNT * ifnull(
                        ifnull(PTL.PAYROLL_TAX_PERCENT, PTS.PAYROLL_TAX_PERCENT),
                        0
                    ) / 100,
                    20,
                    2
                )
                else 0
            end
        ) as PAYROLL_TAX_ACTUALS,
        --using BEGA_HR_DATA_{{ env }}.CONTROL.REF_PAYROLL_TAX prioritise Location match or else match Location.State with State
        max(
            ifnull(PTL.PAYROLL_TAX_PERCENT, PTS.PAYROLL_TAX_PERCENT)
        ) as PAYROLL_TAX_PERCENT,
        --TODO - Not confirmed
        -- sum(
        --     case
        --         when TR.TRANSACTION_TYPE in ('Annual Leave') then TR.AMOUNT
        --         else 0
        --     end
        -- ) as ON_COSTS_AL_ACTUALS,
        0 as ON_COSTS_AL_ACTUALS,
        --TODO - Not confirmed
        -- sum(
        --     case
        --         when TR.TRANSACTION_TYPE in ('Long Service Leave') then TR.AMOUNT
        --         else 0
        --     end
        -- ) as ON_COSTS_LSL_ACTUALS,
        0 as ON_COSTS_LSL_ACTUALS,
        --sum famount where iudtranstype is 15
        sum(
            case
                when TPC.SUPER = true then TR.AMOUNT
                else 0
            end
        ) as ON_COSTS_SUPER_ACTUALS,
        -- SUM of [Payroll Tax Actuals] + [On Costs AL Actuals] + [On Costs LSL Actuals] + [On costs super Actuals]
        PAYROLL_TAX_ACTUALS + ON_COSTS_AL_ACTUALS + ON_COSTS_LSL_ACTUALS + ON_COSTS_SUPER_ACTUALS as ON_COSTS_ACTUALS
    from
        employee_trans TR
        left join BEGA_HR_DATA_{{ env }}.CONTROL.PAYROLL_TRANSACTION_PARAMETERS TPC on TR.TRANSACTION_TYPE = TPC.TRANSACTION_TYPE_DESC
        and TR.PAY_COMPONENT_ADD_DED_CODE = TPC.PAY_COMPONENT and ifnull(TR.LEAVE_REASON_CODE,'') = ifnull(TPC.LEAVE_REASON_CODE,'')
        left join BEGA_HR_DATA_{{ env }}.CONTROL.REF_PAYROLL_TAX PTS on case
            when TR.LOCATION not in ('PCA', '500') then TR.PAYROLL_TAX_CODE
            else null
        end = PTS.LOCATION_STATE
        left join BEGA_HR_DATA_{{ env }}.CONTROL.REF_PAYROLL_TAX PTL on case
            when TR.LOCATION = 'PCA' then 'Kingaroy'
            else case
                when TR.LOCATION = '500' then 'Tatura'
                else null
            end
        end = PTL.LOCATION_NAME
    group by
        all
)
SELECT
    TR.PAYROLL_TYPE,
    MD5(TR.PAY_FREQUENCY) as pay_frequency_key,
    TR.WORKER_CODE,
    WIR.POSITION_CODE,
    WIR.POSITION_ID,
    WIR.POSITION_SKEY,
    WIR.WORKER_POSITION_SKEY,
    WIR.WORKER_SKEY,
    WIR.WORKER_ID,
    WIR.LOCATION_ID,
    WIR.LOCATION_SKEY,
    WIR.TEAM_ID,
    WIR.TEAM_SKEY,
    WIR.DEPARTMENT_SKEY,
    WIR.DEPARTMENT_ID,
    WIR.COST_CENTRE_SKEY as COST_CENTRE_SKEY,
    WIR.COST_CENTRE_ID as COST_CENTRE_ID,
    WIR.PAY_RATE_TYPE,
    WIR.PAY_RATE_TYPE_KEY,  
    WIR.WORKER_POSITION_END,
    -- TR.TRANSACTION_TYPE,    
    TR.END_OF_WEEK_DATE,
    to_char(END_OF_WEEK_DATE, 'YYYYMMDD') as WEEK_END_DATE_KEY,    
    TR.SALARY_ACTUALS,
    TR.ALLOWANCE_ACTUALS,
    TR.ON_COSTS_ACTUALS,
    TR.NORMAL_HOURS_ACTUALS,
    TR.OVERTIME_HOURS_ACTUALS,
    TR.OVERTIME_COSTS_ACTUALS,
    TR.PAYROLL_TAX_ACTUALS,
    TR.PAYROLL_TAX_PERCENT,
    TR.ON_COSTS_AL_ACTUALS,
    TR.ON_COSTS_LSL_ACTUALS,
    TR.ON_COSTS_SUPER_ACTUALS
FROM
    payroll_actuals TR
    inner join BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE WIR on TR.WORKER_CODE = WIR.WORKER_CODE 
        and last_day(WIR.WORKER_POSITION_START, 'week') <= TR.END_OF_WEEK_DATE 
        and last_day(WIR.WORKER_POSITION_END, 'week') >= TR.END_OF_WEEK_DATE 
    
;

create or replace schema BEGA_HR_DATA_{{ env }}.TRANSFORMED;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.COST_CENTRE(
	COST_CENTRE_SKEY,
	COST_CENTRE_ID,
	COST_CENTRE_NAME,
	COST_CENTRE_SOURCE,
	IS_CURRENT_SKEY,
	VERSION_TIMESTAMP
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with cc as (
    select
        MD5(org.ID) as COST_CENTRE_SKEY,
        org.ID as COST_CENTRE_ID,
        -- case when substr(org.NAME,15,7) between '0000000' and '9999999' then 
        --     case when substr(org.NAME,15,2) = '00' then substr(org.NAME,17,5) 
        --     else 
        --         case when substr(org.NAME,15,1) = '0' then substr(org.NAME,16,6) 
        --         else substr(org.NAME,15,7) 
        --         end 
        --     end 
        -- else case when substr(org.name,1,5) between '00000' and '99999' then substr(org.NAME,1,5)
        --     else org.NAME
        --     end
        -- end as COST_CENTRE,
        -- case when substr(org.NAME,1,5) between '00000' and '99999' then substr(org.NAME,7,50) 
        -- else org.NAME 
        -- end as COST_CENTRE_NAME,
        /* RS 22/11/2024 link to cost centre from Micropay to standardise descriptions, etc. */
        --org.NAME as COST_CENTRE_NAME,
        ifnull(cc.COST_CENTRE_NAME,org.NAME) as COST_CENTRE_NAME,
        'Workday' as COST_CENTRE_SOURCE,
        MAX(org._FIVETRAN_SYNCED) as VERSION_TIMESTAMP,
        true as IS_CURRENT_SKEY
    from
        BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as org
        inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
            org.type = par.PARAMETER_VALUE
            and par.PARAMETER_TYPE LIKE 'EMPLOYEE_ORGANIZATION_TYPE_COST_CENTRE'
        /* RS 22/11/2024 link to cost centre from Micropay to standardise descriptions, etc. */
        left outer join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_COST_CENTRE as cc on
            cc.COST_CENTRE_CODE = ltrim(case 
        when substr(org.NAME,14,7) between '0000000' and '9999999' and substr(org.NAME,15,1) between '0' and '9' then 
            case when substr(org.NAME,14,2) = '00' then substr(org.NAME,16,5) 
            else 
                case when substr(org.NAME,14,1) = '0' then substr(org.NAME,15,6) 
                else substr(org.NAME,14,7) 
                end 
            end 
        when substr(org.NAME,15,7) between '0000000' and '9999999' and substr(org.NAME,16,1) between '0' and '9' and substr(org.NAME,21,1) between '0' and '9' then 
            case when substr(org.NAME,15,2) = '00' then substr(org.NAME,17,5) 
            else 
                case when substr(org.NAME,15,1) = '0' then substr(org.NAME,16,6) 
                else substr(org.NAME,15,7) 
                end 
            end 
        when substr(org.NAME,15,5) between '00000' and '99999' and substr(org.NAME,16,1) between '0' and '9' then substr(org.NAME,15,5) 
        when substr(org.NAME,1,5) between '00000' and '99999' and substr(org.NAME,2,1) between '0' and '9' and substr(org.NAME,6,1) = ' ' then substr(org.NAME,1,5)
        when substr(org.NAME,1,7) between '0000000' and '9999999' and substr(org.NAME,2,1) between '0' and '9' and substr(org.NAME,8,1) = ' ' then substr(org.NAME,1,7)
        else ''
        end)
    group by all
    
    --
    -- Cost Centres from Payroll
    --
    union all
    --
    
    select 
        MD5(pay.COST_CENTRE_ID) as COST_CENTRE_SKEY,
        pay.COST_CENTRE_ID as COST_CENTRE_ID,
        pay.COST_CENTRE_NAME as COST_CENTRE_NAME,
        'Micropay' as COST_CENTRE_SOURCE,
        pay.VERSION_TIMESTAMP,
        true as IS_CURRENT_SKEY
    from
        BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_COST_CENTRE as pay
    -- where
    --     -- Check that cost centres are not already in Workday to avoid duplication
    --     not exists(
    --         select 1
    --         from
    --             BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as org
    --             inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
    --                 org.type = par.PARAMETER_VALUE
    --                 and par.PARAMETER_TYPE LIKE 'EMPLOYEE_ORGANIZATION_TYPE_COST_CENTRE'
    --             where org.NAME = pay.COST_CENTRE_NAME
    --             -- where case when substr(org.NAME,15,7) between '0000000' and '9999999' then case when substr(org.NAME,15,2) = '00' then substr(org.NAME,17,5) else case when substr(org.NAME,15,1) = '0' then substr(org.NAME,16,6) else substr(org.NAME,15,7) end end else case when substr(org.name,1,5) between '00000' and '99999' then substr(org.NAME,1,5) else org.NAME end end = pay.COST_CENTRE_CODE
    --        )   
    
    --
    union all
    --
    
    select
        MD5(k.PARAMETER_VALUE) as COST_CENTRE_SKEY,
        null as COST_CENTRE_ID,
        -- n.PARAMETER_VALUE as COST_CENTRE,
        n.PARAMETER_VALUE as COST_CENTRE_NAME,
        n.PARAMETER_VALUE as COST_CENTRE_SOURCE,
        TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
        true as IS_CURRENT_SKEY
    from
        BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
        CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
        CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
    where
        k.PARAMETER_TYPE = 'UNLINKED_KEY'
        and n.PARAMETER_TYPE = 'UNLINKED_NAME'
        and d.PARAMETER_TYPE = 'NULL_DATE'
    )

select
    * exclude VERSION_TIMESTAMP,
    -- Deduplicate same CC across different sources (Micropay and Workday)
    MAX(VERSION_TIMESTAMP) as VERSION_TIMESTAMP
from cc
group by all;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.DEPARTMENT_ACTIVE_ACCESS(
	DEPARTMENT_SKEY,
	DEPARTMENT_ID,
	DEPARTMENT_CODE,
	DEPARTMENT_NAME,
	SUPERIOR_DEPARTMENT_ID,
	DEPARTMENT_MANAGER_WORKER_SKEY,
	DEPARTMENT_MANAGER_WORKER_ID,
	DEPARTMENT_MANAGER_EMAIL_ADDRESS,
	DEPARTMENT_PATH,
	DEPARTMENT_PATH_ID
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

WITH RECURSIVE
    department as (
        select
            ID as DEPARTMENT_ID,
            ORGANIZATION_CODE as DEPARTMENT_CODE    ,
            NAME as DEPARTMENT_name,
            SUPERIOR_ORGANIZATION_ID as SUPERIOR_DEPARTMENT_ID,
            MANAGER_ID as DEPARTMENT_MANAGER_WORKER_ID,
            _FIVETRAN_SYNCED as FIVETRAN_SYNCED,
        from
            BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as o
            inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as p on
                p.PARAMETER_TYPE = 'EMPLOYEE_ORGANIZATION_TYPE_DEPARTMENT'
                and o.TYPE = p.PARAMETER_VALUE
        where
            o.INACTIVE = false
    ),
    
    department_hierarchy AS (
        select
            d.DEPARTMENT_ID,
            d.DEPARTMENT_CODE,
            d.DEPARTMENT_NAME,
            d.SUPERIOR_DEPARTMENT_ID,
            d.DEPARTMENT_MANAGER_WORKER_ID,
            d.FIVETRAN_SYNCED,
            'Itself' AS DEPARTMENT_PATH,
            d.DEPARTMENT_ID AS DEPARTMENT_PATH_ID
        from
            department as d
        
        UNION ALL 
        
        SELECT
            d.DEPARTMENT_ID,
            d.DEPARTMENT_CODE,
            d.DEPARTMENT_NAME,
            sup.SUPERIOR_DEPARTMENT_ID,
            sup.DEPARTMENT_MANAGER_WORKER_ID,
            sup.FIVETRAN_SYNCED,
            CONCAT(d.DEPARTMENT_PATH, ' <- ', sup.DEPARTMENT_NAME),
            CONCAT(d.DEPARTMENT_PATH_ID, ', ', sup.DEPARTMENT_ID)
        FROM
            department_hierarchy as d
            inner join department as sup on
                d.SUPERIOR_DEPARTMENT_ID = sup.DEPARTMENT_ID 
    )

SELECT
    MD5(h.DEPARTMENT_ID) as DEPARTMENT_SKEY,
    h.DEPARTMENT_ID,
    h.DEPARTMENT_CODE,
    h.DEPARTMENT_NAME,
    h.SUPERIOR_DEPARTMENT_ID,
    MD5(h.DEPARTMENT_MANAGER_WORKER_ID) as DEPARTMENT_MANAGER_WORKER_SKEY,
    h.DEPARTMENT_MANAGER_WORKER_ID,
    man.USER_ID as DEPARTMENT_MANAGER_EMAIL_ADDRESS,
    h.DEPARTMENT_PATH,
    h.DEPARTMENT_PATH_ID
FROM
    department_hierarchy as h
    left join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER as man on
        h.DEPARTMENT_MANAGER_WORKER_ID = man.ID
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.DEPARTMENT_HIERARCHY(
	DEPARTMENT_SKEY,
	DEPARTMENT_ID,
	DEPARTMENT_CODE,
	DEPARTMENT_NAME,
	SUPERIOR_DEPARTMENT_ID,
	DEPARTMENT_MANAGER_WORKER_ID,
	DEPARTMENT_MANAGER_WORKER_SKEY,
	MANAGER_EMAIL_ADDRESS,
	INACTIVE,
	DEPARTMENT_PATH,
	DEPARTMENT_PATH_ID
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

WITH RECURSIVE
    department as (
        select
            o.ID as DEPARTMENT_ID,
            o.ORGANIZATION_CODE as DEPARTMENT_CODE    ,
            o.NAME as DEPARTMENT_name,
            o.SUPERIOR_ORGANIZATION_ID as SUPERIOR_DEPARTMENT_ID,
            o.MANAGER_ID as DEPARTMENT_MANAGER_WORKER_ID,
            o.INACTIVE,
            o._FIVETRAN_SYNCED as FIVETRAN_SYNCED,
        from
            BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as o
            inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as p on
                p.PARAMETER_TYPE = 'EMPLOYEE_ORGANIZATION_TYPE_DEPARTMENT'
                and o.TYPE = p.PARAMETER_VALUE
        -- where
        --     o.INACTIVE = false
    ),
    
    department_hierarchy AS (
        select
            d.DEPARTMENT_ID,
            d.DEPARTMENT_CODE,
            d.DEPARTMENT_NAME,
            d.SUPERIOR_DEPARTMENT_ID,
            d.DEPARTMENT_MANAGER_WORKER_ID,
            d.INACTIVE,
            d.FIVETRAN_SYNCED,
            'Itself' AS DEPARTMENT_PATH,
            d.DEPARTMENT_ID AS DEPARTMENT_PATH_ID
        from
            department as d
        where
            d.SUPERIOR_DEPARTMENT_ID is NULL
        
        UNION ALL 
        
        SELECT
            d.DEPARTMENT_ID,
            d.DEPARTMENT_CODE,
            d.DEPARTMENT_NAME,
            d.SUPERIOR_DEPARTMENT_ID,
            d.DEPARTMENT_MANAGER_WORKER_ID,
            d.INACTIVE,
            d.FIVETRAN_SYNCED,
            CONCAT(department_hierarchy.DEPARTMENT_PATH, ' -> ', d.DEPARTMENT_NAME),
            CONCAT(department_hierarchy.DEPARTMENT_PATH_ID, '|', d.DEPARTMENT_ID)
        FROM
            department as d
            inner join department_hierarchy on
                d.SUPERIOR_DEPARTMENT_ID = department_hierarchy.DEPARTMENT_ID 
    )

SELECT
    MD5(h.DEPARTMENT_ID) as DEPARTMENT_SKEY,
    h.DEPARTMENT_ID,
    h.DEPARTMENT_CODE,
    h.DEPARTMENT_NAME,
    h.SUPERIOR_DEPARTMENT_ID,
    h.DEPARTMENT_MANAGER_WORKER_ID,
    MD5(h.DEPARTMENT_MANAGER_WORKER_ID) as DEPARTMENT_MANAGER_WORKER_SKEY,
    lower(man.USER_ID) as MANAGER_EMAIL_ADDRESS,
    h.INACTIVE,
    h.DEPARTMENT_PATH,
    h.DEPARTMENT_PATH_ID
FROM
    department_hierarchy as h
    left join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER as man on
        h.DEPARTMENT_MANAGER_WORKER_ID = man.ID
;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.DEPARTMENT(
	DEPARTMENT_SKEY,
	DEPARTMENT_ID,
	DEPARTMENT_NAME,
	DEPARTMENT_PATH,
	DEPARTMENT_PATH_ID,
	SUPERIOR_DEPARTMENT_ID,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select distinct
    MD5(org.ID) as DEPARTMENT_SKEY,
    org.id as DEPARTMENT_ID,
    org.name as DEPARTMENT_NAME,
    
    dh.DEPARTMENT_PATH,
    dh.DEPARTMENT_PATH_ID,
    dh.SUPERIOR_DEPARTMENT_ID,
    
    MAX(org._fivetran_synced) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as org
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
        org.type = par.PARAMETER_VALUE
        and par.PARAMETER_TYPE LIKE 'EMPLOYEE_ORGANIZATION_TYPE_DEPARTMENT'
    left join BEGA_HR_DATA_{{ env }}.TRANSFORMED.DEPARTMENT_HIERARCHY as dh on
        org.ID = dh.DEPARTMENT_ID
group by all

--
union all
--

select
    MD5(k.PARAMETER_VALUE) as DEPARTMENT_SKEY,
    null as DEPARTMENT_ID,
    n.PARAMETER_VALUE as DEPARTMENT_NAME,

    null as DEPARTMENT_PATH,
    null as DEPARTMENT_PATH_ID,
    null as SUPERIOR_DEPARTMENT_ID,

    TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
where
    k.PARAMETER_TYPE = 'UNLINKED_KEY'
    and n.PARAMETER_TYPE = 'UNLINKED_NAME_DEPARTMENT'
    and d.PARAMETER_TYPE = 'NULL_DATE'

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.EMPLOYMENT_TYPE(
	EMPLOYMENT_TYPE_SKEY,
	EMPLOYMENT_TYPE_ID,
	EMPLOYMENT_TYPE,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

    --
    -- Pay Points from Payroll
    --    
    select 
        MD5(pay.EMPLOYMENT_TYPE_ID) as EMPLOYMENT_TYPE_SKEY,
        pay.EMPLOYMENT_TYPE_ID as EMPLOYMENT_TYPE_ID,
        pay.EMPLOYMENT_TYPE as EMPLOYMENT_TYPE,
        pay.VERSION_TIMESTAMP,
        true as IS_CURRENT_SKEY
    from
        BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_EMPLOYMENT_TYPE as pay
     
    --
    union all
    --
    
    select
        MD5(k.PARAMETER_VALUE) as EMPLOYMENT_TYPE_SKEY,
        null as EMPLOYMENT_TYPE_ID,
        n.PARAMETER_VALUE as EMPLOYMENT_TYPE,
        TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
        true as IS_CURRENT_SKEY
    from
        BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
        CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
        CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
    where
        k.PARAMETER_TYPE = 'UNLINKED_KEY'
        and n.PARAMETER_TYPE = 'UNLINKED_NAME'
        and d.PARAMETER_TYPE = 'NULL_DATE'

;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.LABOUR_PROVIDER(
	LABOUR_PROVIDER_KEY,
	LABOUR_PROVIDER_NAME
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select distinct
    w.LABOUR_PROVIDER_KEY,
    w.LABOUR_PROVIDER_NAME
from 
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as w
--
union all
--
select distinct
    w.LABOUR_PROVIDER_KEY,
    w.LABOUR_PROVIDER_NAME
from 
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_WIDE as w
--
union all
--
select distinct
    md5(par_int.PARAMETER_VALUE),
    par_int.PARAMETER_VALUE
from 
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_int
where
    par_int.PARAMETER_TYPE = 'OPEN_POSITION_WORKER_PROVIDER_SOURCE'

;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.LEAVE_TYPE(
	LEAVE_TYPE_KEY,
	LEAVE_TYPE_ID,
	LEAVE_TYPE_NAME,
	DISPLAY_ORDER,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select distinct
    md5(ifnull(to_varchar(a.LEAVE_TYPE_ID), k.PARAMETER_VALUE)) as LEAVE_TYPE_KEY,
    ifnull(to_varchar(a.LEAVE_TYPE_ID), k.PARAMETER_VALUE) as LEAVE_TYPE_ID,
    ifnull(a.LEAVE_TYPE_NAME, n.PARAMETER_VALUE) as LEAVE_TYPE_NAME,
    -- 
    -- cast(true as boolean) as DISPLAY_ORDER,  -- to do when UD Leave type issue was addressed
   CASE a.LEAVE_TYPE_NAME 
         WHEN 'Annual'       then 1
         WHEN 'Long Service' then 2
         WHEN 'Sick'         then 3
         WHEN 'User Defined' then 4
         ELSE a.LEAVE_TYPE_ID
         END AS DISPLAY_ORDER,
    -- 
    MAX(ifnull(a._FIVETRAN_SYNCED, TO_TIMESTAMP(d.PARAMETER_VALUE))) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
    
from
    BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_CALCULATION_HISTORY as a
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k on
        k.PARAMETER_TYPE = 'UNLINKED_ALTERNATE_KEY'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n on
        n.PARAMETER_TYPE = 'UNLINKED_NAME'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d on
        d.PARAMETER_TYPE = 'NULL_DATE'
        
group by all
    
;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.LOCATION(
	LOCATION_SKEY,
	LOCATION_ID,
	LOCATION_NAME,
	LOCATION_STATE,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select distinct
    wew.LOCATION_SKEY,
    wew.LOCATION_ID,
    wew.LOCATION_NAME,
    case
        when charindex('(', wew.LOCATION_NAME) < charindex(')', wew.LOCATION_NAME)
            then substr(
                wew.LOCATION_NAME, 
                charindex('(', wew.LOCATION_NAME) + 1,
                charindex(')', wew.LOCATION_NAME) - charindex('(', wew.LOCATION_NAME) - 1
                )
        else null
        end as LOCATION_STATE,
    
    MAX(wew.LOCATION_FIVETRAN_SYNCED) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as wew
group by all

--
union all
--

select
    MD5(k.PARAMETER_VALUE) as LOCATION_SKEY,
    null as LOCATION_ID,
    n.PARAMETER_VALUE as LOCATION_NAME,
    n.PARAMETER_VALUE as LOCATION_STATE,
    
    TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
where
    k.PARAMETER_TYPE = 'UNLINKED_KEY'
    and n.PARAMETER_TYPE = 'UNLINKED_NAME'
    and d.PARAMETER_TYPE = 'NULL_DATE'
    
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.PAY_FREQUENCY(
	PAY_FREQUENCY_KEY,
	PAY_FREQUENCY_NAME,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as 


select
	md5(p.PARAMETER_VALUE) as PAY_FREQUENCY_KEY,
    p.PARAMETER_VALUE as PAY_FREQUENCY_NAME,
    
    TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as p
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
where
    p.PARAMETER_TYPE like 'PAY_FREQUENCY_%'
    and d.PARAMETER_TYPE = 'NULL_DATE'

--
union all
--

select
    MD5(k.PARAMETER_VALUE) as PAY_FREQUENCY_KEY,
    n.PARAMETER_VALUE as PAY_FREQUENCY_NAME,
    
    TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
where
    k.PARAMETER_TYPE = 'UNLINKED_KEY'
    and n.PARAMETER_TYPE = 'UNLINKED_NAME'
    and d.PARAMETER_TYPE = 'NULL_DATE'
    
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.PAY_LEVEL(
	PAY_LEVEL_SKEY,
	PAY_LEVEL_ID,
	PAY_LEVEL_CODE,
	PAY_LEVEL_DESCRIPTION,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

    --
    -- Pay Points from Payroll
    --    
    select 
        MD5(pay.PAY_LEVEL_ID) as PAY_LEVEL_SKEY,
        pay.PAY_LEVEL_ID as PAY_LEVEL_ID,
        pay.PAY_LEVEL_CODE as PAY_LEVEL_CODE,
        pay.PAY_LEVEL_DESCRIPTION as PAY_LEVEL_DESCRIPTION,
        pay.VERSION_TIMESTAMP,
        true as IS_CURRENT_SKEY
    from
        BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_PAY_LEVEL as pay
     
    --
    union all
    --
    
    select
        MD5(k.PARAMETER_VALUE) as PAY_LEVEL_SKEY,
        null as PAY_LEVEL_ID,
        n.PARAMETER_VALUE as PAY_LEVEL_CODE,
        n.PARAMETER_VALUE as PAY_LEVEL_DESCRIPTION,
        TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
        true as IS_CURRENT_SKEY
    from
        BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
        CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
        CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
    where
        k.PARAMETER_TYPE = 'UNLINKED_KEY'
        and n.PARAMETER_TYPE = 'UNLINKED_NAME'
        and d.PARAMETER_TYPE = 'NULL_DATE'

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.PAY_POINT(
	PAY_POINT_SKEY,
	PAY_POINT_ID,
	PAY_POINT,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

    --
    -- Pay Points from Payroll
    --    
    select 
        MD5(pay.PAY_POINT_ID) as PAY_POINT_SKEY,
        pay.PAY_POINT_ID as PAY_POINT_ID,
        pay.PAY_POINT as PAY_POINT,
        pay.VERSION_TIMESTAMP,
        true as IS_CURRENT_SKEY
    from
        BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_PAY_POINT as pay
     
    --
    union all
    --
    
    select
        MD5(k.PARAMETER_VALUE) as PAY_POINT_SKEY,
        null as PAY_POINT_ID,
        n.PARAMETER_VALUE as PAY_POINT,
        TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
        true as IS_CURRENT_SKEY
    from
        BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
        CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
        CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
    where
        k.PARAMETER_TYPE = 'UNLINKED_KEY'
        and n.PARAMETER_TYPE = 'UNLINKED_NAME'
        and d.PARAMETER_TYPE = 'NULL_DATE'

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.PAY_RATE_TYPE(
	PAY_RATE_TYPE_KEY,
	PAY_RATE_TYPE_NAME
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select distinct
    MD5(COALESCE(w.PAY_RATE_TYPE, par.PARAMETER_VALUE)) AS PAY_RATE_TYPE_KEY,
    COALESCE(w.PAY_RATE_TYPE, par.PARAMETER_VALUE) AS PAY_RATE_TYPE_NAME
from
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as w
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
        par.PARAMETER_TYPE = 'WORKER_PAY_RATE_TYPE_CONTINGENT'
--
union
--
select distinct
    MD5(COALESCE(w.PAY_RATE_TYPE, par.PARAMETER_VALUE)) AS PAY_RATE_TYPE_KEY,
    COALESCE(w.PAY_RATE_TYPE, par.PARAMETER_VALUE) AS PAY_RATE_TYPE_NAME
from
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_WIDE as w
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
        par.PARAMETER_TYPE = 'WORKER_PAY_RATE_TYPE_CONTINGENT'
--
union
--
select
    MD5(par.PARAMETER_VALUE) AS PAY_RATE_TYPE_KEY,
    par.PARAMETER_VALUE AS PAY_RATE_TYPE_NAME
from
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as w
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
        par.PARAMETER_TYPE = 'WORKER_PAY_RATE_TYPE_CONTINGENT'
--
union
--
select
    MD5(par_key.PARAMETER_VALUE) AS PAY_RATE_TYPE_KEY,
    par_name.PARAMETER_VALUE AS PAY_RATE_TYPE_NAME
from
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_key
    cross join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_name
where
    par_key.PARAMETER_TYPE = 'UNLINKED_KEY'
    and par_name.PARAMETER_TYPE = 'UNLINKED_NAME'


;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.POSITION_VACANT(
	HEADCOUNT_SKEY,
	WORKER_POSITION_SKEY,
	WEEK_END_DATE,
	WEEK_END_DATE_KEY,
	POSITION_ID,
	POSITION_SKEY,
	WORKER_SKEY,
	WORKER_ID,
	WORKER_MANAGER_SKEY,
	WORKER_MANAGER_ID,
	PAY_RATE_TYPE_KEY,
	LOCATION_SKEY,
	TEAM_SKEY,
	COST_CENTRE_SKEY,
	DEPARTMENT_SKEY,
	WORKER_SOURCE_KEY,
	LABOUR_PROVIDER_KEY,
	VERSION_TIMESTAMP,
	IS_CURRENT,
	HEADCOUNT_ACTUAL,
	HEADCOUNT_ACTUAL_NO_FUTURE,
	HEADCOUNT_HOURS_ACTUAL,
	HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
	HEADCOUNT_FTE_ACTUAL,
	HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
	HEADCOUNT_FTE_BUDGET,
	HEADCOUNT_FTE_FORECAST,
	HEADCOUNT_COST_ACTUAL,
	HEADCOUNT_COST_ACTUAL_NO_FUTURE,
	HEADCOUNT_COST_BUDGET,
	HEADCOUNT_COST_FORECAST
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

WITH
    -- First week of POSITION_HISTORY
    weeks_pos_hist_cte as (
        select 
            min(last_day(p._FIVETRAN_START, 'week')) as MIN_WEEK_END_DATE
        from BEGA_HR_DATA_{{ env }}.RAW_HISTORY.POSITION_HISTORY as p
    ),

    -- Weeks between the first week and current week
    weeks_cte as (
        select
            PERIOD_TYPE_4,
            MIN(DATE) AS WEEK_START_DATE,
            MAX(DATE) AS WEEK_END_DATE
        from
            BEGA_MASTER_DATA_{{ env }}.TRANSFORMED.CALENDAR as c
            inner join weeks_pos_hist_cte as w on
                c.DATE > dateadd(week, -1, w.MIN_WEEK_END_DATE)
                and c.DATE <= last_day(CURRENT_DATE, 'week')
        group by all
        ),
        
    -- Max version for each week
    open_pos_hist as (
        select 
            w.WEEK_END_DATE,
            p.ID, 
            max(p._FIVETRAN_START) as WEEK_MAX_FIVETRAN_START
        from
            weeks_cte as w
            inner join BEGA_HR_DATA_{{ env }}.RAW_HISTORY.POSITION_HISTORY as p on
                p._FIVETRAN_START <= w.WEEK_END_DATE
        where 
            not p.CLOSED
            and p.WORKER_FOR_FILLED_POSITION_ID is null
        group by all
    ),

    manager_dedupl as (
        select
            WORKER_ID,
            MAX_BY(WORKER_SKEY, VERSION_TIMESTAMP) as WORKER_SKEY,
            MAX_BY(LOCATION_ID, VERSION_TIMESTAMP) as LOCATION_ID,
            MAX_BY(LOCATION_SKEY, VERSION_TIMESTAMP) as LOCATION_SKEY,
            MAX_BY(TEAM_ID, VERSION_TIMESTAMP) as TEAM_ID,
            MAX_BY(TEAM_SKEY, VERSION_TIMESTAMP) as TEAM_SKEY,
            MAX_BY(DEPARTMENT_ID, VERSION_TIMESTAMP) as DEPARTMENT_ID,
            MAX_BY(DEPARTMENT_SKEY, VERSION_TIMESTAMP) as DEPARTMENT_SKEY,
            MAX_BY(COST_CENTRE_ID, VERSION_TIMESTAMP) as COST_CENTRE_ID,
            MAX_BY(COST_CENTRE_SKEY, VERSION_TIMESTAMP) as COST_CENTRE_SKEY
        from
            BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as wpi
        group by all
    ),

    position_pay_rate_dedupl as (
        select
            jp.POSITION_ID,
            max(pr.PAY_RATE_CODE) as PAY_RATE_CODE
        from
            BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.POSITION_JOB_PROFILE as jp
            inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.JOB_PROFILE_PAY_RATE as pr on
                jp.JOB_PROFILE_ID = pr.JOB_PROFILE_ID
        group by all
        )

select 
    MD5(CONCAT('P|0|', p.ID, '|', ph.WEEK_END_DATE)) as HEADCOUNT_SKEY,
    MD5(CONCAT('0|', p.ID)) as WORKER_POSITION_SKEY,
    ph.WEEK_END_DATE,
    to_char(ph.WEEK_END_DATE, 'YYYYMMDD') as WEEK_END_DATE_KEY,    
    p.ID as POSITION_ID,
    md5(p.ID) as POSITION_SKEY,
    md5(par_unlinked.PARAMETER_VALUE) as WORKER_SKEY,
    null as WORKER_ID,
    coalesce(man.WORKER_SKEY, md5(par_unlinked.PARAMETER_VALUE)) as WORKER_MANAGER_SKEY,
    man.WORKER_ID as WORKER_MANAGER_ID,
    
    md5(ifnull(pprd.PAY_RATE_CODE, par.PARAMETER_VALUE)) AS PAY_RATE_TYPE_KEY,
    
    coalesce(man.LOCATION_SKEY, md5(par_unlinked.PARAMETER_VALUE)) as LOCATION_SKEY,
    coalesce(man.TEAM_SKEY, md5(par_unlinked.PARAMETER_VALUE)) as TEAM_SKEY,
    coalesce(man.COST_CENTRE_SKEY, md5(par_unlinked.PARAMETER_VALUE)) as COST_CENTRE_SKEY,
    coalesce(man.DEPARTMENT_SKEY, md5(par_unlinked.PARAMETER_VALUE)) as DEPARTMENT_SKEY,

    MD5(par_int.PARAMETER_VALUE) as WORKER_SOURCE_KEY,
    MD5(par_int.PARAMETER_VALUE) as LABOUR_PROVIDER_KEY,
    
    p._FIVETRAN_SYNCED as VERSION_TIMESTAMP,
    true as IS_CURRENT,
    
    0 as HEADCOUNT_ACTUAL,

    0 as HEADCOUNT_ACTUAL_NO_FUTURE,
    
    0.0 as HEADCOUNT_HOURS_ACTUAL,
    0.0 as HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
    
    0.0 as HEADCOUNT_FTE_ACTUAL,
    0.0 as HEADCOUNT_FTE_ACTUAL_NO_FUTURE,

    case
        when pbd.POSITION_CODE is null
            then 0.0
        else 1.0
        end as HEADCOUNT_FTE_BUDGET,
        
    case
        when pbd.POSITION_CODE is null
            then 0.0
        else 1.0
        end as HEADCOUNT_FTE_FORECAST,

    null as HEADCOUNT_COST_ACTUAL,                      -- TODO-LATER: remove
    null as HEADCOUNT_COST_ACTUAL_NO_FUTURE,                      -- TODO-LATER: remove
    null as HEADCOUNT_COST_BUDGET,                      -- TODO-LATER: remove
    null as HEADCOUNT_COST_FORECAST                     -- TODO-LATER: remove
    
from
    BEGA_HR_DATA_{{ env }}.RAW_HISTORY.POSITION_HISTORY as p
    inner join open_pos_hist as ph on
        p.ID = ph.ID
        and p._FIVETRAN_START = ph.WEEK_MAX_FIVETRAN_START
    inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as o on
        p.SUPERVISORY_ORGANIZATION_ID = o.ORGANIZATION_CODE
        
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
        par.PARAMETER_TYPE = 'WORKER_PAY_RATE_TYPE_CONTINGENT'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_int on
        par_int.PARAMETER_TYPE = 'OPEN_POSITION_WORKER_PROVIDER_SOURCE'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_unlinked on
        par_unlinked.PARAMETER_TYPE = 'UNLINKED_KEY'
        
    left join manager_dedupl as man on
        man.WORKER_ID = o.MANAGER_ID
    left join BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET as pbd on
        p.POSITION_CODE = pbd.POSITION_CODE
    left join position_pay_rate_dedupl as pprd on
        p.ID = pprd.POSITION_ID

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.POSITION_WAGES_AND_BUDGET(
	WAGES_BUDGET_KEY,
	POSITION_CODE,
	POSITION_ID,
	POSITION_SKEY,
	WORKER_CODE,
	POSITION_TYPE_NAME,
	POSITION_TYPE_KEY,
	END_OF_WEEK_DATE,
	WEEK_END_DATE_KEY,
	PAY_FREQUENCY_KEY,
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	WORKER_ID,
	LOCATION_ID,
	LOCATION_SKEY,
	TEAM_ID,
	TEAM_SKEY,
	DEPARTMENT_SKEY,
	DEPARTMENT_ID,
	COST_CENTRE_SKEY,
	COST_CENTRE_ID,
	PAY_RATE_TYPE,
	PAY_RATE_TYPE_KEY,
	SALARY_ACTUALS,
	SALARY_ACTUALS_NO_FUTURE,
	SALARY_BUDGET,
	SALARY_FORECAST,
	ALLOWANCE_ACTUALS,
	ALLOWANCE_ACTUALS_NO_FUTURE,
	ALLOWANCE_BUDGET,
	ALLOWANCE_FORECAST,
	PAYROLL_TAX_ACTUALS,
	PAYROLL_TAX_ACTUALS_NO_FUTURE,
	PAYROLL_TAX_BUDGET,
	PAYROLL_TAX_FORECAST,
	ON_COSTS_AL_ACTUALS,
	ON_COSTS_AL_ACTUALS_NO_FUTURE,
	ON_COSTS_AL_BUDGET,
	ON_COSTS_AL_FORECAST,
	ON_COSTS_LSL_ACTUALS,
	ON_COSTS_LSL_ACTUALS_NO_FUTURE,
	ON_COSTS_LSL_BUDGET,
	ON_COSTS_LSL_FORECAST,
	ON_COSTS_SUPER_ACTUALS,
	ON_COSTS_SUPER_ACTUALS_NO_FUTURE,
	ON_COSTS_SUPER_BUDGET,
	ON_COSTS_SUPER_FORECAST,
	NORMAL_HOURS_ACTUALS,
	NORMAL_HOURS_ACTUALS_NO_FUTURE,
	NORMAL_HOURS_BUDGET,
	NORMAL_HOURS_FORECAST,
	OVERTIME_HOURS_ACTUALS,
	OVERTIME_HOURS_ACTUALS_NO_FUTURE,
	OVERTIME_HOURS_BUDGET,
	OVERTIME_HOURS_FORECAST,
	OVERTIME_COST_ACTUALS,
	OVERTIME_COST_ACTUALS_NO_FUTURE,
	OVERTIME_COST_BUDGET,
	OVERTIME_COST_FORECAST,
	ON_COSTS_ACTUALS,
	ON_COSTS_ACTUALS_NO_FUTURE,
	ON_COSTS_BUDGET,
	ON_COSTS_FORECAST,
	IS_CURRENT,
	VERSION_TIMESTAMP
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as       

select
    MD5(CONCAT('I|', b.WORKER_ID, '|', b.POSITION_ID, '|', b.COST_CENTRE_ID, '|', b.END_OF_WEEK_DATE)) as WAGES_BUDGET_KEY,
    ifnull(a.POSITION_CODE,b.POSITION_CODE) as POSITION_CODE,
    b.POSITION_ID,
    ifnull(b.POSITION_SKEY, md5(k.PARAMETER_VALUE)) as POSITION_SKEY, 
    b.worker_code,
    case when b.worker_code is null then
           'Vacant Position'
          else 
           'Internal Worker' 
          end as POSITION_TYPE_NAME,
    ifnull(md5(POSITION_TYPE_NAME), md5(k.PARAMETER_VALUE)) as POSITION_TYPE_KEY,      
    b.END_OF_WEEK_DATE,
        
    b.WEEK_END_DATE_KEY,
    ifnull(b.PAY_FREQUENCY_KEY, md5(k.PARAMETER_VALUE)) as PAY_FREQUENCY_KEY,
    ifnull(b.WORKER_POSITION_SKEY, md5(k.PARAMETER_VALUE)) as WORKER_POSITION_SKEY,
    ifnull(b.WORKER_SKEY, md5(k.PARAMETER_VALUE)) as WORKER_SKEY,
    b.WORKER_ID,
    b.LOCATION_ID,
    ifnull(b.LOCATION_SKEY, md5(k.PARAMETER_VALUE)) as LOCATION_SKEY,
    b.TEAM_ID,
    ifnull(b.TEAM_SKEY, md5(k.PARAMETER_VALUE)) as TEAM_SKEY,
    ifnull(b.DEPARTMENT_SKEY, md5(k.PARAMETER_VALUE)) as DEPARTMENT_SKEY,
    b.DEPARTMENT_ID,
    ifnull(b.COST_CENTRE_SKEY, md5(k.PARAMETER_VALUE)) as COST_CENTRE_SKEY,
    b.COST_CENTRE_ID,
    b.PAY_RATE_TYPE,
    ifnull(b.PAY_RATE_TYPE_KEY, md5(k.PARAMETER_VALUE)) as PAY_RATE_TYPE_KEY,
    
    b.SALARY_ACTUALS,  
    case when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then 
                 SALARY_ACTUALS
            else 0
          end as SALARY_ACTUALS_NO_FUTURE,
    
    case when c.fiscal_year = a.fiscal_year 
           then a.MONTHLY_BASE_SALARY 
           else 0
         end as SALARY_BUDGET,
         
    case when c.fiscal_year = a.fiscal_year 
            then a.MONTHLY_BASE_SALARY 
            else 0
          end as SALARY_FORECAST, -- DYNAMIC??
    
	b.ALLOWANCE_ACTUALS,  
    case
        when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then ALLOWANCE_ACTUALS
        else 0
    end as ALLOWANCE_ACTUALS_NO_FUTURE,
    
    case when c.fiscal_year = a.fiscal_year 
             then a.TOTAL_ALLOWANCES 
             else 0
         end as ALLOWANCE_BUDGET,
         
    case when c.fiscal_year = a.fiscal_year 
              then a.TOTAL_ALLOWANCES 
              else 0
         end as ALLOWANCE_FORECAST, -- DYNAMIC??
    
	b.PAYROLL_TAX_ACTUALS,   
    case
        when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then PAYROLL_TAX_ACTUALS
        else 0
    end as PAYROLL_TAX_ACTUALS_NO_FUTURE,
    case when c.fiscal_year = a.fiscal_year 
              then a.PAYROLL_TAX 
              else 0
          end as PAYROLL_TAX_BUDGET,

    case when c.fiscal_year = a.fiscal_year 
              then a.PAYROLL_TAX 
              else 0
         end as PAYROLL_TAX_FORECAST,    -- DYNAMIC??
    
	b.ON_COSTS_AL_ACTUALS,
    case
        when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then ON_COSTS_AL_ACTUALS
        else 0
    end as ON_COSTS_AL_ACTUALS_NO_FUTURE,

    case when c.fiscal_year = a.fiscal_year 
              then a.AL_LIABILITY 
              else 0
         end as ON_COSTS_AL_BUDGET,

    case when c.fiscal_year = a.fiscal_year 
              then a.AL_LIABILITY 
              else 0
          end as ON_COSTS_AL_FORECAST,   -- DYNAMIC??
    
	b.ON_COSTS_LSL_ACTUALS,
    case
        when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then ON_COSTS_LSL_ACTUALS
        else 0
    end as ON_COSTS_LSL_ACTUALS_NO_FUTURE,

    case when c.fiscal_year = a.fiscal_year 
              then a.LSL_LIABILITY 
              else 0
         end as ON_COSTS_LSL_BUDGET,

    case when c.fiscal_year = a.fiscal_year 
              then a.LSL_LIABILITY 
              else 0
         end as ON_COSTS_LSL_FORECAST,  -- DYNAMIC??
    
    b.ON_COSTS_SUPER_ACTUALS,
    case
        when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then ON_COSTS_SUPER_ACTUALS
        else 0
    end as ON_COSTS_SUPER_ACTUALS_NO_FUTURE,

    case when c.fiscal_year = a.fiscal_year 
              then a.TOTAL_SUPER_BASE_ALLOWANCE_LSL 
              else 0
          end as ON_COSTS_SUPER_BUDGET,

    case when c.fiscal_year = a.fiscal_year 
              then a.TOTAL_SUPER_BASE_ALLOWANCE_LSL  
              else 0
         end as ON_COSTS_SUPER_FORECAST, -- dynamic??

   
    b.NORMAL_HOURS_ACTUALS,
    case
        when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then NORMAL_HOURS_ACTUALS
        else 0
    end as NORMAL_HOURS_ACTUALS_NO_FUTURE,
    0 as NORMAL_HOURS_BUDGET, -- to do once defined
    0 as NORMAL_HOURS_FORECAST, -- to do once defined
    
    b.OVERTIME_HOURS_ACTUALS,
    case
        when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then OVERTIME_HOURS_ACTUALS
        else 0
    end as OVERTIME_HOURS_ACTUALS_NO_FUTURE,
    0 as OVERTIME_HOURS_BUDGET,  -- TO DO ONCE DEFINED
    0 AS OVERTIME_HOURS_FORECAST, -- TO DO ONCE DEFINED
    
    b.OVERTIME_COSTS_ACTUALS as OVERTIME_COST_ACTUALS,
    case
        when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then OVERTIME_COST_ACTUALS
        else 0
    end as OVERTIME_COST_ACTUALS_NO_FUTURE,
    0 AS OVERTIME_COST_BUDGET, -- TO DO ONCE DEFINED
    0 AS OVERTIME_COST_FORECAST, -- TO DO ONCE DEFINED
    
    b.ON_COSTS_ACTUALS,
    case
        when b.END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then ON_COSTS_ACTUALS
        else 0
    end as ON_COSTS_ACTUALS_NO_FUTURE,
    (PAYROLL_TAX_BUDGET + ON_COSTS_AL_BUDGET + ON_COSTS_LSL_BUDGET + ON_COSTS_SUPER_BUDGET) as ON_COSTS_BUDGET,
    (PAYROLL_TAX_FORECAST + ON_COSTS_AL_FORECAST + ON_COSTS_LSL_FORECAST + ON_COSTS_SUPER_FORECAST) as ON_COSTS_FORECAST,

    TRUE as IS_CURRENT,
    a._fivetran_synced as VERSION_TIMESTAMP
    
-- from BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET a
--     left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_ACTUALS b
    from BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_ACTUALS b
    inner join BEGA_MASTER_DATA_{{ env }}.TRANSFORMED.CALENDAR c
        on b.END_OF_WEEK_DATE = c.DATE     
    left join BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET a
        on b.POSITION_CODE = a.POSITION_CODE 
        --RS: 09/08/2024 Added join on fiscal year due to duplicated in POSITION_BUDGET table
        and c.FISCAL_YEAR = a.FISCAL_YEAR
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k 
        on k.PARAMETER_TYPE = 'UNLINKED_KEY'

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.SEC_ROW_LEVEL_WORKER(
	WORKER_POSITION_SKEY,
	DEPARTMENT_ID,
	AUTHORISED_EMAIL_ADDRESS,
	AUTHORISED_TYPE
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with
    worker_department as (
        select distinct
            WORKER_POSITION_SKEY, 
            EMAIL_ADDRESS, 
            DEPARTMENT_ID
        from BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE
        --
        union all
        --
        select distinct 
            WORKER_POSITION_SKEY, 
            null as EMAIL_ADDRESS,  -- Externals won't access the reports
            DEPARTMENT_ID
        from BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_WIDE
        --
        union all
        --
        select distinct 
            p.WORKER_POSITION_SKEY,
            null as EMAIL_ADDRESS,  -- Vacant Positions won't access the reports
            d.DEPARTMENT_ID
        from BEGA_HR_DATA_{{ env }}.TRANSFORMED.POSITION_VACANT as p
            inner join BEGA_HR_DATA_{{ env }}.TRANSFORMED.DEPARTMENT as d on
                p.DEPARTMENT_SKEY = d.DEPARTMENT_SKEY
        ),
    
    row_level_worker as (
        --
        -- worker to see itself -- TODO: will this be allowed?
        --
        select
        	wk.WORKER_POSITION_SKEY,
            wk.DEPARTMENT_ID,
        	wk.EMAIL_ADDRESS as AUTHORISED_EMAIL_ADDRESS,
            'Self' as AUTHORISED_TYPE
        from
            worker_department as wk
        where
            wk.EMAIL_ADDRESS is not null
        --
        union all
        --
        -- departments managers
        --
        select
        	wk.WORKER_POSITION_SKEY,
            wk.DEPARTMENT_ID,
        	dh.DEPARTMENT_MANAGER_EMAIL_ADDRESS as AUTHORISED_EMAIL_ADDRESS,
            'Department Manager' as AUTHORISED_TYPE
        from
            worker_department as wk
            inner join BEGA_HR_DATA_{{ env }}.TRANSFORMED.DEPARTMENT_ACTIVE_ACCESS as dh on
                dh.DEPARTMENT_ID = wk.DEPARTMENT_ID
        ),

    manual_assignments_email as (
        select distinct
            wk.WORKER_POSITION_SKEY,
            dh.DEPARTMENT_ID,
            m.AUTHORISED_EMAIL_ADDRESS
        from
            BEGA_HR_DATA_{{ env }}.CONTROL.REF_ROW_LEVEL_MANUAL_ASSIGNMENT as m
            -- Departments
            left join BEGA_HR_DATA_{{ env }}.TRANSFORMED.DEPARTMENT_HIERARCHY as dh on
                not dh.INACTIVE
                and dh.DEPARTMENT_PATH_ID like concat('%', m.FROM_DEPARTMENT_ID, '%')
            -- Workers of the Departments
            inner join worker_department as wk on
                wk.DEPARTMENT_ID = dh.department_id
                or m.ASSIGN_ALL_WORKER_PORITIONS
        where
            m.AUTHORISED_EMAIL_ADDRESS is not null
        ),

    manual_assignments_position as (
        select distinct
            wk.WORKER_POSITION_SKEY,
            dh.DEPARTMENT_ID,
            lower(w.USER_ID) as AUTHORISED_EMAIL_ADDRESS
        from
            BEGA_HR_DATA_{{ env }}.CONTROL.REF_ROW_LEVEL_MANUAL_ASSIGNMENT as m
            -- Departments
            left join BEGA_HR_DATA_{{ env }}.TRANSFORMED.DEPARTMENT_HIERARCHY as dh on
                not dh.INACTIVE
                and dh.DEPARTMENT_PATH_ID like concat('%', m.FROM_DEPARTMENT_ID, '%')
            -- Workers of the Departments
            inner join worker_department as wk on
                wk.DEPARTMENT_ID = dh.DEPARTMENT_ID
                or m.ASSIGN_ALL_WORKER_PORITIONS
            -- Authorised Workers for the Position
            inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.POSITION as p on
                p.POSITION_CODE = m.AUTHORISED_POSITION_CODE
            inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_POSITION as wp on
                wp.POSITION_ID = p.ID
            inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER as w on
                wp.WORKER_ID = w.ID
                and w.ACTIVE
        )

select distinct
    WORKER_POSITION_SKEY,
    DEPARTMENT_ID,
    AUTHORISED_EMAIL_ADDRESS,
    AUTHORISED_TYPE
from row_level_worker
--
union
--
select distinct
    WORKER_POSITION_SKEY,
    DEPARTMENT_ID,
    AUTHORISED_EMAIL_ADDRESS,
    'Manual Email Assignment' as AUTHORISED_TYPE
from manual_assignments_email
--
union
--
select distinct
    WORKER_POSITION_SKEY,
    DEPARTMENT_ID,
    AUTHORISED_EMAIL_ADDRESS,
    'Manual Position Assignment' as AUTHORISED_TYPE
from manual_assignments_position

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.TEAM(
	TEAM_SKEY,
	TEAM_ID,
	TEAM_NAME,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select distinct
    MD5(org.ID) as TEAM_SKEY,
    org.ID as TEAM_ID,
    org.NAME as TEAM_NAME,
    
    MAX(org._FIVETRAN_SYNCED) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.ORGANIZATION as org
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par on
        org.type = par.PARAMETER_VALUE
        and par.PARAMETER_TYPE LIKE 'EMPLOYEE_ORGANIZATION_TYPE_TEAM'
group by all

--
union all
--

select
    MD5(k.PARAMETER_VALUE) as TEAM_SKEY,
    null as TEAM_ID,
    n.PARAMETER_VALUE as TEAM_NAME,
    
    TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
where
    k.PARAMETER_TYPE = 'UNLINKED_KEY'
    and n.PARAMETER_TYPE = 'UNLINKED_NAME'
    and d.PARAMETER_TYPE = 'NULL_DATE'
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER(
	WORKER_SKEY,
	WORKER_ID,
	WORKER_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	EMAIL_ADDRESS,
	CONTINUOUS_SERVICE_DATE,
	HIRE_DATE,
	ORIGINAL_HIRE_DATE,
	VERSION_TIMESTAMP,
	IS_CURRENT
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select distinct
	WORKER_SKEY,
	WORKER_ID,
	WORKER_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
    EMAIL_ADDRESS,

    CONTINUOUS_SERVICE_DATE, 
    HIRE_DATE, 
    ORIGINAL_HIRE_DATE,
    
    -- Fix for duplicate WORKER_SKEY -- TODO - verify
    -- VERSION_TIMESTAMP,
    max(VERSION_TIMESTAMP) as VERSION_TIMESTAMP,
    IS_CURRENT
from
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE
group by
    all
--
union all
--

select distinct
	WORKER_SKEY,
	WORKER_ID,
	WORKER_EXTERNAL_CODE,

    -- TODO: think about this - needed to use MAX because the same worker will have different timestamps from the spreadhseets
	MAX_BY(FIRST_NAME, VERSION_TIMESTAMP) as FIRST_NAME,
	MAX_BY(LAST_NAME, VERSION_TIMESTAMP) as LAST_NAME,
	MAX_BY(FULL_NAME, VERSION_TIMESTAMP) as FULL_NAME,
	MAX_BY(EMAIL_ADDRESS, VERSION_TIMESTAMP) as EMAIL_ADDRESS,

    null as CONTINUOUS_SERVICE_DATE, 
    null as HIRE_DATE, 
    null as ORIGINAL_HIRE_DATE,
    
    MAX(VERSION_TIMESTAMP) as VERSION_TIMESTAMP,
    IS_CURRENT
from
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_WIDE
group by all

--
union all
--

select
    MD5(k.PARAMETER_VALUE) as WORKER_SKEY,
    n.PARAMETER_VALUE as WORKER_ID,
	n.PARAMETER_VALUE as WORKER_CODE,
	n.PARAMETER_VALUE as FIRST_NAME,
	n.PARAMETER_VALUE as LAST_NAME,
	n.PARAMETER_VALUE as FULL_NAME,
    null as EMAIL_ADDRESS,

    null as CONTINUOUS_SERVICE_DATE, 
    null as HIRE_DATE, 
    null as ORIGINAL_HIRE_DATE,
    
    TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
    true as IS_CURRENT
from
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
where
    k.PARAMETER_TYPE = 'UNLINKED_KEY'
    and n.PARAMETER_TYPE = 'UNLINKED_NAME'
    and d.PARAMETER_TYPE = 'NULL_DATE'
    
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_EXTENDED_LEAVE(
	WORKER_ID,
	LEAVE_START_DATE,
	LEAVE_END_OR_ESTIMATED_END_DATE,
	LEAVE_REQUEST_PATH,
	LEAVE_COMBINED_LEVEL
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with
    --
    -- Recursively finds the sequenced periods (max 4 days apart)
    -- also defines the PATH of these connections and number of LEVELs
    --
    leave as (
        select
            l.LEAVE_REQUEST_EVENT_ID,
            l.WORKER_ID,
            l.LEAVE_START_DATE,
            coalesce(l.LEAVE_END_DATE, l.ESTIMATED_LEAVE_END_DATE) as LEAVE_END_OR_ESTIMATED_END_DATE,
            l.LEAVE_REQUEST_EVENT_ID as LEAVE_REQUEST_PATH,
            1 as LEAVE_COMBINED_LEVEL
        from
            BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_LEAVE_STATUS as l
        --
        union all
        --
        select
            l.LEAVE_REQUEST_EVENT_ID,
            l.WORKER_ID,
            l.LEAVE_START_DATE,
            coalesce(b.LEAVE_END_DATE, b.ESTIMATED_LEAVE_END_DATE) as LEAVE_END_OR_ESTIMATED_END_DATE,
            concat(l.LEAVE_REQUEST_PATH, ' > ', b.LEAVE_REQUEST_EVENT_ID) as LEAVE_REQUEST_PATH,
            l.LEAVE_COMBINED_LEVEL + 1 as LEAVE_COMBINED_LEVEL
        from
            leave as l
            inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER_LEAVE_STATUS as b on
                l.WORKER_ID = b.WORKER_ID
                and l.LEAVE_REQUEST_EVENT_ID <> b.LEAVE_REQUEST_EVENT_ID
                and l.LEAVE_REQUEST_PATH not like concat('%', b.LEAVE_REQUEST_EVENT_ID, '%')
                and dateadd(day, 4, l.LEAVE_END_OR_ESTIMATED_END_DATE) >= b.LEAVE_START_DATE
                and l.LEAVE_END_OR_ESTIMATED_END_DATE 
                    < coalesce(b.LEAVE_END_DATE, b.ESTIMATED_LEAVE_END_DATE)
    ),

    --
    -- Gets the higher level for each worker and request id
    --
    leave_deduplicate as (
        select
            WORKER_ID, 
            LEAVE_REQUEST_EVENT_ID, 
            min_by(LEAVE_START_DATE, LEAVE_COMBINED_LEVEL) as LEAVE_START_DATE,
            max_by(LEAVE_END_OR_ESTIMATED_END_DATE, LEAVE_COMBINED_LEVEL) 
                as LEAVE_END_OR_ESTIMATED_END_DATE,
            max_by(LEAVE_REQUEST_PATH, LEAVE_COMBINED_LEVEL) as LEAVE_REQUEST_PATH,
            max(LEAVE_COMBINED_LEVEL) as LEAVE_COMBINED_LEVEL
        from leave
        group by all
        ),

    --
    -- Remove the periods self-contained in other periods (for the same worker)
    --
    leave_remove_overlap as (
        select *
        from leave_deduplicate as a
        where
            not exists(
                select 1
                from leave_deduplicate as b
                where
                    a.WORKER_ID = b.WORKER_ID
                    and a.LEAVE_REQUEST_EVENT_ID <> b.LEAVE_REQUEST_EVENT_ID
                    and b.LEAVE_START_DATE <= a.LEAVE_START_DATE
                    and b.LEAVE_END_OR_ESTIMATED_END_DATE >= a.LEAVE_END_OR_ESTIMATED_END_DATE
                )
        ),

    --
    -- Remove periods smaller than 90 days -- TODO: change to parameter
    --
    leave_above_minimum_days as (
        select *
        from leave_remove_overlap
        where
            datediff(days, LEAVE_START_DATE, LEAVE_END_OR_ESTIMATED_END_DATE) > 90
        )

select
    WORKER_ID,
    LEAVE_START_DATE,
    LEAVE_END_OR_ESTIMATED_END_DATE,
    LEAVE_REQUEST_PATH,
    LEAVE_COMBINED_LEVEL
from leave_above_minimum_days

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_POSITION(
	WORKER_POSITION_SKEY,
	WORKER_POSITION_TYPE,
	POSITION_CODE,
	WORKER_CODE,
	WORKER_POSITION_DESCRIPTION,
	POSITION_CLOSED,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

--
-- Internals
--
select distinct
    wi.WORKER_POSITION_SKEY,
    'Internal' as WORKER_POSITION_TYPE,
    p.POSITION_CODE,
    w.WORKER_CODE,
    COALESCE(wi.BUSINESS_TITLE, p.JOB_POSTING_TITLE) as WORKER_POSITION_DESCRIPTION,
    ifnull(p.CLOSED, true) as POSITION_CLOSED,
    
    wi.VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as wi
    left outer join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.POSITION as p on
        wi.POSITION_ID = p.ID
    inner join BEGA_HR_LANDING_{{ env }}.WORKDAY_HCM.WORKER as w on
        wi.WORKER_ID = w.ID

--
-- Externals
--
union
--

select distinct
    we.WORKER_POSITION_SKEY,
    'External' as WORKER_POSITION_TYPE,
    null as POSITION_CODE,
    we.WORKER_EXTERNAL_CODE,
    we.POSITION_TITLE as WORKER_POSITION_DESCRIPTION,
    null as POSITION_CLOSED,
    
    max(we.VERSION_TIMESTAMP) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_WIDE as we
group by all

--
-- Vacant Positions
--
union
--

select distinct
    MD5(CONCAT('0|', p.ID)) as WORKER_POSITION_SKEY,
    'Vacant Position' as WORKER_POSITION_TYPE,
    max_by(p.POSITION_CODE, p._FIVETRAN_SYNCED) as POSITION_CODE,
    null as WORKER_CODE,
    max_by(p.JOB_POSTING_TITLE, p._FIVETRAN_SYNCED) as WORKER_POSITION_DESCRIPTION,
    max_by(p.CLOSED, p._FIVETRAN_SYNCED) as POSITION_CLOSED,
    
    max(p._FIVETRAN_SYNCED) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY

from
    BEGA_HR_DATA_{{ env }}.RAW_HISTORY.POSITION_HISTORY as p
where
    not p.CLOSED
    and p.WORKER_FOR_FILLED_POSITION_ID is null

group by all

--
-- Unlinked
--
union all
--

select
    MD5(k.PARAMETER_VALUE) as WORKER_POSITION_SKEY,
    null as WORKER_POSITION_TYPE,
    n.PARAMETER_VALUE as POSITION_CODE,
    null as WORKER_CODE,
    n.PARAMETER_VALUE as WORKER_POSITION_DESCRIPTION,
    null as POSITION_CLOSED,    
    TO_TIMESTAMP(d.PARAMETER_VALUE) as VERSION_TIMESTAMP,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
    CROSS JOIN BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as d
where
    k.PARAMETER_TYPE = 'UNLINKED_KEY'
    and n.PARAMETER_TYPE = 'UNLINKED_NAME'
    and d.PARAMETER_TYPE = 'NULL_DATE'

;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_POSITION_EXTERNAL(
	END_OF_WEEK_DATE,
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	WORKER_ID,
	WORKER_EXTERNAL_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	EMAIL_ADDRESS,
	WORKER_SOURCE_KEY,
	WORKER_SOURCE_NAME,
	LABOUR_PROVIDER_KEY,
	LABOUR_PROVIDER_NAME,
	WORKER_MANAGER_SKEY,
	WORKER_MANAGER_ID,
	LOCATION_ID,
	LOCATION_SKEY,
	TEAM_ID,
	TEAM_SKEY,
	DEPARTMENT_ID,
	DEPARTMENT_SKEY,
	COST_CENTRE_ID,
	COST_CENTRE_SKEY,
	PAY_RATE_TYPE_KEY,
	HEADCOUNT_ACTUAL,
	HEADCOUNT_ACTUAL_NO_FUTURE,
	HEADCOUNT_HOURS_ACTUAL,
	HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
	HEADCOUNT_FTE_ACTUAL,
	HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
	WORKER_EXISTS_IN_INTERNAL,
	VERSION_TIMESTAMP,
	IS_CURRENT
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select 
    END_OF_WEEK_DATE,
    WORKER_POSITION_SKEY,
    WORKER_SKEY,
    WORKER_ID,
    WORKER_EXTERNAL_CODE,
    FIRST_NAME,
    LAST_NAME,
    FULL_NAME,
    EMAIL_ADDRESS,
    
    WORKER_SOURCE_KEY,
    WORKER_SOURCE_NAME,
    LABOUR_PROVIDER_KEY,
    LABOUR_PROVIDER_NAME,
    
    WORKER_MANAGER_SKEY,
    WORKER_MANAGER_ID,
    LOCATION_ID,
    LOCATION_SKEY,
    TEAM_ID,
    TEAM_SKEY,
    DEPARTMENT_ID,
    DEPARTMENT_SKEY,
    COST_CENTRE_ID,
    COST_CENTRE_SKEY,

    PAY_RATE_TYPE_KEY,
    
    HEADCOUNT_ACTUAL,
    
    case
        when END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then HEADCOUNT_ACTUAL
        else 0
        end as HEADCOUNT_ACTUAL_NO_FUTURE,

    HEADCOUNT_HOURS_ACTUAL,

    case
        when END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then HEADCOUNT_HOURS_ACTUAL
        else 0
        end as HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,

    HEADCOUNT_FTE_ACTUAL,
    
    case
        when END_OF_WEEK_DATE <= last_day(CURRENT_DATE, 'week')
            then HEADCOUNT_FTE_ACTUAL
        else 0
        end as HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
    
    exists(
        select 1
        from BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as wi
        where wi.CONTRACT_ASSIGNMENT_DETAILS like concat('%', we.WORKER_EXTERNAL_CODE, '%')
        ) as WORKER_EXISTS_IN_INTERNAL,
    
    VERSION_TIMESTAMP,
    IS_CURRENT
from 
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_WIDE as we
    
;
create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_POSITION_INTERNAL(
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	WORKER_ID,
	WORKER_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	WEEK_END_DATE,
	WEEK_END_DATE_KEY,
	LOCATION_ID,
	LOCATION_SKEY,
	TEAM_ID,
	TEAM_SKEY,
	COST_CENTRE_ID,
	COST_CENTRE_SKEY,
	DEPARTMENT_ID,
	DEPARTMENT_SKEY,
	WORKER_POSITION_START,
	WORKER_POSITION_START_KEY,
	WORKER_POSITION_END,
	WORKER_POSITION_END_KEY,
	COMPENSATION_TOTAL_BASE_PAY,
	POSITION_ID,
	POSITION_CODE,
	POSITION_SKEY,
	POSITION_DESCRIPTION,
	POSITION_FIVETRAN_SYNCED,
	SUPERVISORY_ORGANIZATION_ID,
	WORKER_FOR_FILLED_POSITION_ID,
	CLOSED,
	CONTRACT_ASSIGNMENT_DETAILS,
	PRIMARY_COMPENSATION_BASIS,
	WORKER_TYPE_CODE,
	PAY_RATE_TYPE,
	PAY_RATE_TYPE_KEY,
	PAY_FREQUENCY_KEY,
	EMAIL_ADDRESS,
	PAY_PLAN_CODE,
	WORKER_MANAGER_ID,
	WORKER_MANAGER_SKEY,
	WORKER_POSITION_MANAGER_FIVETRAN_SYNCED,
	WORKER_SOURCE_KEY,
	WORKER_SOURCE_NAME,
	LABOUR_PROVIDER_KEY,
	LABOUR_PROVIDER_NAME,
	VERSION_TIMESTAMP,
	IS_CURRENT,
	HEADCOUNT_ACTUAL,
	HEADCOUNT_ACTUAL_NO_FUTURE,
	HEADCOUNT_HOURS_ACTUAL,
	HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
	HEADCOUNT_FTE_ACTUAL,
	HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
	HEADCOUNT_FTE_BUDGET,
	HEADCOUNT_FTE_FORECAST,
	HEADCOUNT_COST_ACTUAL,
	HEADCOUNT_COST_ACTUAL_NO_FUTURE,
	HEADCOUNT_COST_BUDGET,
	HEADCOUNT_COST_FORECAST,
	SALARY_PLAN_BASE_AMOUNT
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

with
    weekly_cte AS (
        SELECT
            a.WORKER_ID, 
            a.POSITION_ID,
            a.WORKER_POSITION_START,
            /* RS 19/11/2024 - Fix to allow for change of position during midweek, i.e. start reporting new position on following week */
            --a.WORKER_POSITION_END,
            last_day(case when dayofweek(a.WORKER_POSITION_END) = 7 or last_day(a.WORKER_POSITION_END, 'week') = last_day(GETDATE(), 'week') then a.WORKER_POSITION_END else DATEADD(week, -1, a.WORKER_POSITION_END) end, 'week') as WORKER_POSITION_END,
            --last_day(a.WORKER_POSITION_START, 'week') AS WEEK_END_DATE
            last_day(case when dayofweek(a.WORKER_POSITION_START) = 1 then a.WORKER_POSITION_START else DATEADD(week, 1, a.WORKER_POSITION_START) end, 'week') AS WEEK_END_DATE
        FROM
            BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as a
        --
        UNION ALL
        --
        SELECT
            a.WORKER_ID, 
            a.POSITION_ID,
            a.WORKER_POSITION_START,
            a.WORKER_POSITION_END,
            DATEADD(week, 1, a.WEEK_END_DATE) AS WEEK_END_DATE
        FROM
            weekly_cte as a
        WHERE
            a.WEEK_END_DATE <= a.WORKER_POSITION_END
        ),
        
    weekly_cte_with_compensation as (
        select
            w.*,
            -- TODO:LATER: confirm with the business ths below deduplication method
            max(wic.employee_COMPENSATION_TOTAL_BASE_PAY) as COMPENSATION_TOTAL_BASE_PAY
        from
            weekly_cte as w
            left join BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_COMPENSATION_HISTORY as wic on
                w.WORKER_ID = wic.WORKER_ID
                and w.WEEK_END_DATE between wic.WORKER_START and wic.WORKER_END
        group by all
        ),

    weekly_cte_with_compensation_and_extended_leave as (
        -- TODO:LATER: discuss: this way we are considering on leave for the entire week, 
        --      based on the last day of the week, there is no proportioning based on
        --      the number of days on-leave or not-on-leave
        select
            w.*,
            exists(
                select 1
                from BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_EXTENDED_LEAVE as wxl
                where
                    w.WORKER_ID = wxl.WORKER_ID
                    and w.WEEK_END_DATE 
                        between 
                            wxl.LEAVE_START_DATE 
                            and wxl.LEAVE_END_OR_ESTIMATED_END_DATE
                ) as ON_PARENTAL_LEAVE
        from
            weekly_cte_with_compensation as w
    )

select
	w.WORKER_POSITION_SKEY,
    w.WORKER_SKEY,
    w.WORKER_ID,
	w.WORKER_CODE,
	w.FIRST_NAME,
	w.LAST_NAME,
	w.FULL_NAME,
    wc.WEEK_END_DATE,
    to_char(wc.WEEK_END_DATE, 'YYYYMMDD') as WEEK_END_DATE_KEY,
	w.LOCATION_ID,
    w.LOCATION_SKEY,
	w.TEAM_ID,
    w.TEAM_SKEY,
	--w.COST_CENTRE_ID,
	ifnull(wip.COST_CENTRE_ID, w.COST_CENTRE_ID) as COST_CENTRE_ID,
    ifnull(md5(wip.COST_CENTRE_ID), w.COST_CENTRE_SKEY) as COST_CENTRE_SKEY,
    
	w.DEPARTMENT_ID,
    w.DEPARTMENT_SKEY,
	w.WORKER_POSITION_START,
    w.WORKER_POSITION_START_KEY,
	w.WORKER_POSITION_END,
    w.WORKER_POSITION_END_KEY,
	-- w.RESIGNATION_DATE,
    -- w.RESIGNATION_DATE_KEY,
	-- w.TERMINATION_DATE,
    -- w.TERMINATION_DATE_KEY,
	-- w.HIRE_REASON,
	-- w.ACTIVE_STATUS_DATE,
    -- w.ACTIVE_STATUS_DATE_KEY,
	wc.COMPENSATION_TOTAL_BASE_PAY,
	-- w.ACTIVE,
	-- w.EMPLOYMENT_ACTIVE_DATE,
    -- w.EMPLOYMENT_ACTIVE_DATE_KEY,
	w.POSITION_ID,
	w.POSITION_CODE,
    w.POSITION_SKEY,
    w.POSITION_DESCRIPTION,
    w.POSITION_FIVETRAN_SYNCED,
	w.SUPERVISORY_ORGANIZATION_ID,
	w.WORKER_FOR_FILLED_POSITION_ID,
	w.CLOSED,
    w.CONTRACT_ASSIGNMENT_DETAILS,
	w.PRIMARY_COMPENSATION_BASIS,
	w.WORKER_TYPE_CODE,
	-- w.FULL_TIME_EQUIVALENT_PERCENTAGE,
	-- w.PAY_RATE,
	-- w.BUSINESS_TITLE,
	-- w.WORKSHIFT,
	-- w.EFFECTIVE_DATE,
	w.PAY_RATE_TYPE,
    w.PAY_RATE_TYPE_KEY,
    md5(ifnull(wip.PAY_FREQUENCY, k.PARAMETER_VALUE)) as PAY_FREQUENCY_KEY,
	w.EMAIL_ADDRESS,
	w.PAY_PLAN_CODE,
    w.WORKER_MANAGER_ID,
    w.WORKER_MANAGER_SKEY,
    w.WORKER_POSITION_MANAGER_FIVETRAN_SYNCED,


    w.WORKER_SOURCE_KEY,
    w.WORKER_SOURCE_NAME,
    w.LABOUR_PROVIDER_KEY,
    w.LABOUR_PROVIDER_NAME,
    
    w.VERSION_TIMESTAMP,
    w.IS_CURRENT,

    -- -----------------------
    -- Calculations
    -- -----------------------
    case
        when wc.ON_PARENTAL_LEAVE                       -- on parental leave = 0
            then 0
        when wip.WORKER_CODE is not null                -- there is payroll = 1
            then 1
        else 0                                          -- otherwise = 0
        end as HEADCOUNT_ACTUAL,

    case
        when wc.WEEK_END_DATE <= last_day(CURRENT_DATE, 'week')
            then HEADCOUNT_ACTUAL
        else 0
        end as HEADCOUNT_ACTUAL_NO_FUTURE,

    case
        when wc.ON_PARENTAL_LEAVE                       -- on parental leave = 0
            then 0.0
        else ifnull(wip.FTE_HOURS, 0)                   -- otherwise = payroll FTE_HOURS
        end as HEADCOUNT_HOURS_ACTUAL,

    case
        when wc.WEEK_END_DATE <= last_day(CURRENT_DATE, 'week')
            then HEADCOUNT_HOURS_ACTUAL
        else 0
        end as HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
        
    case
        when wc.ON_PARENTAL_LEAVE                       -- on parental leave = 0
            then 0.0
        when ifnull(wip.STANDARD_HOURS, 0) <> 0         -- STANDARD_HOURS is defined = FTE_HOURS / STANDARD_HOURS
            then wip.FTE_HOURS / wip.STANDARD_HOURS
        when ifnull(wip.FTE_HOURS, 0) <> 0              -- no standard hours and there is FTE_HOURS = 1
            then 1.0
        else 0.0                                        -- otherwise = 0
        end as HEADCOUNT_FTE_ACTUAL,

    case
        when wc.WEEK_END_DATE <= last_day(CURRENT_DATE, 'week')
            then HEADCOUNT_FTE_ACTUAL
        else 0
        end as HEADCOUNT_FTE_ACTUAL_NO_FUTURE,

    case
        when wc.ON_PARENTAL_LEAVE                       -- on parental leave = 0
            then 0.0
        when pbd.POSITION_CODE is null                  -- no budget = 0
            then 0.0
        when w.WORKER_FOR_FILLED_POSITION_ID is null    -- open position = 1
            then 1.0
        else HEADCOUNT_FTE_ACTUAL                       -- otherwise = HEADCOUNT_FTE_ACTUAL
        end as HEADCOUNT_FTE_BUDGET,                            

    case
        when wc.ON_PARENTAL_LEAVE                       -- on parental leave = 0
            then 0.0
        when pbd.POSITION_CODE is null                  -- no budget = 0
            then 0.0
        when w.WORKER_FOR_FILLED_POSITION_ID is null    -- open position = 1
            then 1.0
        else HEADCOUNT_FTE_ACTUAL                       -- otherwise = HEADCOUNT_FTE_ACTUAL
        end as HEADCOUNT_FTE_FORECAST,
    
    case
        when wc.ON_PARENTAL_LEAVE                       -- on parental leave = 0
            then 0.0
        when                                            -- not filled position and hourly plan = PRIMARY_COMPENSATION_BASIS
            w.WORKER_FOR_FILLED_POSITION_ID is null
            and w.PAY_PLAN_CODE = 'Hourly_Plan'
                then w.PRIMARY_COMPENSATION_BASIS
        when                                            -- not filled position and yearly plan = PRIMARY_COMPENSATION_BASIS / 52.0 / 38.0
            w.WORKER_FOR_FILLED_POSITION_ID is null
                then w.PRIMARY_COMPENSATION_BASIS / 52.0 / 38.0
        else 0.0                                        -- filled position = TODO: THIS SHOULD BE BASE_HOURLY_PAY??                
        end as HEADCOUNT_COST_ACTUAL,

    case
        when wc.WEEK_END_DATE <= last_day(CURRENT_DATE, 'week')
            then HEADCOUNT_COST_ACTUAL
        else 0
        end as HEADCOUNT_COST_ACTUAL_NO_FUTURE,
        
    case
        when wc.ON_PARENTAL_LEAVE then 0.0
        when HEADCOUNT_FTE_BUDGET > 0
            then pbd.SALARY_PLAN_BASE_AMOUNT / 52.0 / HEADCOUNT_FTE_BUDGET
        else 0.0
        end as HEADCOUNT_COST_BUDGET,
        
    case
        when wc.ON_PARENTAL_LEAVE then 0.0
        when HEADCOUNT_FTE_FORECAST > 0
            then pbd.SALARY_PLAN_BASE_AMOUNT / 52.0 / HEADCOUNT_FTE_FORECAST
        else 0.0
        end as HEADCOUNT_COST_FORECAST,    
        
    pbd.SALARY_PLAN_BASE_AMOUNT
    
from
    weekly_cte_with_compensation_and_extended_leave as wc
    inner join BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as w on
        wc.WORKER_ID = w.WORKER_ID
        and wc.POSITION_ID = w.POSITION_ID
    inner join BEGA_MASTER_DATA_{{ env }}.TRANSFORMED.CALENDAR c
        on wc.WEEK_END_DATE = c.DATE     
    left join BEGA_HR_DATA_{{ env }}.STAGING.POSITION_BUDGET as pbd on
        w.POSITION_CODE = pbd.POSITION_CODE
        --RS: 09/08/2024 Added join on fiscal year due to duplicated in POSITION_BUDGET table
        and c.FISCAL_YEAR = pbd.FISCAL_YEAR
    left join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_TRANSACTION as wip on
        w.WORKER_CODE = wip.WORKER_CODE
        and wc.WEEK_END_DATE = wip.WEEK_END_DATE
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k on
        k.PARAMETER_TYPE = 'UNLINKED_KEY' 
;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.HEADCOUNT(
	HEADCOUNT_KEY,
	WORKER_POSITION_SKEY,
	WEEK_END_DATE,
	WEEK_END_DATE_KEY,
	POSITION_ID,
	POSITION_SKEY,
	WORKER_SKEY,
	WORKER_ID,
	WORKER_MANAGER_SKEY,
	WORKER_MANAGER_ID,
	PAY_RATE_TYPE_KEY,
	PAY_FREQUENCY_KEY,
	POSITION_TYPE_NAME,
	POSITION_TYPE_KEY,
	LOCATION_SKEY,
	TEAM_SKEY,
	COST_CENTRE_SKEY,
	DEPARTMENT_SKEY,
	WORKER_SOURCE_KEY,
	LABOUR_PROVIDER_KEY,
	VERSION_TIMESTAMP,
	IS_CURRENT,
	HEADCOUNT_ACTUAL,
	HEADCOUNT_ACTUAL_NO_FUTURE,
	HEADCOUNT_HOURS_ACTUAL,
	HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
	HEADCOUNT_FTE_ACTUAL,
	HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
	HEADCOUNT_FTE_BUDGET,
	HEADCOUNT_FTE_FORECAST,
	HEADCOUNT_COST_ACTUAL,
	HEADCOUNT_COST_ACTUAL_NO_FUTURE,
	HEADCOUNT_COST_BUDGET,
	HEADCOUNT_COST_FORECAST
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

--
-- Internal
--
select
    MD5(CONCAT('I|', we.WORKER_ID, '|', we.POSITION_ID, '|', we.COST_CENTRE_ID, '|', we.WEEK_END_DATE)) as HEADCOUNT_KEY,
    we.WORKER_POSITION_SKEY,
    we.WEEK_END_DATE,
    we.WEEK_END_DATE_KEY,
    ifnull(we.POSITION_ID, k.PARAMETER_VALUE) as POSITION_ID,
    ifnull(we.POSITION_SKEY, md5(k.PARAMETER_VALUE)) as POSITION_SKEY,
    we.WORKER_SKEY,
    we.WORKER_ID,
    we.WORKER_MANAGER_SKEY,
    we.WORKER_MANAGER_ID,
    ifnull(we.PAY_RATE_TYPE_KEY, md5(k.PARAMETER_VALUE)) as PAY_RATE_TYPE_KEY,
    we.PAY_FREQUENCY_KEY,
    'Internal Worker' as POSITION_TYPE_NAME,
    md5(POSITION_TYPE_NAME) as POSITION_TYPE_KEY,
    we.LOCATION_SKEY,
    we.TEAM_SKEY,
    we.COST_CENTRE_SKEY,
    we.DEPARTMENT_SKEY,

    we.WORKER_SOURCE_KEY,
    we.LABOUR_PROVIDER_KEY,

    we.VERSION_TIMESTAMP,
    we.IS_CURRENT,

    we.HEADCOUNT_ACTUAL,
    we.HEADCOUNT_ACTUAL_NO_FUTURE,

    we.HEADCOUNT_HOURS_ACTUAL,
    we.HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
    
    we.HEADCOUNT_FTE_ACTUAL,
    we.HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
    we.HEADCOUNT_FTE_BUDGET,
    we.HEADCOUNT_FTE_FORECAST,
    
    null as HEADCOUNT_COST_ACTUAL,              -- TODO-FUTURE: populate
    null as HEADCOUNT_COST_ACTUAL_NO_FUTURE,    -- TODO-FUTURE: populate
    null as HEADCOUNT_COST_BUDGET,              -- TODO-FUTURE: populate
    null as HEADCOUNT_COST_FORECAST             -- TODO-FUTURE: populate
    
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_POSITION_INTERNAL as we
    
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k on
        k.PARAMETER_TYPE = 'UNLINKED_KEY'

--
union all
--

--
-- External
--
select 
    MD5(CONCAT('E|', e.WORKER_SKEY, '|0|0|', e.END_OF_WEEK_DATE)) as HEADCOUNT_KEY,
    e.WORKER_POSITION_SKEY,
    e.END_OF_WEEK_DATE as WEEK_END_DATE,
    to_char(e.END_OF_WEEK_DATE, 'YYYYMMDD') as WEEK_END_DATE_KEY,    
    k.PARAMETER_VALUE as POSITION_ID,
    md5(k.PARAMETER_VALUE) as POSITION_SKEY,
    e.WORKER_SKEY,
    e.WORKER_ID,
    e.WORKER_MANAGER_SKEY,
    e.WORKER_MANAGER_ID,
    ifnull(e.PAY_RATE_TYPE_KEY, md5(k.PARAMETER_VALUE)) as PAY_RATE_TYPE_KEY,
    md5(k.PARAMETER_VALUE) as PAY_FREQUENCY_KEY,
    'External Worker' as POSITION_TYPE_NAME,
    md5(POSITION_TYPE_NAME) as POSITION_TYPE_KEY,
    e.LOCATION_SKEY,
    e.TEAM_SKEY,
    e.COST_CENTRE_SKEY,
    e.DEPARTMENT_SKEY,

    e.WORKER_SOURCE_KEY,
    e.LABOUR_PROVIDER_KEY,
    
    e.VERSION_TIMESTAMP,
    e.IS_CURRENT,
    
    e.HEADCOUNT_ACTUAL,
    e.HEADCOUNT_ACTUAL_NO_FUTURE,

    e.HEADCOUNT_HOURS_ACTUAL,
    e.HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
    
    e.HEADCOUNT_FTE_ACTUAL,
    e.HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
    0 as HEADCOUNT_FTE_BUDGET,          -- TODO-FUTURE: there is no Budget for externals: confirm and document
    0 as HEADCOUNT_FTE_FORECAST,        -- TODO-FUTURE: there is no Forecast for externals: confirm and document

    null as HEADCOUNT_COST_ACTUAL,      -- TODO-FUTURE: populate
    null as HEADCOUNT_COST_ACTUAL_NO_FUTURE,      -- TODO-FUTURE: populate
    null as HEADCOUNT_COST_BUDGET,      -- TODO-FUTURE: populate
    null as HEADCOUNT_COST_FORECAST     -- TODO-FUTURE: populate
    
from 
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_POSITION_EXTERNAL as e
    
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k on
        k.PARAMETER_TYPE = 'UNLINKED_KEY'
where
    e.WORKER_EXISTS_IN_INTERNAL = false

--
union all
--

--
-- Vacant Positions
--
-- RS: 09/08/2024 Deduplication for vacant positions (by adding DISTINCT)
select distinct 
    MD5(CONCAT('P|0|', p.POSITION_SKEY, '|0|', p.WEEK_END_DATE)) as HEADCOUNT_KEY,
    p.WORKER_POSITION_SKEY,
    p.WEEK_END_DATE,
    p.WEEK_END_DATE_KEY,
    ifnull(p.POSITION_ID, k.PARAMETER_VALUE) as POSITION_ID,
    ifnull(p.POSITION_SKEY, md5(k.PARAMETER_VALUE)) as POSITION_SKEY,
    p.WORKER_SKEY,
    p.WORKER_ID,
    p.WORKER_MANAGER_SKEY,
    p.WORKER_MANAGER_ID,
    
    ifnull(p.PAY_RATE_TYPE_KEY, md5(k.PARAMETER_VALUE)) as PAY_RATE_TYPE_KEY,
    md5(k.PARAMETER_VALUE) as PAY_FREQUENCY_KEY,
    'Vacant Position' as POSITION_TYPE_NAME,
    md5(POSITION_TYPE_NAME) as POSITION_TYPE_KEY,
    p.LOCATION_SKEY,
    p.TEAM_SKEY,
    p.COST_CENTRE_SKEY,
    p.DEPARTMENT_SKEY,

    p.WORKER_SOURCE_KEY,
    p.LABOUR_PROVIDER_KEY,
    
    p.VERSION_TIMESTAMP,
    p.IS_CURRENT,
    
    p.HEADCOUNT_ACTUAL,
    p.HEADCOUNT_ACTUAL_NO_FUTURE,

    p.HEADCOUNT_HOURS_ACTUAL,
    p.HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
    
    p.HEADCOUNT_FTE_ACTUAL,
    p.HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
    p.HEADCOUNT_FTE_BUDGET,
    p.HEADCOUNT_FTE_FORECAST,

    null as HEADCOUNT_COST_ACTUAL,              -- TODO-FUTURE: populate
    null as HEADCOUNT_COST_ACTUAL_NO_FUTURE,    -- TODO-FUTURE: populate
    null as HEADCOUNT_COST_BUDGET,              -- TODO-FUTURE: populate
    null as HEADCOUNT_COST_FORECAST             -- TODO-FUTURE: populate
    
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.POSITION_VACANT as p
    
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as k on
        k.PARAMETER_TYPE = 'UNLINKED_KEY'
        
;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.POSITION_TYPE(
	POSITION_TYPE_KEY,
	POSITION_TYPE_NAME
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select distinct
    POSITION_TYPE_KEY,
    POSITION_TYPE_NAME
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.HEADCOUNT

;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.LEAVE_BALANCE(
	LEAVE_BALANCE_KEY,
	WEEK_END_DATE_KEY,
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	WORKER_CODE,
	POSITION_SKEY,
	LOCATION_SKEY,
	TEAM_SKEY,
	COST_CENTRE_SKEY,
	DEPARTMENT_SKEY,
	LEAVE_TYPE_ID,
	LEAVE_TYPE_NAME,
	PAY_RATE_TYPE_KEY,
	POSITION_TYPE_KEY,
	PAY_FREQUENCY_KEY,
	LEAVE_TYPE_KEY,
	LEAVE_BALANCE_HOURS,
	LEAVE_BALANCE_DAYS,
	LEAVE_BALANCE_WEEKS,
	LEAVE_BALANCE_WEEKS_THRESHOLD,
	LEAVE_BALANCE_COST,
	PARAM_STATUS_LOW_VARIANCE_TO_LAST_REPORT,
	PARAM_STATUS_HIGH_VARIANCE_TO_LAST_REPORT,
	VERSION_TIMESTAMP,
	IS_CURRENT
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as


with 
    -- Weeks where we have history from the Payroll Leave Calculation
    distinct_weeks_cte as (
        select distinct
            min(
                last_day(
                    _FIVETRAN_START, 
                    'week'
                    )
                ) as MIN_WEEK_END_DATE
        from BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_CALCULATION_HISTORY
        ),

    -- Worker for the weeks where we have history from the Payroll Leave Calculation
    worker_week_cte as (
        select 
            wp.WORKER_CODE,
            wp.WEEK_END_DATE,
            MAX_BY(wp.WORKER_SKEY, wp.VERSION_TIMESTAMP)                          as WORKER_SKEY,
            MAX_BY(wp.WORKER_POSITION_SKEY, wp.VERSION_TIMESTAMP)                 as WORKER_POSITION_SKEY,
            MAX_BY(wp.POSITION_SKEY, wp.VERSION_TIMESTAMP)                        as POSITION_SKEY,
            MAX_BY(wp.LOCATION_SKEY, wp.VERSION_TIMESTAMP)                        as LOCATION_SKEY,
            MAX_BY(wp.TEAM_SKEY, wp.VERSION_TIMESTAMP)                            as TEAM_SKEY,
            MAX_BY(wp.COST_CENTRE_SKEY, wp.VERSION_TIMESTAMP)                     as COST_CENTRE_SKEY,
            MAX_BY(wp.DEPARTMENT_SKEY, wp.VERSION_TIMESTAMP)                      as DEPARTMENT_SKEY,
            MAX_BY(wp.PAY_RATE_TYPE, wp.VERSION_TIMESTAMP)                        as PAY_RATE_TYPE,
            MAX_BY(wp.PAY_RATE_TYPE_KEY, wp.VERSION_TIMESTAMP)                    as PAY_RATE_TYPE_KEY,
            MAX_BY(wp.COMPENSATION_TOTAL_BASE_PAY, wp.VERSION_TIMESTAMP)          as COMPENSATION_TOTAL_BASE_PAY,
            MAX_BY(wp.VERSION_TIMESTAMP, wp.VERSION_TIMESTAMP)                    as VERSION_TIMESTAMP
     
        from 
            BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_POSITION_INTERNAL as wp
            inner join distinct_weeks_cte as w on
                wp.WEEK_END_DATE >= w.MIN_WEEK_END_DATE
        group by all
        ),

    leave_balance_weekly_latest_cte as (
        select 
            ww.WEEK_END_DATE,
            ww.WORKER_CODE,
            lc.LEAVE_ID,
            lc.leave_type_name,
            max(_FIVETRAN_START)                                                  as VERSION_TIMESTAMP,
            max_by(PAY_FREQUENCY_KEY, _FIVETRAN_START)                            as PAY_FREQUENCY_KEY,
            -- max_by(LOCATION_ID, _FIVETRAN_START) as LOCATION_ID,     -- TODO: will be used to get the standard hours per location
            max_by(LEAVE_TYPE_ID, _FIVETRAN_START)                                as LEAVE_TYPE_ID,
            max_by(POST_ENTITLEMENT_HOURS, _FIVETRAN_START)                       as POST_ENTITLEMENT_HOURS,
            max_by(TOTAL_ENTITLEMENT_HOURS, _FIVETRAN_START)                      as TOTAL_ENTITLEMENT_HOURS,
            max_by(TOTAL_ENTITLEMENT_DAYS, _FIVETRAN_START)                       as TOTAL_ENTITLEMENT_DAYS
        from
            worker_week_cte as ww
            inner join BEGA_HR_DATA_{{ env }}.STAGING.PAYROLL_LEAVE_CALCULATION_HISTORY as lc on
                lc.WORKER_CODE = ww.WORKER_CODE
                and lc._FIVETRAN_START <= ww.WEEK_END_DATE
                and lc.leave_code <> 'Undefined'
        group by all
        )
        
     --   SELECT * FROM leave_balance_weekly_latest_cte
        ,

    leave_balance_weekly_sum_cte as (       -- 21464
        select 
            WEEK_END_DATE,
            WORKER_CODE,
            LEAVE_TYPE_ID,
            leave_type_name,
            max(VERSION_TIMESTAMP) as VERSION_TIMESTAMP,
            max_by(PAY_FREQUENCY_KEY, VERSION_TIMESTAMP) as PAY_FREQUENCY_KEY,
            sum(POST_ENTITLEMENT_HOURS) as POST_ENTITLEMENT_HOURS,
            sum(TOTAL_ENTITLEMENT_HOURS) as TOTAL_ENTITLEMENT_HOURS,
            sum(TOTAL_ENTITLEMENT_DAYS) as TOTAL_ENTITLEMENT_DAYS
        from leave_balance_weekly_latest_cte
        group by all
        )

SELECT
    MD5(
        CONCAT(
            ww.WEEK_END_DATE,
            '|',
            ww.WORKER_CODE,
            '|',
            lbw.LEAVE_TYPE_ID
            )
        ) as LEAVE_BALANCE_KEY,

    to_char(ww.WEEK_END_DATE, 'YYYYMMDD')                                       as WEEK_END_DATE_KEY,
    ww.WORKER_POSITION_SKEY,
    ww.WORKER_SKEY,
    ww.WORKER_CODE,
    
    ww.POSITION_SKEY,
    ww.LOCATION_SKEY,
    ww.TEAM_SKEY,
    ww.COST_CENTRE_SKEY,
    ww.DEPARTMENT_SKEY,
    lbw.leave_type_id,
    lbw.leave_type_name,
    ifnull(ww.PAY_RATE_TYPE_KEY, md5(par_unlinked.PARAMETER_VALUE))             as PAY_RATE_TYPE_KEY,
    
    md5('Internal Worker') as POSITION_TYPE_KEY,
	lbw.PAY_FREQUENCY_KEY,
    
	md5(to_varchar(lbw.LEAVE_TYPE_ID))                                          as LEAVE_TYPE_KEY,

    --Long Service Leave rule: if [Post Entitlement Hours] = 0 then 0 (do not show), otherwise [Total Entitlement Hours]
    ifnull(case 
                when lbw.LEAVE_TYPE_ID = cast(par_longservice.parameter_value as integer)                    -- Long Service Leave = 2
                    and ifnull(lbw.POST_ENTITLEMENT_HOURS, 0.0) = 0.0
                        then 0.0
            else ifnull(lbw.TOTAL_ENTITLEMENT_HOURS, 0.0)
                end 
            ,0.0)                                                               as LEAVE_BALANCE_HOURS,

    ifnull(case 
                when lbw.LEAVE_TYPE_ID = cast(par_longservice.parameter_value as integer)                    -- Long Service Leave = 2
                    and ifnull(lbw.POST_ENTITLEMENT_HOURS, 0.0) = 0.0
                        then 0.0
            else ifnull(lbw.TOTAL_ENTITLEMENT_DAYS, 0.0)
                end 
            ,0.0)                                                               as LEAVE_BALANCE_DAYS,
    
    ifnull(case 
                when lbw.LEAVE_TYPE_ID = cast(par_longservice.parameter_value as integer)                    -- Long Service Leave = 2
                    and ifnull(lbw.POST_ENTITLEMENT_HOURS, 0.0) = 0.0
                        then 0.0
            else ifnull(lbw.TOTAL_ENTITLEMENT_HOURS, 0.0) / 38.0
                end 
            ,0.0)                                                               as LEAVE_BALANCE_WEEKS,
     
     cast(par_threshold.PARAMETER_VALUE as integer)                             as LEAVE_BALANCE_WEEKS_THRESHOLD,

        -- ww.COMPENSATION_TOTAL_BASE_PAY,
        -- ifnull(lbw.POST_ENTITLEMENT_HOURS, 0.0) as POST_ENTITLEMENT_HOURS,
        -- lbw.LEAVE_TYPE_ID,


    --------------------
    -- COST CALCULATIONS
    --------------------

    -- Calculate Salaried Long Service Leave
     case    
        when ww.PAY_RATE_TYPE_KEY = MD5(par_salaried.parameter_value)                       -- PAY_RATE_TYPE_KEY = 'Salaried' 
             and lbw.LEAVE_TYPE_ID = cast(par_longservice.parameter_value as integer)       -- Long Service Leave = 2
                and ifnull(lbw.POST_ENTITLEMENT_HOURS, 0.0) = 0.0                           -- Post Entitlement = zero (do not show)
            then 0.0                                                                        -- Set to zero long service leave cost

        when ww.PAY_RATE_TYPE_KEY = MD5(par_salaried.parameter_value)                       -- PAY_RATE_TYPE_KEY = 'Salaried' 
            and lbw.LEAVE_TYPE_ID = cast(par_longservice.parameter_value as integer)        -- Long Service Leave = 2
                and ifnull(lbw.POST_ENTITLEMENT_HOURS, 0.0) <> 0.0                          -- Post Entitlement <> zero (show)
            then ifnull((ww.COMPENSATION_TOTAL_BASE_PAY / 52.0 / 38.0), 0.0)                -- TODO: replace by the parameter table by location
                * 
                TOTAL_ENTITLEMENT_HOURS
              
    -- Calculate Salaried Non Long Service Leave Types
        when ww.PAY_RATE_TYPE_KEY = MD5(par_salaried.parameter_value)                       -- PAY_RATE_TYPE_KEY = 'Salaried' 
            then ifnull((ww.COMPENSATION_TOTAL_BASE_PAY / 52.0 / 38.0), 0.0)                -- TODO: replace by the parameter table by location
                * 
                LEAVE_BALANCE_HOURS

    -- Calculate non salaried workers
        else                                                                                -- Non Salaried workers do not need a weekly conversion
           ifnull(ww.COMPENSATION_TOTAL_BASE_PAY, 0.0) 
                * 
                LEAVE_BALANCE_HOURS

        end                                                                     as LEAVE_BALANCE_COST,  -- Indicative Cost only

    cast(par_low.PARAMETER_VALUE as float)                                      as PARAM_STATUS_LOW_VARIANCE_TO_LAST_REPORT,
    cast(par_high.PARAMETER_VALUE as float)                                     as PARAM_STATUS_HIGH_VARIANCE_TO_LAST_REPORT,

    ifnull(lbw.VERSION_TIMESTAMP, ww.VERSION_TIMESTAMP)                         as VERSION_TIMESTAMP,
    true as IS_CURRENT

from 
    worker_week_cte as ww
    inner join leave_balance_weekly_sum_cte as lbw on
        ww.WORKER_CODE = lbw.WORKER_CODE
        and ww.WEEK_END_DATE = lbw.WEEK_END_DATE
        
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_unlinked on
        par_unlinked.PARAMETER_TYPE = 'UNLINKED_KEY'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_salaried on
        par_salaried.PARAMETER_TYPE = 'WORKER_PAY_RATE_TYPE_SALARIED'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_low on
        par_low.PARAMETER_TYPE = 'LEAVE_BALANCE_STATUS_LOW_VARIANCE_TO_LAST_REPORT'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_high on
        par_high.PARAMETER_TYPE = 'LEAVE_BALANCE_STATUS_HIGH_VARIANCE_TO_LAST_REPORT'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_threshold on
        par_threshold.PARAMETER_TYPE = 'LEAVE_BALANCE_WEEKS_THRESHOLD'
    inner join BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_longservice on
        par_longservice.PARAMETER_TYPE = 'LONG_SERVICE_LEAVE'

;

create or replace dynamic table BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_SOURCE(
	WORKER_SOURCE_KEY,
	WORKER_SOURCE_NAME
) target_lag = '2 hours' refresh_mode = AUTO initialize = ON_CREATE warehouse = COMPUTE_WH
 as

select distinct
    WORKER_SOURCE_KEY,
    WORKER_SOURCE_NAME
from 
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_INTERNAL_WIDE as w
--
union all
--
select distinct
    WORKER_SOURCE_KEY,
    WORKER_SOURCE_NAME
from 
    BEGA_HR_DATA_{{ env }}.STAGING.WORKER_EXTERNAL_WIDE as w
--
union all
--
select
    MD5(n.PARAMETER_VALUE) as WORKER_SOURCE_KEY,
    n.PARAMETER_VALUE as WORKER_SOURCE_NAME
from
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as n
where
    n.PARAMETER_TYPE = 'UNLINKED_NAME'
--
union all
--
select distinct
    md5(par_int.PARAMETER_VALUE),
    par_int.PARAMETER_VALUE
from 
    BEGA_HR_DATA_{{ env }}.CONTROL.PARAMETER as par_int
where
    par_int.PARAMETER_TYPE = 'OPEN_POSITION_WORKER_PROVIDER_SOURCE'

;

create or replace schema BEGA_HR_DATA_{{ env }}.REPORTING;

create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_COST_CENTRE(
	COST_CENTRE_SKEY,
	COST_CENTRE_ID,
	COST_CENTRE_NAME,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) as

/*
TODO: Think about dynamic tables, varying the environment: SPLIT_PART(CURRENT_DATABASE(), '_', -1)
*/

select
    COST_CENTRE_SKEY,
    COST_CENTRE_ID,
    COST_CENTRE_NAME,
    VERSION_TIMESTAMP,
    IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.COST_CENTRE as wew
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_DEPARTMENT(
	DEPARTMENT_SKEY,
	DEPARTMENT_ID,
	DEPARTMENT_NAME,
	DEPARTMENT_PATH,
	DEPARTMENT_PATH_ID,
	SUPERIOR_DEPARTMENT_ID,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) as

/*
TODO: Think about dynamic tables, varying the environment: SPLIT_PART(CURRENT_DATABASE(), '_', -1)
*/

select
    DEPARTMENT_SKEY,
    DEPARTMENT_ID,
    DEPARTMENT_NAME,
    
    DEPARTMENT_PATH,
    DEPARTMENT_PATH_ID,
    SUPERIOR_DEPARTMENT_ID,
    
    VERSION_TIMESTAMP,
    IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.DEPARTMENT
    
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_EMPLOYMENT_TYPE(
	EMPLOYMENT_TYPE_SKEY,
	EMPLOYMENT_TYPE_ID,
	EMPLOYMENT_TYPE,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) as

/*
TODO: Think about dynamic tables, varying the environment: SPLIT_PART(CURRENT_DATABASE(), '_', -1)
*/

select
    EMPLOYMENT_TYPE_SKEY,
    EMPLOYMENT_TYPE_ID,
    EMPLOYMENT_TYPE,
    VERSION_TIMESTAMP,
    IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.EMPLOYMENT_TYPE as wew
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_LABOUR_PROVIDER(
	LABOUR_PROVIDER_KEY,
	LABOUR_PROVIDER_NAME,
	IS_CURRENT_SKEY
) as

select
    a.LABOUR_PROVIDER_KEY,
    a.LABOUR_PROVIDER_NAME,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.LABOUR_PROVIDER as a
;

create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_LOCATION(
	LOCATION_SKEY,
	LOCATION_ID,
	LOCATION_NAME,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) as

/*
TODO: Think about dynamic tables, varying the environment: SPLIT_PART(CURRENT_DATABASE(), '_', -1)
*/

select
    LOCATION_SKEY,
    LOCATION_ID,
    LOCATION_NAME,
    VERSION_TIMESTAMP,
    IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.LOCATION as wew
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_PAY_FREQUENCY(
	PAY_FREQUENCY_KEY,
	PAY_FREQUENCY_NAME
) as

select distinct
    PAY_FREQUENCY_KEY,
    PAY_FREQUENCY_NAME
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.PAY_FREQUENCY as w
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_PAY_LEVEL(
	PAY_LEVEL_SKEY,
	PAY_LEVEL_ID,
	PAY_LEVEL_CODE,
	PAY_LEVEL_DESCRIPTION,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) as

/*
TODO: Think about dynamic tables, varying the environment: SPLIT_PART(CURRENT_DATABASE(), '_', -1)
*/

select
    PAY_LEVEL_SKEY,
    PAY_LEVEL_ID,
    PAY_LEVEL_CODE,
    PAY_LEVEL_DESCRIPTION,
    VERSION_TIMESTAMP,
    IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.PAY_LEVEL as wew
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_PAY_POINT(
	PAY_POINT_SKEY,
	PAY_POINT_ID,
	PAY_POINT,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) as

/*
TODO: Think about dynamic tables, varying the environment: SPLIT_PART(CURRENT_DATABASE(), '_', -1)
*/

select
    PAY_POINT_SKEY,
    PAY_POINT_ID,
    PAY_POINT,
    VERSION_TIMESTAMP,
    IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.PAY_POINT as wew
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_PAY_RATE_TYPE(
	PAY_RATE_TYPE_KEY,
	PAY_RATE_TYPE_NAME
) as

select distinct
    PAY_RATE_TYPE_KEY,
    PAY_RATE_TYPE_NAME
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.PAY_RATE_TYPE as w
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_POSITION_TYPE(
	POSITION_TYPE_KEY,
	POSITION_TYPE_NAME
) as

select
    POSITION_TYPE_KEY,
    POSITION_TYPE_NAME
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.POSITION_TYPE
    
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_TEAM(
	TEAM_SKEY,
	TEAM_ID,
	TEAM_NAME,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) as

select
    TEAM_SKEY,
    TEAM_ID,
    TEAM_NAME,
    VERSION_TIMESTAMP,
    IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.TEAM as wew
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_WORKER(
	WORKER_SKEY,
	WORKER_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	VERSION_TIMESTAMP,
	IS_CURRENT
) as

/*
TODO: Think about dynamic tables, varying the environment: SPLIT_PART(CURRENT_DATABASE(), '_', -1)
*/

select
    WORKER_SKEY,
	WORKER_CODE,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
    VERSION_TIMESTAMP,
    IS_CURRENT
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_WORKER_POSITION(
	WORKER_POSITION_SKEY,
	POSITION_CODE,
	WORKER_CODE,
	WORKER_POSITION_DESCRIPTION,
	POSITION_CLOSED,
	VERSION_TIMESTAMP,
	IS_CURRENT_SKEY
) as

select
    WORKER_POSITION_SKEY,
    POSITION_CODE,
    WORKER_CODE,
    WORKER_POSITION_DESCRIPTION,
    POSITION_CLOSED,
    
    VERSION_TIMESTAMP,
    IS_CURRENT_SKEY

from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_POSITION
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.DIM_WORKER_SOURCE(
	WORKER_SOURCE_KEY,
	WORKER_SOURCE_NAME,
	IS_CURRENT_SKEY
) as

select
    a.WORKER_SOURCE_KEY,
    a.WORKER_SOURCE_NAME,
    true as IS_CURRENT_SKEY
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.WORKER_SOURCE as a
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.FACT_HEADCOUNT(
	HEADCOUNT_KEY,
	WEEK_END_DATE_KEY,
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	WORKER_MANAGER_SKEY,
	WORKER_SOURCE_KEY,
	LABOUR_PROVIDER_KEY,
	POSITION_SKEY,
	LOCATION_SKEY,
	TEAM_SKEY,
	COST_CENTRE_SKEY,
	DEPARTMENT_SKEY,
	PAY_RATE_TYPE_KEY,
	PAY_FREQUENCY_KEY,
	POSITION_TYPE_KEY,
	HEADCOUNT_ACTUAL,
	HEADCOUNT_ACTUAL_NO_FUTURE,
	HEADCOUNT_HOURS_ACTUAL,
	HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
	HEADCOUNT_FTE_ACTUAL,
	HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
	HEADCOUNT_FTE_BUDGET,
	HEADCOUNT_FTE_FORECAST,
	HEADCOUNT_COST_ACTUAL,
	HEADCOUNT_COST_ACTUAL_NO_FUTURE,
	HEADCOUNT_COST_BUDGET,
	HEADCOUNT_COST_FORECAST,
	VERSION_TIMESTAMP,
	IS_CURRENT
) as

select
    -- Key
    HEADCOUNT_KEY,
    
    -- Dimensions
    WEEK_END_DATE_KEY,
    WORKER_POSITION_SKEY,
    WORKER_SKEY,
    WORKER_MANAGER_SKEY,
    WORKER_SOURCE_KEY,
	LABOUR_PROVIDER_KEY,
    POSITION_SKEY,
    LOCATION_SKEY,
    TEAM_SKEY,
    COST_CENTRE_SKEY,
    DEPARTMENT_SKEY,
    PAY_RATE_TYPE_KEY,
    PAY_FREQUENCY_KEY,
    POSITION_TYPE_KEY,
    
    -- Metrics -- TODO: finish all the below metrics
    HEADCOUNT_ACTUAL,
    HEADCOUNT_ACTUAL_NO_FUTURE,
    HEADCOUNT_HOURS_ACTUAL,
    HEADCOUNT_HOURS_ACTUAL_NO_FUTURE,
    HEADCOUNT_FTE_ACTUAL,
    HEADCOUNT_FTE_ACTUAL_NO_FUTURE,
    HEADCOUNT_FTE_BUDGET,
    HEADCOUNT_FTE_FORECAST,
    HEADCOUNT_COST_ACTUAL,
    HEADCOUNT_COST_ACTUAL_NO_FUTURE,
    HEADCOUNT_COST_BUDGET,
    HEADCOUNT_COST_FORECAST,

    -- Metadata
    VERSION_TIMESTAMP,
    IS_CURRENT
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.HEADCOUNT
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.FACT_LEAVE_BALANCE(
	LEAVE_BALANCE_KEY,
	WEEK_END_DATE_KEY,
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	POSITION_SKEY,
	LOCATION_SKEY,
	TEAM_SKEY,
	COST_CENTRE_SKEY,
	DEPARTMENT_SKEY,
	PAY_RATE_TYPE_KEY,
	POSITION_TYPE_KEY,
	PAY_FREQUENCY_KEY,
	LEAVE_TYPE_KEY,
	LEAVE_BALANCE_HOURS,
	LEAVE_BALANCE_DAYS,
	LEAVE_BALANCE_WEEKS,
	LEAVE_BALANCE_WEEKS_THRESHOLD,
	LEAVE_BALANCE_COST,
	PARAM_STATUS_LOW_VARIANCE_TO_LAST_REPORT,
	PARAM_STATUS_HIGH_VARIANCE_TO_LAST_REPORT,
	VERSION_TIMESTAMP,
	IS_CURRENT
) as

select
    -- Key
    LEAVE_BALANCE_KEY,
    
    -- Dimensions
    WEEK_END_DATE_KEY,
    WORKER_POSITION_SKEY,
    WORKER_SKEY,
    POSITION_SKEY,
    LOCATION_SKEY,
    TEAM_SKEY,
    COST_CENTRE_SKEY,
    DEPARTMENT_SKEY,
    PAY_RATE_TYPE_KEY,
    
    POSITION_TYPE_KEY,
    PAY_FREQUENCY_KEY,
    LEAVE_TYPE_KEY,
    
    -- Metrics
    LEAVE_BALANCE_HOURS,
    LEAVE_BALANCE_DAYS,
    LEAVE_BALANCE_WEEKS,
    LEAVE_BALANCE_WEEKS_THRESHOLD,
    LEAVE_BALANCE_COST,
    PARAM_STATUS_LOW_VARIANCE_TO_LAST_REPORT,
    PARAM_STATUS_HIGH_VARIANCE_TO_LAST_REPORT,

    -- Metadata
    VERSION_TIMESTAMP,
    IS_CURRENT
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.LEAVE_BALANCE
    

-- SELECT * FROM BEGA_HR_DATA_{{ env }}.REPORTING.FACT_LEAVE_BALANCE
-- WHERE WORKER_SKEY = '2c444c539d20f22968e14e3e288848e7'
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.FACT_WAGES_VS_BUDGET(
	FACT_WAGES_VS_BUDGET_KEY,
	WEEK_END_DATE_KEY,
	WORKER_POSITION_SKEY,
	WORKER_SKEY,
	POSITION_SKEY,
	LOCATION_SKEY,
	TEAM_SKEY,
	COST_CENTRE_SKEY,
	DEPARTMENT_SKEY,
	PAY_RATE_TYPE_KEY,
	PAY_FREQUENCY_KEY,
	POSITION_TYPE_KEY,
	SALARY_ACTUALS,
	SALARY_ACTUALS_NO_FUTURE,
	SALARY_BUDGET,
	SALARY_FORECAST,
	ALLOWANCE_ACTUALS,
	ALLOWANCE_ACTUALS_NO_FUTURE,
	ALLOWANCE_BUDGET,
	ALLOWANCE_FORECAST,
	PAYROLL_TAX_ACTUALS,
	PAYROLL_TAX_ACTUALS_NO_FUTURE,
	PAYROLL_TAX_BUDGET,
	PAYROLL_TAX_FORECAST,
	ON_COSTS_AL_ACTUALS,
	ON_COSTS_AL_ACTUALS_NO_FUTURE,
	ON_COSTS_AL_BUDGET,
	ON_COSTS_AL_FORECAST,
	ON_COSTS_LSL_ACTUALS,
	ON_COSTS_LSL_ACTUALS_NO_FUTURE,
	ON_COSTS_LSL_BUDGET,
	ON_COSTS_LSL_FORECAST,
	ON_COSTS_SUPER_ACTUALS,
	ON_COSTS_SUPER_ACTUALS_NO_FUTURE,
	ON_COSTS_SUPER_BUDGET,
	ON_COSTS_SUPER_FORECAST,
	NORMAL_HOURS_ACTUALS,
	NORMAL_HOURS_ACTUALS_NO_FUTURE,
	NORMAL_HOURS_BUDGET,
	NORMAL_HOURS_FORECAST,
	OVERTIME_HOURS_ACTUALS,
	OVERTIME_HOURS_ACTUALS_NO_FUTURE,
	OVERTIME_HOURS_BUDGET,
	OVERTIME_HOURS_FORECAST,
	OVERTIME_COST_ACTUALS,
	OVERTIME_COST_ACTUALS_NO_FUTURE,
	OVERTIME_COST_BUDGET,
	OVERTIME_COST_FORECAST,
	ON_COSTS_ACTUALS,
	ON_COSTS_ACTUALS_NO_FUTURE,
	ON_COSTS_BUDGET,
	ON_COSTS_FORECAST,
	VERSION_TIMESTAMP,
	IS_CURRENT
) as

/*
TODO:   This is a temporary solution, using arbitrary tables, with some mocked values
        for the purpose of sharing a structure with Michael and Jay.
        The columns shouldn't change, but all logic and source tables will.
*/

select
    -- Key
    MD5(pwb.WAGES_BUDGET_KEY) as FACT_WAGES_VS_BUDGET_KEY,
    
    -- Dimensions
    pwb.WEEK_END_DATE_KEY,
    --pwb.END_OF_WEEK_DATE,
    pwb.WORKER_POSITION_SKEY,
    pwb.WORKER_SKEY,
    pwb.POSITION_SKEY,
    pwb.LOCATION_SKEY,
    pwb.TEAM_SKEY,
    pwb.COST_CENTRE_SKEY,
    pwb.DEPARTMENT_SKEY,
    pwb.PAY_RATE_TYPE_KEY,
    pwb.PAY_FREQUENCY_KEY,
    -- pwb.POSITION_TYPE_NAME,
    pwb.POSITION_TYPE_KEY,     

    -- Metrics -- TODO: finish all the below metrics
    pwb.SALARY_ACTUALS,      
    pwb.SALARY_ACTUALS_NO_FUTURE,
    pwb.SALARY_BUDGET,
    pwb.SALARY_FORECAST, -- DYNAMIC??
    
	pwb.ALLOWANCE_ACTUALS,          
    pwb.ALLOWANCE_ACTUALS_NO_FUTURE,
	pwb.ALLOWANCE_BUDGET,
	pwb.ALLOWANCE_FORECAST, -- DYNAMIC??
    
	pwb.PAYROLL_TAX_ACTUALS,  
    pwb.PAYROLL_TAX_ACTUALS_NO_FUTURE,
	pwb.PAYROLL_TAX_BUDGET,
	pwb.PAYROLL_TAX_FORECAST,    -- DYNAMIC??
    
	pwb.ON_COSTS_AL_ACTUALS,
    pwb.ON_COSTS_AL_ACTUALS_NO_FUTURE,
	pwb.ON_COSTS_AL_BUDGET,
	pwb.ON_COSTS_AL_FORECAST,   -- DYNAMIC??
    
	pwb.ON_COSTS_LSL_ACTUALS,
    pwb.ON_COSTS_LSL_ACTUALS_NO_FUTURE,
	pwb.ON_COSTS_LSL_BUDGET,
	pwb.ON_COSTS_LSL_FORECAST,  -- DYNAMIC??
    
    pwb.ON_COSTS_SUPER_ACTUALS,
    pwb.ON_COSTS_SUPER_ACTUALS_NO_FUTURE,
    pwb.ON_COSTS_SUPER_BUDGET,
    pwb.ON_COSTS_SUPER_FORECAST, -- dynamic??
    
    pwb.NORMAL_HOURS_ACTUALS,
    pwb.NORMAL_HOURS_ACTUALS_NO_FUTURE,
    pwb.NORMAL_HOURS_BUDGET, -- to do once defined
    pwb.NORMAL_HOURS_FORECAST, -- to do once defined
    
    pwb.OVERTIME_HOURS_ACTUALS,
    pwb.OVERTIME_HOURS_ACTUALS_NO_FUTURE,
    pwb.OVERTIME_HOURS_BUDGET,  -- TO DO ONCE DEFINED
    pwb.OVERTIME_HOURS_FORECAST, -- TO DO ONCE DEFINED
    
    pwb.OVERTIME_COST_ACTUALS,
    pwb.OVERTIME_COST_ACTUALS_NO_FUTURE,
    pwb.OVERTIME_COST_BUDGET, -- TO DO ONCE DEFINED
    pwb.OVERTIME_COST_FORECAST, -- TO DO ONCE DEFINED
    
    pwb.ON_COSTS_ACTUALS,
    pwb.ON_COSTS_ACTUALS_NO_FUTURE,
    pwb.ON_COSTS_BUDGET,
    pwb.ON_COSTS_FORECAST,

    -- Metadata
    pwb.VERSION_TIMESTAMP,
    pwb.IS_CURRENT
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.POSITION_WAGES_AND_BUDGET as pwb
    
;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.META_REPORT_METADATA(
	REPORT_NAME,
	METADATA_TYPE,
	METADATA_VALUE
) as

/*
TODO: Think about dynamic tables, varying the environment: SPLIT_PART(CURRENT_DATABASE(), '_', -1)
*/

select
    *
from
    BEGA_HR_DATA_{{ env }}.CONTROL.REPORT_METADATA

;
create or replace view BEGA_HR_DATA_{{ env }}.REPORTING.SEC_ROW_LEVEL_WORKER(
	WORKER_POSITION_SKEY,
	AUTHORISED_EMAIL_ADDRESS,
	AUTHORISED_TYPE
) as

select
    WORKER_POSITION_SKEY,
    AUTHORISED_EMAIL_ADDRESS,
    AUTHORISED_TYPE
from
    BEGA_HR_DATA_{{ env }}.TRANSFORMED.SEC_ROW_LEVEL_WORKER

;
